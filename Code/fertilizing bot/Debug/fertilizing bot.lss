
eyantra final code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00003628  00800200  000038be  00003952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000038be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000389  00803828  00803828  00006f7a  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00006f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  0000a378  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  0000ad28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a65  00000000  00000000  0000ade8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003cf  00000000  00000000  0000c84d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b03  00000000  00000000  0000cc1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  0000d720  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065c  00000000  00000000  0000ddb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001251  00000000  00000000  0000e414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 65 14 	jmp	0x28ca	; 0x28ca <__vector_5>
      18:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <permutation3+0x45a>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	18 e3       	ldi	r17, 0x38	; 56
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	ee eb       	ldi	r30, 0xBE	; 190
     17e:	f8 e3       	ldi	r31, 0x38	; 56
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a8 32       	cpi	r26, 0x28	; 40
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	1b e3       	ldi	r17, 0x3B	; 59
     192:	a8 e2       	ldi	r26, 0x28	; 40
     194:	b8 e3       	ldi	r27, 0x38	; 56
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a1 3b       	cpi	r26, 0xB1	; 177
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 94 16 	call	0x2d28	; 0x2d28 <main>
     1a4:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	86 e6       	ldi	r24, 0x66	; 102
     1ae:	9e e0       	ldi	r25, 0x0E	; 14
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_set_4bit+0x4>
     1b4:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1b6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1b8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ba:	80 e3       	ldi	r24, 0x30	; 48
     1bc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1be:	42 9a       	sbi	0x08, 2	; 8
     1c0:	ef ef       	ldi	r30, 0xFF	; 255
     1c2:	f7 e4       	ldi	r31, 0x47	; 71
     1c4:	31 97       	sbiw	r30, 0x01	; 1
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_set_4bit+0x18>
     1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_set_4bit+0x1e>
     1ca:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1cc:	42 98       	cbi	0x08, 2	; 8
     1ce:	e6 e6       	ldi	r30, 0x66	; 102
     1d0:	fe e0       	ldi	r31, 0x0E	; 14
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x26>
     1d6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1d8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1da:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1de:	42 9a       	sbi	0x08, 2	; 8
     1e0:	ef ef       	ldi	r30, 0xFF	; 255
     1e2:	f7 e4       	ldi	r31, 0x47	; 71
     1e4:	31 97       	sbiw	r30, 0x01	; 1
     1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_set_4bit+0x38>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_set_4bit+0x3e>
     1ea:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ec:	42 98       	cbi	0x08, 2	; 8
     1ee:	e6 e6       	ldi	r30, 0x66	; 102
     1f0:	fe e0       	ldi	r31, 0x0E	; 14
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x46>
     1f6:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1fa:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1fc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1fe:	42 9a       	sbi	0x08, 2	; 8
     200:	8f ef       	ldi	r24, 0xFF	; 255
     202:	97 e4       	ldi	r25, 0x47	; 71
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <lcd_set_4bit+0x58>
     208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_set_4bit+0x5e>
     20a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     20c:	42 98       	cbi	0x08, 2	; 8
     20e:	e6 e6       	ldi	r30, 0x66	; 102
     210:	fe e0       	ldi	r31, 0x0E	; 14
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x66>
     216:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     218:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     21a:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     21c:	80 e2       	ldi	r24, 0x20	; 32
     21e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     220:	42 9a       	sbi	0x08, 2	; 8
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	97 e4       	ldi	r25, 0x47	; 71
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0x7a>
     22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_set_4bit+0x80>
     22c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     22e:	42 98       	cbi	0x08, 2	; 8

	
}
     230:	08 95       	ret

00000232 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     232:	98 b1       	in	r25, 0x08	; 8
     234:	9f 70       	andi	r25, 0x0F	; 15
     236:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     238:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     23a:	28 2f       	mov	r18, r24
     23c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     23e:	92 2b       	or	r25, r18
     240:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     242:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     244:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     246:	42 9a       	sbi	0x08, 2	; 8
     248:	ef ef       	ldi	r30, 0xFF	; 255
     24a:	f7 e4       	ldi	r31, 0x47	; 71
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_wr_command+0x1a>
     250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_wr_command+0x20>
     252:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     254:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     256:	98 b1       	in	r25, 0x08	; 8
     258:	9f 70       	andi	r25, 0x0F	; 15
     25a:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     25c:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     25e:	82 95       	swap	r24
     260:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     262:	89 2b       	or	r24, r25
     264:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     268:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     26a:	42 9a       	sbi	0x08, 2	; 8
     26c:	8f ef       	ldi	r24, 0xFF	; 255
     26e:	97 e4       	ldi	r25, 0x47	; 71
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <lcd_wr_command+0x3e>
     274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_wr_command+0x44>
     276:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     278:	42 98       	cbi	0x08, 2	; 8
}
     27a:	08 95       	ret

0000027c <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     27c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
     280:	86 e6       	ldi	r24, 0x66	; 102
     282:	9e e0       	ldi	r25, 0x0E	; 14
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x8>
     288:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     28a:	88 e2       	ldi	r24, 0x28	; 40
     28c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x01);
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x06);
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x0E);
     29c:	8e e0       	ldi	r24, 0x0E	; 14
     29e:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
	lcd_wr_command(0x80);
     2a2:	80 e8       	ldi	r24, 0x80	; 128
     2a4:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
		
}
     2a8:	08 95       	ret

000002aa <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2aa:	98 b1       	in	r25, 0x08	; 8
     2ac:	9f 70       	andi	r25, 0x0F	; 15
     2ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2b0:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2b2:	28 2f       	mov	r18, r24
     2b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2b6:	92 2b       	or	r25, r18
     2b8:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2ba:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2be:	42 9a       	sbi	0x08, 2	; 8
     2c0:	ef ef       	ldi	r30, 0xFF	; 255
     2c2:	f7 e4       	ldi	r31, 0x47	; 71
     2c4:	31 97       	sbiw	r30, 0x01	; 1
     2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_wr_char+0x1a>
     2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_wr_char+0x20>
     2ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2cc:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2ce:	98 b1       	in	r25, 0x08	; 8
     2d0:	9f 70       	andi	r25, 0x0F	; 15
     2d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2d6:	82 95       	swap	r24
     2d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2da:	89 2b       	or	r24, r25
     2dc:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2de:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2e2:	42 9a       	sbi	0x08, 2	; 8
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	97 e4       	ldi	r25, 0x47	; 71
     2e8:	01 97       	sbiw	r24, 0x01	; 1
     2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_wr_char+0x3e>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_wr_char+0x44>
     2ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2f0:	42 98       	cbi	0x08, 2	; 8
}
     2f2:	08 95       	ret

000002f4 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     2f4:	80 e8       	ldi	r24, 0x80	; 128
     2f6:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
}
     2fa:	08 95       	ret

000002fc <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
	while(*str != '\0')
     302:	88 81       	ld	r24, Y
     304:	88 23       	and	r24, r24
     306:	31 f0       	breq	.+12     	; 0x314 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     308:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     30a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     30e:	89 91       	ld	r24, Y+
     310:	88 23       	and	r24, r24
     312:	d9 f7       	brne	.-10     	; 0x30a <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     314:	df 91       	pop	r29
     316:	cf 91       	pop	r28
     318:	08 95       	ret

0000031a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     31a:	82 30       	cpi	r24, 0x02	; 2
     31c:	79 f0       	breq	.+30     	; 0x33c <lcd_cursor+0x22>
     31e:	83 30       	cpi	r24, 0x03	; 3
     320:	18 f4       	brcc	.+6      	; 0x328 <lcd_cursor+0xe>
     322:	81 30       	cpi	r24, 0x01	; 1
     324:	c9 f4       	brne	.+50     	; 0x358 <lcd_cursor+0x3e>
     326:	05 c0       	rjmp	.+10     	; 0x332 <lcd_cursor+0x18>
     328:	83 30       	cpi	r24, 0x03	; 3
     32a:	69 f0       	breq	.+26     	; 0x346 <lcd_cursor+0x2c>
     32c:	84 30       	cpi	r24, 0x04	; 4
     32e:	a1 f4       	brne	.+40     	; 0x358 <lcd_cursor+0x3e>
     330:	0f c0       	rjmp	.+30     	; 0x350 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     332:	86 2f       	mov	r24, r22
     334:	81 58       	subi	r24, 0x81	; 129
     336:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     33a:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     33c:	86 2f       	mov	r24, r22
     33e:	81 54       	subi	r24, 0x41	; 65
     340:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     344:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     346:	86 2f       	mov	r24, r22
     348:	8d 56       	subi	r24, 0x6D	; 109
     34a:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     34e:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     350:	86 2f       	mov	r24, r22
     352:	8d 52       	subi	r24, 0x2D	; 45
     354:	0e 94 19 01 	call	0x232	; 0x232 <lcd_wr_command>
     358:	08 95       	ret

0000035a <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	8a 01       	movw	r16, r20
     364:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     366:	88 23       	and	r24, r24
     368:	11 f0       	breq	.+4      	; 0x36e <lcd_print+0x14>
     36a:	66 23       	and	r22, r22
     36c:	19 f4       	brne	.+6      	; 0x374 <lcd_print+0x1a>
	{
		lcd_home();
     36e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <lcd_home>
     372:	02 c0       	rjmp	.+4      	; 0x378 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     374:	0e 94 8d 01 	call	0x31a	; 0x31a <lcd_cursor>
	}
	if(digits==5 || flag==1)
     378:	c5 30       	cpi	r28, 0x05	; 5
     37a:	d1 05       	cpc	r29, r1
     37c:	71 f4       	brne	.+28     	; 0x39a <lcd_print+0x40>
	{
		million=value/10000+48;
     37e:	c8 01       	movw	r24, r16
     380:	60 e1       	ldi	r22, 0x10	; 16
     382:	77 e2       	ldi	r23, 0x27	; 39
     384:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     388:	cb 01       	movw	r24, r22
     38a:	c0 96       	adiw	r24, 0x30	; 48
     38c:	90 93 13 39 	sts	0x3913, r25
     390:	80 93 12 39 	sts	0x3912, r24
		lcd_wr_char(million);
     394:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
     398:	03 c0       	rjmp	.+6      	; 0x3a0 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     39a:	c4 30       	cpi	r28, 0x04	; 4
     39c:	d1 05       	cpc	r29, r1
     39e:	b9 f4       	brne	.+46     	; 0x3ce <lcd_print+0x74>
	{
		temp = value/1000;
     3a0:	c8 01       	movw	r24, r16
     3a2:	68 ee       	ldi	r22, 0xE8	; 232
     3a4:	73 e0       	ldi	r23, 0x03	; 3
     3a6:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     3aa:	cb 01       	movw	r24, r22
     3ac:	70 93 19 39 	sts	0x3919, r23
     3b0:	60 93 18 39 	sts	0x3918, r22
		thousand = temp%10 + 48;
     3b4:	6a e0       	ldi	r22, 0x0A	; 10
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     3bc:	c0 96       	adiw	r24, 0x30	; 48
     3be:	90 93 e0 3a 	sts	0x3AE0, r25
     3c2:	80 93 df 3a 	sts	0x3ADF, r24
		lcd_wr_char(thousand);
     3c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3ce:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3d0:	c3 30       	cpi	r28, 0x03	; 3
     3d2:	d1 05       	cpc	r29, r1
     3d4:	11 f0       	breq	.+4      	; 0x3da <lcd_print+0x80>
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	b1 f4       	brne	.+44     	; 0x406 <lcd_print+0xac>
	{
		temp = value/100;
     3da:	c8 01       	movw	r24, r16
     3dc:	64 e6       	ldi	r22, 0x64	; 100
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     3e4:	cb 01       	movw	r24, r22
     3e6:	70 93 19 39 	sts	0x3919, r23
     3ea:	60 93 18 39 	sts	0x3918, r22
		hundred = temp%10 + 48;
     3ee:	6a e0       	ldi	r22, 0x0A	; 10
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     3f6:	c0 96       	adiw	r24, 0x30	; 48
     3f8:	90 93 08 3a 	sts	0x3A08, r25
     3fc:	80 93 07 3a 	sts	0x3A07, r24
		lcd_wr_char(hundred);
     400:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     404:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     406:	c2 30       	cpi	r28, 0x02	; 2
     408:	d1 05       	cpc	r29, r1
     40a:	11 f0       	breq	.+4      	; 0x410 <lcd_print+0xb6>
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	b1 f4       	brne	.+44     	; 0x43c <lcd_print+0xe2>
	{
		temp = value/10;
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	c8 01       	movw	r24, r16
     416:	b9 01       	movw	r22, r18
     418:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     41c:	cb 01       	movw	r24, r22
     41e:	70 93 19 39 	sts	0x3919, r23
     422:	60 93 18 39 	sts	0x3918, r22
		tens = temp%10 + 48;
     426:	b9 01       	movw	r22, r18
     428:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     42c:	c0 96       	adiw	r24, 0x30	; 48
     42e:	90 93 fc 39 	sts	0x39FC, r25
     432:	80 93 fb 39 	sts	0x39FB, r24
		lcd_wr_char(tens);
     436:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
		flag=1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     43c:	c1 30       	cpi	r28, 0x01	; 1
     43e:	d1 05       	cpc	r29, r1
     440:	11 f0       	breq	.+4      	; 0x446 <lcd_print+0xec>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	61 f4       	brne	.+24     	; 0x45e <lcd_print+0x104>
	{
		unit = value%10 + 48;
     446:	c8 01       	movw	r24, r16
     448:	6a e0       	ldi	r22, 0x0A	; 10
     44a:	70 e0       	ldi	r23, 0x00	; 0
     44c:	0e 94 36 1c 	call	0x386c	; 0x386c <__udivmodhi4>
     450:	c0 96       	adiw	r24, 0x30	; 48
     452:	90 93 de 3a 	sts	0x3ADE, r25
     456:	80 93 dd 3a 	sts	0x3ADD, r24
		lcd_wr_char(unit);
     45a:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	if(digits>5)
     45e:	c6 30       	cpi	r28, 0x06	; 6
     460:	d1 05       	cpc	r29, r1
     462:	1c f0       	brlt	.+6      	; 0x46a <lcd_print+0x110>
	{
		lcd_wr_char('E');
     464:	85 e4       	ldi	r24, 0x45	; 69
     466:	0e 94 55 01 	call	0x2aa	; 0x2aa <lcd_wr_char>
	}
	
}
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	0f 91       	pop	r16
     472:	08 95       	ret

00000474 <get_turn>:
{0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,7,0,0},
{0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0}};
	
//Returns turn required to move from current to next direction
int get_turn(int init, int final)	
{
     474:	9c 01       	movw	r18, r24
     476:	fb 01       	movw	r30, r22
	if(init==final)
     478:	86 17       	cp	r24, r22
     47a:	97 07       	cpc	r25, r23
     47c:	71 f1       	breq	.+92     	; 0x4da <get_turn+0x66>
		return 1;
	if((init*3)%10==final)
     47e:	88 0f       	add	r24, r24
     480:	99 1f       	adc	r25, r25
     482:	82 0f       	add	r24, r18
     484:	93 1f       	adc	r25, r19
     486:	6a e0       	ldi	r22, 0x0A	; 10
     488:	70 e0       	ldi	r23, 0x00	; 0
     48a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
     48e:	8e 17       	cp	r24, r30
     490:	9f 07       	cpc	r25, r31
     492:	31 f1       	breq	.+76     	; 0x4e0 <get_turn+0x6c>
		return 2;
	if((init*9)%10==final)
     494:	c9 01       	movw	r24, r18
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	88 0f       	add	r24, r24
     49c:	99 1f       	adc	r25, r25
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	82 0f       	add	r24, r18
     4a4:	93 1f       	adc	r25, r19
     4a6:	6a e0       	ldi	r22, 0x0A	; 10
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
     4ae:	8e 17       	cp	r24, r30
     4b0:	9f 07       	cpc	r25, r31
     4b2:	c9 f0       	breq	.+50     	; 0x4e6 <get_turn+0x72>
		return 3;
	if((init*7)%10==final)
     4b4:	c9 01       	movw	r24, r18
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	82 1b       	sub	r24, r18
     4c4:	93 0b       	sbc	r25, r19
     4c6:	6a e0       	ldi	r22, 0x0A	; 10
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
     4ce:	8e 17       	cp	r24, r30
     4d0:	9f 07       	cpc	r25, r31
     4d2:	61 f4       	brne	.+24     	; 0x4ec <get_turn+0x78>
		return 4;
     4d4:	84 e0       	ldi	r24, 0x04	; 4
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	08 95       	ret
	
//Returns turn required to move from current to next direction
int get_turn(int init, int final)	
{
	if(init==final)
		return 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	08 95       	ret
	if((init*3)%10==final)
		return 2;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	08 95       	ret
	if((init*9)%10==final)
		return 3;
     4e6:	83 e0       	ldi	r24, 0x03	; 3
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	08 95       	ret
	if((init*7)%10==final)
		return 4;
	else return 0;
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
}
     4f0:	08 95       	ret

000004f2 <get>:

int get(int i)
{
	if(i>=3)
     4f2:	83 30       	cpi	r24, 0x03	; 3
     4f4:	91 05       	cpc	r25, r1
     4f6:	0c f0       	brlt	.+2      	; 0x4fa <get+0x8>
		return (i-3);
     4f8:	03 97       	sbiw	r24, 0x03	; 3
	else 
		return i;
}
     4fa:	08 95       	ret

000004fc <get1>:

int get1(int i)
{
	if(i>=4)
     4fc:	84 30       	cpi	r24, 0x04	; 4
     4fe:	91 05       	cpc	r25, r1
     500:	0c f0       	brlt	.+2      	; 0x504 <get1+0x8>
		return (i-4);
     502:	04 97       	sbiw	r24, 0x04	; 4
	else
		return i;
}
     504:	08 95       	ret

00000506 <permutation3>:

//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
{
     506:	2f 92       	push	r2
     508:	3f 92       	push	r3
     50a:	4f 92       	push	r4
     50c:	5f 92       	push	r5
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	6c 97       	sbiw	r28, 0x1c	; 28
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
    for(i=0;i<3;i++)
				{
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+1)]-1] + C[perm[get(i+1)]-1][perm[get(i+2)]-1]; //this computes the weight(length) of the path followed for a particular sequence
     53a:	20 91 13 3a 	lds	r18, 0x3A13
     53e:	30 91 14 3a 	lds	r19, 0x3A14
     542:	21 50       	subi	r18, 0x01	; 1
     544:	30 40       	sbci	r19, 0x00	; 0
     546:	40 91 2e 38 	lds	r20, 0x382E
     54a:	50 91 2f 38 	lds	r21, 0x382F
     54e:	5a 8f       	std	Y+26, r21	; 0x1a
     550:	49 8f       	std	Y+25, r20	; 0x19
     552:	80 91 26 38 	lds	r24, 0x3826
     556:	90 91 27 38 	lds	r25, 0x3827
     55a:	9a 87       	std	Y+10, r25	; 0x0a
     55c:	89 87       	std	Y+9, r24	; 0x09

					if(weight[j]<min)
					{
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
     55e:	ec e3       	ldi	r30, 0x3C	; 60
     560:	f8 e3       	ldi	r31, 0x38	; 56
//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
{
    for(i=0;i<3;i++)
				{
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+1)]-1] + C[perm[get(i+1)]-1][perm[get(i+2)]-1]; //this computes the weight(length) of the path followed for a particular sequence
     562:	60 90 3c 38 	lds	r6, 0x383C
     566:	20 90 3d 38 	lds	r2, 0x383D
     56a:	70 90 3e 38 	lds	r7, 0x383E
     56e:	33 80       	ldd	r3, Z+3	; 0x03
     570:	90 91 40 38 	lds	r25, 0x3840
     574:	9d 8b       	std	Y+21, r25	; 0x15
     576:	a5 81       	ldd	r26, Z+5	; 0x05
     578:	ae 8b       	std	Y+22, r26	; 0x16
     57a:	b0 91 16 39 	lds	r27, 0x3916
     57e:	bf 8b       	std	Y+23, r27	; 0x17
     580:	e0 91 17 39 	lds	r30, 0x3917
     584:	e8 8f       	std	Y+24, r30	; 0x18
     586:	40 91 e1 3a 	lds	r20, 0x3AE1
     58a:	50 91 e2 3a 	lds	r21, 0x3AE2
     58e:	5e 87       	std	Y+14, r21	; 0x0e
     590:	4d 87       	std	Y+13, r20	; 0x0d
     592:	80 91 e3 3a 	lds	r24, 0x3AE3
     596:	90 91 e4 3a 	lds	r25, 0x3AE4
     59a:	98 8b       	std	Y+16, r25	; 0x10
     59c:	8f 87       	std	Y+15, r24	; 0x0f
     59e:	a0 91 e5 3a 	lds	r26, 0x3AE5
     5a2:	b0 91 e6 3a 	lds	r27, 0x3AE6
     5a6:	ba 8b       	std	Y+18, r27	; 0x12
     5a8:	a9 8b       	std	Y+17, r26	; 0x11
	else
		return i;
}

//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
     5aa:	89 8d       	ldd	r24, Y+25	; 0x19
     5ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	fc 01       	movw	r30, r24
     5b4:	e9 51       	subi	r30, 0x19	; 25
     5b6:	f5 4c       	sbci	r31, 0xC5	; 197
     5b8:	f8 87       	std	Y+8, r31	; 0x08
     5ba:	ef 83       	std	Y+7, r30	; 0x07
{
    for(i=0;i<3;i++)
     5bc:	44 24       	eor	r4, r4
     5be:	55 24       	eor	r5, r5
				{
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+1)]-1] + C[perm[get(i+1)]-1][perm[get(i+2)]-1]; //this computes the weight(length) of the path followed for a particular sequence
     5c0:	c9 01       	movw	r24, r18
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	88 0f       	add	r24, r24
     5cc:	99 1f       	adc	r25, r25
     5ce:	88 0f       	add	r24, r24
     5d0:	99 1f       	adc	r25, r25
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	ac 01       	movw	r20, r24
     5d8:	42 1b       	sub	r20, r18
     5da:	53 0b       	sbc	r21, r19
     5dc:	5c 8b       	std	Y+20, r21	; 0x14
     5de:	4b 8b       	std	Y+19, r20	; 0x13
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
						{if(get(i)==k)
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+1)];correct_order[2]=Input[get(k+2)];}}
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f9 e0       	ldi	r31, 0x09	; 9
     5e4:	af 2e       	mov	r10, r31
     5e6:	fa e3       	ldi	r31, 0x3A	; 58
     5e8:	bf 2e       	mov	r11, r31
     5ea:	f0 2d       	mov	r31, r0
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
     5ec:	c2 01       	movw	r24, r4
     5ee:	43 2c       	mov	r4, r3
     5f0:	57 2c       	mov	r5, r7
     5f2:	72 2c       	mov	r7, r2
     5f4:	1c 01       	movw	r2, r24
//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
{
    for(i=0;i<3;i++)
				{
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+1)]-1] + C[perm[get(i+1)]-1][perm[get(i+2)]-1]; //this computes the weight(length) of the path followed for a particular sequence
     5f6:	c1 01       	movw	r24, r2
     5f8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     5fc:	8c 01       	movw	r16, r24
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	86 5e       	subi	r24, 0xE6	; 230
     604:	96 4c       	sbci	r25, 0xC6	; 198
     606:	dc 01       	movw	r26, r24
     608:	0d 90       	ld	r0, X+
     60a:	bc 91       	ld	r27, X
     60c:	a0 2d       	mov	r26, r0
     60e:	ba 83       	std	Y+2, r27	; 0x02
     610:	a9 83       	std	Y+1, r26	; 0x01
     612:	7d 01       	movw	r14, r26
     614:	08 94       	sec
     616:	e1 08       	sbc	r14, r1
     618:	f1 08       	sbc	r15, r1
     61a:	8b 89       	ldd	r24, Y+19	; 0x13
     61c:	9c 89       	ldd	r25, Y+20	; 0x14
     61e:	8e 0d       	add	r24, r14
     620:	9f 1d       	adc	r25, r15
     622:	88 0f       	add	r24, r24
     624:	99 1f       	adc	r25, r25
     626:	8e 5d       	subi	r24, 0xDE	; 222
     628:	99 4f       	sbci	r25, 0xF9	; 249
     62a:	fc 01       	movw	r30, r24
     62c:	01 90       	ld	r0, Z+
     62e:	f0 81       	ld	r31, Z
     630:	e0 2d       	mov	r30, r0
     632:	fc 87       	std	Y+12, r31	; 0x0c
     634:	eb 87       	std	Y+11, r30	; 0x0b
     636:	08 94       	sec
     638:	21 1c       	adc	r2, r1
     63a:	31 1c       	adc	r3, r1
     63c:	c1 01       	movw	r24, r2
     63e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	86 5e       	subi	r24, 0xE6	; 230
     648:	96 4c       	sbci	r25, 0xC6	; 198
     64a:	dc 01       	movw	r26, r24
     64c:	0d 90       	ld	r0, X+
     64e:	bc 91       	ld	r27, X
     650:	a0 2d       	mov	r26, r0
     652:	bc 83       	std	Y+4, r27	; 0x04
     654:	ab 83       	std	Y+3, r26	; 0x03
     656:	4d 01       	movw	r8, r26
     658:	08 94       	sec
     65a:	81 08       	sbc	r8, r1
     65c:	91 08       	sbc	r9, r1
     65e:	c7 01       	movw	r24, r14
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	8e 0d       	add	r24, r14
     666:	9f 1d       	adc	r25, r15
     668:	88 0f       	add	r24, r24
     66a:	99 1f       	adc	r25, r25
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	8e 19       	sub	r24, r14
     676:	9f 09       	sbc	r25, r15
     678:	88 0d       	add	r24, r8
     67a:	99 1d       	adc	r25, r9
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	8e 5d       	subi	r24, 0xDE	; 222
     682:	99 4f       	sbci	r25, 0xF9	; 249
     684:	fc 01       	movw	r30, r24
     686:	80 81       	ld	r24, Z
     688:	91 81       	ldd	r25, Z+1	; 0x01
     68a:	2b 85       	ldd	r18, Y+11	; 0x0b
     68c:	3c 85       	ldd	r19, Y+12	; 0x0c
     68e:	28 0f       	add	r18, r24
     690:	39 1f       	adc	r19, r25
     692:	3c 8f       	std	Y+28, r19	; 0x1c
     694:	2b 8f       	std	Y+27, r18	; 0x1b
     696:	c1 01       	movw	r24, r2
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	86 5e       	subi	r24, 0xE6	; 230
     6a4:	96 4c       	sbci	r25, 0xC6	; 198
     6a6:	dc 01       	movw	r26, r24
     6a8:	0d 90       	ld	r0, X+
     6aa:	bc 91       	ld	r27, X
     6ac:	a0 2d       	mov	r26, r0
     6ae:	be 83       	std	Y+6, r27	; 0x06
     6b0:	ad 83       	std	Y+5, r26	; 0x05
     6b2:	6d 01       	movw	r12, r26
     6b4:	08 94       	sec
     6b6:	c1 08       	sbc	r12, r1
     6b8:	d1 08       	sbc	r13, r1
     6ba:	c4 01       	movw	r24, r8
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 0d       	add	r24, r8
     6c2:	99 1d       	adc	r25, r9
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	88 19       	sub	r24, r8
     6d2:	99 09       	sbc	r25, r9
     6d4:	8c 0d       	add	r24, r12
     6d6:	9d 1d       	adc	r25, r13
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	8e 5d       	subi	r24, 0xDE	; 222
     6de:	99 4f       	sbci	r25, 0xF9	; 249
     6e0:	fc 01       	movw	r30, r24
     6e2:	80 81       	ld	r24, Z
     6e4:	91 81       	ldd	r25, Z+1	; 0x01
     6e6:	2b 8d       	ldd	r18, Y+27	; 0x1b
     6e8:	3c 8d       	ldd	r19, Y+28	; 0x1c
     6ea:	82 0f       	add	r24, r18
     6ec:	93 1f       	adc	r25, r19
     6ee:	af 81       	ldd	r26, Y+7	; 0x07
     6f0:	b8 85       	ldd	r27, Y+8	; 0x08
     6f2:	8d 93       	st	X+, r24
     6f4:	9d 93       	st	X+, r25
     6f6:	b8 87       	std	Y+8, r27	; 0x08
     6f8:	af 83       	std	Y+7, r26	; 0x07

					if(weight[j]<min)
     6fa:	e9 85       	ldd	r30, Y+9	; 0x09
     6fc:	fa 85       	ldd	r31, Y+10	; 0x0a
     6fe:	8e 17       	cp	r24, r30
     700:	9f 07       	cpc	r25, r31
     702:	0c f0       	brlt	.+2      	; 0x706 <permutation3+0x200>
     704:	53 c0       	rjmp	.+166    	; 0x7ac <permutation3+0x2a6>
	else
		return i;
}

//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
     706:	fd 01       	movw	r30, r26
     708:	32 97       	sbiw	r30, 0x02	; 2
				{
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+1)]-1] + C[perm[get(i+1)]-1][perm[get(i+2)]-1]; //this computes the weight(length) of the path followed for a particular sequence

					if(weight[j]<min)
					{
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
     70a:	20 81       	ld	r18, Z
     70c:	31 81       	ldd	r19, Z+1	; 0x01
     70e:	3a 87       	std	Y+10, r19	; 0x0a
     710:	29 87       	std	Y+9, r18	; 0x09
     712:	1c 8e       	std	Y+28, r1	; 0x1c
     714:	1b 8e       	std	Y+27, r1	; 0x1b
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
						{if(get(i)==k)
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+1)];correct_order[2]=Input[get(k+2)];}}
     716:	38 01       	movw	r6, r16
     718:	08 94       	sec
     71a:	61 1c       	adc	r6, r1
     71c:	71 1c       	adc	r7, r1
     71e:	44 24       	eor	r4, r4
     720:	55 24       	eor	r5, r5
     722:	68 94       	set
     724:	41 f8       	bld	r4, 1
     726:	40 0e       	add	r4, r16
     728:	51 1e       	adc	r5, r17
     72a:	89 89       	ldd	r24, Y+17	; 0x11
     72c:	9a 89       	ldd	r25, Y+18	; 0x12
						
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
						{if(get(i)==k)
     72e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     730:	bc 8d       	ldd	r27, Y+28	; 0x1c
     732:	0a 17       	cp	r16, r26
     734:	1b 07       	cpc	r17, r27
     736:	21 f5       	brne	.+72     	; 0x780 <permutation3+0x27a>
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+1)];correct_order[2]=Input[get(k+2)];}}
     738:	c8 01       	movw	r24, r16
     73a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	8a 0d       	add	r24, r10
     744:	9b 1d       	adc	r25, r11
     746:	fc 01       	movw	r30, r24
     748:	01 90       	ld	r0, Z+
     74a:	f0 81       	ld	r31, Z
     74c:	e0 2d       	mov	r30, r0
     74e:	fe 87       	std	Y+14, r31	; 0x0e
     750:	ed 87       	std	Y+13, r30	; 0x0d
     752:	c3 01       	movw	r24, r6
     754:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	8a 0d       	add	r24, r10
     75e:	9b 1d       	adc	r25, r11
     760:	dc 01       	movw	r26, r24
     762:	0d 90       	ld	r0, X+
     764:	bc 91       	ld	r27, X
     766:	a0 2d       	mov	r26, r0
     768:	b8 8b       	std	Y+16, r27	; 0x10
     76a:	af 87       	std	Y+15, r26	; 0x0f
     76c:	c2 01       	movw	r24, r4
     76e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     772:	88 0f       	add	r24, r24
     774:	99 1f       	adc	r25, r25
     776:	8a 0d       	add	r24, r10
     778:	9b 1d       	adc	r25, r11
     77a:	fc 01       	movw	r30, r24
     77c:	80 81       	ld	r24, Z
     77e:	91 81       	ldd	r25, Z+1	; 0x01
     780:	2b 8d       	ldd	r18, Y+27	; 0x1b
     782:	3c 8d       	ldd	r19, Y+28	; 0x1c
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	3c 8f       	std	Y+28, r19	; 0x1c
     78a:	2b 8f       	std	Y+27, r18	; 0x1b
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
     78c:	23 30       	cpi	r18, 0x03	; 3
     78e:	31 05       	cpc	r19, r1
     790:	71 f6       	brne	.-100    	; 0x72e <permutation3+0x228>
     792:	9a 8b       	std	Y+18, r25	; 0x12
     794:	89 8b       	std	Y+17, r24	; 0x11
					{
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
     796:	3d 81       	ldd	r19, Y+5	; 0x05
     798:	3d 8b       	std	Y+21, r19	; 0x15
     79a:	4e 81       	ldd	r20, Y+6	; 0x06
     79c:	4e 8b       	std	Y+22, r20	; 0x16
					if(weight[j]<min)
					{
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
     79e:	5b 80       	ldd	r5, Y+3	; 0x03
     7a0:	4c 80       	ldd	r4, Y+4	; 0x04

					if(weight[j]<min)
					{
						min = weight[j];                                                           // the min variable is updated as and when the new weight is lower than the current min value
						
						path[0] = perm[get(i)];        
     7a2:	69 80       	ldd	r6, Y+1	; 0x01
     7a4:	7a 80       	ldd	r7, Y+2	; 0x02
						path[1] = perm[get(i+1)];                                                 //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+2)];
						for(k=0;k<3;k++)
     7a6:	53 e0       	ldi	r21, 0x03	; 3
     7a8:	5f 8b       	std	Y+23, r21	; 0x17
     7aa:	18 8e       	std	Y+24, r1	; 0x18
					}
					
					j++;


					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+2)]-1] + C[perm[get(i+2)]-1][perm[get(i+1)]-1];
     7ac:	c7 01       	movw	r24, r14
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	8e 0d       	add	r24, r14
     7b4:	9f 1d       	adc	r25, r15
     7b6:	88 0f       	add	r24, r24
     7b8:	99 1f       	adc	r25, r25
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	88 0f       	add	r24, r24
     7c0:	99 1f       	adc	r25, r25
     7c2:	8e 19       	sub	r24, r14
     7c4:	9f 09       	sbc	r25, r15
     7c6:	8c 0d       	add	r24, r12
     7c8:	9d 1d       	adc	r25, r13
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	8e 5d       	subi	r24, 0xDE	; 222
     7d0:	99 4f       	sbci	r25, 0xF9	; 249
     7d2:	dc 01       	movw	r26, r24
     7d4:	8d 91       	ld	r24, X+
     7d6:	9c 91       	ld	r25, X
     7d8:	eb 84       	ldd	r14, Y+11	; 0x0b
     7da:	fc 84       	ldd	r15, Y+12	; 0x0c
     7dc:	e8 0e       	add	r14, r24
     7de:	f9 1e       	adc	r15, r25
     7e0:	c6 01       	movw	r24, r12
     7e2:	88 0f       	add	r24, r24
     7e4:	99 1f       	adc	r25, r25
     7e6:	8c 0d       	add	r24, r12
     7e8:	9d 1d       	adc	r25, r13
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	8c 19       	sub	r24, r12
     7f8:	9d 09       	sbc	r25, r13
     7fa:	88 0d       	add	r24, r8
     7fc:	99 1d       	adc	r25, r9
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	8e 5d       	subi	r24, 0xDE	; 222
     804:	99 4f       	sbci	r25, 0xF9	; 249
     806:	fc 01       	movw	r30, r24
     808:	80 81       	ld	r24, Z
     80a:	91 81       	ldd	r25, Z+1	; 0x01
     80c:	e8 0e       	add	r14, r24
     80e:	f9 1e       	adc	r15, r25
     810:	af 81       	ldd	r26, Y+7	; 0x07
     812:	b8 85       	ldd	r27, Y+8	; 0x08
     814:	11 96       	adiw	r26, 0x01	; 1
     816:	fc 92       	st	X, r15
     818:	ee 92       	st	-X, r14

					if(weight[j]<min)															
     81a:	e9 85       	ldd	r30, Y+9	; 0x09
     81c:	fa 85       	ldd	r31, Y+10	; 0x0a
     81e:	ee 16       	cp	r14, r30
     820:	ff 06       	cpc	r15, r31
     822:	0c f0       	brlt	.+2      	; 0x826 <permutation3+0x320>
     824:	53 c0       	rjmp	.+166    	; 0x8cc <permutation3+0x3c6>
     826:	66 24       	eor	r6, r6
     828:	77 24       	eor	r7, r7
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+1)];

						for(k=0;k<3;k++)
						{if(get(i)==k)
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+2)];correct_order[2]=Input[get(k+1)];}}
     82a:	88 24       	eor	r8, r8
     82c:	99 24       	eor	r9, r9
     82e:	68 94       	set
     830:	81 f8       	bld	r8, 1
     832:	80 0e       	add	r8, r16
     834:	91 1e       	adc	r9, r17
     836:	68 01       	movw	r12, r16
     838:	08 94       	sec
     83a:	c1 1c       	adc	r12, r1
     83c:	d1 1c       	adc	r13, r1
     83e:	7a 86       	std	Y+10, r7	; 0x0a
     840:	69 86       	std	Y+9, r6	; 0x09
     842:	4d 84       	ldd	r4, Y+13	; 0x0d
     844:	5e 84       	ldd	r5, Y+14	; 0x0e
     846:	89 89       	ldd	r24, Y+17	; 0x11
     848:	9a 89       	ldd	r25, Y+18	; 0x12
     84a:	6f 84       	ldd	r6, Y+15	; 0x0f
     84c:	78 88       	ldd	r7, Y+16	; 0x10
						path[0] = perm[get(i)];
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+1)];

						for(k=0;k<3;k++)
						{if(get(i)==k)
     84e:	29 85       	ldd	r18, Y+9	; 0x09
     850:	3a 85       	ldd	r19, Y+10	; 0x0a
     852:	02 17       	cp	r16, r18
     854:	13 07       	cpc	r17, r19
     856:	f9 f4       	brne	.+62     	; 0x896 <permutation3+0x390>
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+2)];correct_order[2]=Input[get(k+1)];}}
     858:	c8 01       	movw	r24, r16
     85a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	8a 0d       	add	r24, r10
     864:	9b 1d       	adc	r25, r11
     866:	dc 01       	movw	r26, r24
     868:	4d 90       	ld	r4, X+
     86a:	5c 90       	ld	r5, X
     86c:	c4 01       	movw	r24, r8
     86e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     872:	88 0f       	add	r24, r24
     874:	99 1f       	adc	r25, r25
     876:	8a 0d       	add	r24, r10
     878:	9b 1d       	adc	r25, r11
     87a:	fc 01       	movw	r30, r24
     87c:	60 80       	ld	r6, Z
     87e:	71 80       	ldd	r7, Z+1	; 0x01
     880:	c6 01       	movw	r24, r12
     882:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	8a 0d       	add	r24, r10
     88c:	9b 1d       	adc	r25, r11
     88e:	dc 01       	movw	r26, r24
     890:	8d 91       	ld	r24, X+
     892:	9c 91       	ld	r25, X
     894:	11 97       	sbiw	r26, 0x01	; 1
     896:	e9 85       	ldd	r30, Y+9	; 0x09
     898:	fa 85       	ldd	r31, Y+10	; 0x0a
     89a:	31 96       	adiw	r30, 0x01	; 1
     89c:	fa 87       	std	Y+10, r31	; 0x0a
     89e:	e9 87       	std	Y+9, r30	; 0x09
						min = weight[j];                
						path[0] = perm[get(i)];
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+1)];

						for(k=0;k<3;k++)
     8a0:	e3 30       	cpi	r30, 0x03	; 3
     8a2:	f1 05       	cpc	r31, r1
     8a4:	a1 f6       	brne	.-88     	; 0x84e <permutation3+0x348>
     8a6:	5e 86       	std	Y+14, r5	; 0x0e
     8a8:	4d 86       	std	Y+13, r4	; 0x0d
     8aa:	9a 8b       	std	Y+18, r25	; 0x12
     8ac:	89 8b       	std	Y+17, r24	; 0x11
     8ae:	78 8a       	std	Y+16, r7	; 0x10
     8b0:	6f 86       	std	Y+15, r6	; 0x0f
					if(weight[j]<min)															
					{
						min = weight[j];                
						path[0] = perm[get(i)];
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+1)];
     8b2:	fb 81       	ldd	r31, Y+3	; 0x03
     8b4:	fd 8b       	std	Y+21, r31	; 0x15
     8b6:	2c 81       	ldd	r18, Y+4	; 0x04
     8b8:	2e 8b       	std	Y+22, r18	; 0x16

					if(weight[j]<min)															
					{
						min = weight[j];                
						path[0] = perm[get(i)];
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
     8ba:	5d 80       	ldd	r5, Y+5	; 0x05
     8bc:	4e 80       	ldd	r4, Y+6	; 0x06
					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+2)]-1] + C[perm[get(i+2)]-1][perm[get(i+1)]-1];

					if(weight[j]<min)															
					{
						min = weight[j];                
						path[0] = perm[get(i)];
     8be:	69 80       	ldd	r6, Y+1	; 0x01
     8c0:	7a 80       	ldd	r7, Y+2	; 0x02

					weight[j] = C[start-1][perm[get(i)]-1] + C[perm[get(i)]-1][perm[get(i+2)]-1] + C[perm[get(i+2)]-1][perm[get(i+1)]-1];

					if(weight[j]<min)															
					{
						min = weight[j];                
     8c2:	fa 86       	std	Y+10, r15	; 0x0a
     8c4:	e9 86       	std	Y+9, r14	; 0x09
						path[0] = perm[get(i)];
						path[1] = perm[get(i+2)];                                                //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get(i+1)];

						for(k=0;k<3;k++)
     8c6:	33 e0       	ldi	r19, 0x03	; 3
     8c8:	3f 8b       	std	Y+23, r19	; 0x17
     8ca:	18 8e       	std	Y+24, r1	; 0x18
}

//Function that cacomputes different permutations of the set of 3 tuples and determines the shortest path
void permutation3()
{
    for(i=0;i<3;i++)
     8cc:	43 e0       	ldi	r20, 0x03	; 3
     8ce:	24 16       	cp	r2, r20
     8d0:	31 04       	cpc	r3, r1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <permutation3+0x3d0>
     8d4:	90 ce       	rjmp	.-736    	; 0x5f6 <permutation3+0xf0>
     8d6:	27 2c       	mov	r2, r7
     8d8:	89 8d       	ldd	r24, Y+25	; 0x19
     8da:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8dc:	03 96       	adiw	r24, 0x03	; 3
     8de:	90 93 2f 38 	sts	0x382F, r25
     8e2:	80 93 2e 38 	sts	0x382E, r24
     8e6:	89 85       	ldd	r24, Y+9	; 0x09
     8e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     8ea:	90 93 27 38 	sts	0x3827, r25
     8ee:	80 93 26 38 	sts	0x3826, r24
     8f2:	ec e3       	ldi	r30, 0x3C	; 60
     8f4:	f8 e3       	ldi	r31, 0x38	; 56
     8f6:	60 92 3c 38 	sts	0x383C, r6
     8fa:	20 92 3d 38 	sts	0x383D, r2
     8fe:	50 92 3e 38 	sts	0x383E, r5
     902:	43 82       	std	Z+3, r4	; 0x03
     904:	9d 89       	ldd	r25, Y+21	; 0x15
     906:	90 93 40 38 	sts	0x3840, r25
     90a:	ae 89       	ldd	r26, Y+22	; 0x16
     90c:	a5 83       	std	Z+5, r26	; 0x05
     90e:	bf 89       	ldd	r27, Y+23	; 0x17
     910:	b0 93 16 39 	sts	0x3916, r27
     914:	e8 8d       	ldd	r30, Y+24	; 0x18
     916:	e0 93 17 39 	sts	0x3917, r30
     91a:	2d 85       	ldd	r18, Y+13	; 0x0d
     91c:	3e 85       	ldd	r19, Y+14	; 0x0e
     91e:	30 93 e2 3a 	sts	0x3AE2, r19
     922:	20 93 e1 3a 	sts	0x3AE1, r18
     926:	4f 85       	ldd	r20, Y+15	; 0x0f
     928:	58 89       	ldd	r21, Y+16	; 0x10
     92a:	50 93 e4 3a 	sts	0x3AE4, r21
     92e:	40 93 e3 3a 	sts	0x3AE3, r20
     932:	89 89       	ldd	r24, Y+17	; 0x11
     934:	9a 89       	ldd	r25, Y+18	; 0x12
     936:	90 93 e6 3a 	sts	0x3AE6, r25
     93a:	80 93 e5 3a 	sts	0x3AE5, r24
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	90 93 f7 39 	sts	0x39F7, r25
     946:	80 93 f6 39 	sts	0x39F6, r24
							{correct_order[0]=Input[get(k)];correct_order[1]=Input[get(k+2)];correct_order[2]=Input[get(k+1)];}}

					}
					
				}
}
     94a:	6c 96       	adiw	r28, 0x1c	; 28
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	3f 90       	pop	r3
     978:	2f 90       	pop	r2
     97a:	08 95       	ret

0000097c <permutation4>:


//Function that cacomputes different permutations of the set of 4 tuples and determines the shortest 	
void permutation4()																
{
     97c:	2f 92       	push	r2
     97e:	3f 92       	push	r3
     980:	4f 92       	push	r4
     982:	5f 92       	push	r5
     984:	6f 92       	push	r6
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	e2 97       	sbiw	r28, 0x32	; 50
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
    min=100;
    for(i=0;i<4;i++)
				{
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];
     9b0:	20 91 13 3a 	lds	r18, 0x3A13
     9b4:	30 91 14 3a 	lds	r19, 0x3A14
     9b8:	21 50       	subi	r18, 0x01	; 1
     9ba:	30 40       	sbci	r19, 0x00	; 0
     9bc:	40 91 2e 38 	lds	r20, 0x382E
     9c0:	50 91 2f 38 	lds	r21, 0x382F
     9c4:	58 ab       	sts	0x58, r21
     9c6:	4f a7       	lds	r20, 0x7f
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f4 e6       	ldi	r31, 0x64	; 100
     9cc:	2f 2e       	mov	r2, r31
     9ce:	33 24       	eor	r3, r3
     9d0:	f0 2d       	mov	r31, r0

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
     9d2:	ec e3       	ldi	r30, 0x3C	; 60
     9d4:	f8 e3       	ldi	r31, 0x38	; 56
void permutation4()																
{
    min=100;
    for(i=0;i<4;i++)
				{
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];
     9d6:	50 91 3c 38 	lds	r21, 0x383C
     9da:	5f a3       	lds	r21, 0x5f
     9dc:	80 91 3d 38 	lds	r24, 0x383D
     9e0:	88 a7       	lds	r24, 0x78
     9e2:	90 91 3e 38 	lds	r25, 0x383E
     9e6:	9b a3       	lds	r25, 0x5b
     9e8:	a3 81       	ldd	r26, Z+3	; 0x03
     9ea:	ac a3       	lds	r26, 0x5c
     9ec:	b0 91 40 38 	lds	r27, 0x3840
     9f0:	b9 a7       	lds	r27, 0x79
     9f2:	45 81       	ldd	r20, Z+5	; 0x05
     9f4:	4a a7       	lds	r20, 0x7a
     9f6:	50 91 42 38 	lds	r21, 0x3842
     9fa:	5d a3       	lds	r21, 0x5d
     9fc:	87 81       	ldd	r24, Z+7	; 0x07
     9fe:	8e a3       	lds	r24, 0x5e
     a00:	90 91 16 39 	lds	r25, 0x3916
     a04:	9b a7       	lds	r25, 0x7b
     a06:	a0 91 17 39 	lds	r26, 0x3917
     a0a:	ac a7       	lds	r26, 0x7c
     a0c:	e0 91 e1 3a 	lds	r30, 0x3AE1
     a10:	f0 91 e2 3a 	lds	r31, 0x3AE2
     a14:	f8 8b       	std	Y+16, r31	; 0x10
     a16:	ef 87       	std	Y+15, r30	; 0x0f
     a18:	40 91 e3 3a 	lds	r20, 0x3AE3
     a1c:	50 91 e4 3a 	lds	r21, 0x3AE4
     a20:	5a 83       	std	Y+2, r21	; 0x02
     a22:	49 83       	std	Y+1, r20	; 0x01
     a24:	80 91 e5 3a 	lds	r24, 0x3AE5
     a28:	90 91 e6 3a 	lds	r25, 0x3AE6
     a2c:	9e 83       	std	Y+6, r25	; 0x06
     a2e:	8d 83       	std	Y+5, r24	; 0x05
				}
}


//Function that cacomputes different permutations of the set of 4 tuples and determines the shortest 	
void permutation4()																
     a30:	8f a5       	lds	r24, 0x6f
     a32:	98 a9       	sts	0x48, r25
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	dc 01       	movw	r26, r24
     a3a:	a9 51       	subi	r26, 0x19	; 25
     a3c:	b5 4c       	sbci	r27, 0xC5	; 197
     a3e:	ba 8f       	std	Y+26, r27	; 0x1a
     a40:	a9 8f       	std	Y+25, r26	; 0x19
{
    min=100;
    for(i=0;i<4;i++)
     a42:	00 e0       	ldi	r16, 0x00	; 0
     a44:	10 e0       	ldi	r17, 0x00	; 0
				{
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];
     a46:	c9 01       	movw	r24, r18
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	82 0f       	add	r24, r18
     a4e:	93 1f       	adc	r25, r19
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	88 0f       	add	r24, r24
     a5a:	99 1f       	adc	r25, r25
     a5c:	fc 01       	movw	r30, r24
     a5e:	e2 1b       	sub	r30, r18
     a60:	f3 0b       	sbc	r31, r19
     a62:	fe a7       	lds	r31, 0x7e
     a64:	ed a7       	lds	r30, 0x7d
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
						{if(get(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     a66:	0f 2e       	mov	r0, r31
     a68:	f9 e0       	ldi	r31, 0x09	; 9
     a6a:	cf 2e       	mov	r12, r31
     a6c:	fa e3       	ldi	r31, 0x3A	; 58
     a6e:	df 2e       	mov	r13, r31
     a70:	f0 2d       	mov	r31, r0
     a72:	1e 8b       	std	Y+22, r17	; 0x16
     a74:	0d 8b       	std	Y+21, r16	; 0x15
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <permutation4+0x104>

//Function that cacomputes different permutations of the set of 4 tuples and determines the shortest 	
void permutation4()																
{
    min=100;
    for(i=0;i<4;i++)
     a78:	2f 89       	ldd	r18, Y+23	; 0x17
     a7a:	38 8d       	ldd	r19, Y+24	; 0x18
     a7c:	3e 8b       	std	Y+22, r19	; 0x16
     a7e:	2d 8b       	std	Y+21, r18	; 0x15
				{
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];
     a80:	8d 89       	ldd	r24, Y+21	; 0x15
     a82:	9e 89       	ldd	r25, Y+22	; 0x16
     a84:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     a88:	7c 01       	movw	r14, r24
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	86 5e       	subi	r24, 0xE6	; 230
     a90:	96 4c       	sbci	r25, 0xC6	; 198
     a92:	dc 01       	movw	r26, r24
     a94:	0d 90       	ld	r0, X+
     a96:	bc 91       	ld	r27, X
     a98:	a0 2d       	mov	r26, r0
     a9a:	b8 87       	std	Y+8, r27	; 0x08
     a9c:	af 83       	std	Y+7, r26	; 0x07
     a9e:	5d 01       	movw	r10, r26
     aa0:	08 94       	sec
     aa2:	a1 08       	sbc	r10, r1
     aa4:	b1 08       	sbc	r11, r1
     aa6:	8d a5       	lds	r24, 0x6d
     aa8:	9e a5       	lds	r25, 0x6e
     aaa:	8a 0d       	add	r24, r10
     aac:	9b 1d       	adc	r25, r11
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	8e 5d       	subi	r24, 0xDE	; 222
     ab4:	99 4f       	sbci	r25, 0xF9	; 249
     ab6:	fc 01       	movw	r30, r24
     ab8:	01 90       	ld	r0, Z+
     aba:	f0 81       	ld	r31, Z
     abc:	e0 2d       	mov	r30, r0
     abe:	fa 8b       	std	Y+18, r31	; 0x12
     ac0:	e9 8b       	std	Y+17, r30	; 0x11
     ac2:	2d 89       	ldd	r18, Y+21	; 0x15
     ac4:	3e 89       	ldd	r19, Y+22	; 0x16
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	38 8f       	std	Y+24, r19	; 0x18
     acc:	2f 8b       	std	Y+23, r18	; 0x17
     ace:	c9 01       	movw	r24, r18
     ad0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     ad4:	88 0f       	add	r24, r24
     ad6:	99 1f       	adc	r25, r25
     ad8:	86 5e       	subi	r24, 0xE6	; 230
     ada:	96 4c       	sbci	r25, 0xC6	; 198
     adc:	dc 01       	movw	r26, r24
     ade:	0d 90       	ld	r0, X+
     ae0:	bc 91       	ld	r27, X
     ae2:	a0 2d       	mov	r26, r0
     ae4:	ba 87       	std	Y+10, r27	; 0x0a
     ae6:	a9 87       	std	Y+9, r26	; 0x09
     ae8:	2d 01       	movw	r4, r26
     aea:	08 94       	sec
     aec:	41 08       	sbc	r4, r1
     aee:	51 08       	sbc	r5, r1
     af0:	c5 01       	movw	r24, r10
     af2:	88 0f       	add	r24, r24
     af4:	99 1f       	adc	r25, r25
     af6:	8a 0d       	add	r24, r10
     af8:	9b 1d       	adc	r25, r11
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	88 0f       	add	r24, r24
     b00:	99 1f       	adc	r25, r25
     b02:	88 0f       	add	r24, r24
     b04:	99 1f       	adc	r25, r25
     b06:	8a 19       	sub	r24, r10
     b08:	9b 09       	sbc	r25, r11
     b0a:	84 0d       	add	r24, r4
     b0c:	95 1d       	adc	r25, r5
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	8e 5d       	subi	r24, 0xDE	; 222
     b14:	99 4f       	sbci	r25, 0xF9	; 249
     b16:	fc 01       	movw	r30, r24
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	29 89       	ldd	r18, Y+17	; 0x11
     b1e:	3a 89       	ldd	r19, Y+18	; 0x12
     b20:	28 0f       	add	r18, r24
     b22:	39 1f       	adc	r19, r25
     b24:	3c 8f       	std	Y+28, r19	; 0x1c
     b26:	2b 8f       	std	Y+27, r18	; 0x1b
     b28:	8f 89       	ldd	r24, Y+23	; 0x17
     b2a:	98 8d       	ldd	r25, Y+24	; 0x18
     b2c:	01 96       	adiw	r24, 0x01	; 1
     b2e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	86 5e       	subi	r24, 0xE6	; 230
     b38:	96 4c       	sbci	r25, 0xC6	; 198
     b3a:	dc 01       	movw	r26, r24
     b3c:	0d 90       	ld	r0, X+
     b3e:	bc 91       	ld	r27, X
     b40:	a0 2d       	mov	r26, r0
     b42:	bc 87       	std	Y+12, r27	; 0x0c
     b44:	ab 87       	std	Y+11, r26	; 0x0b
     b46:	4d 01       	movw	r8, r26
     b48:	08 94       	sec
     b4a:	81 08       	sbc	r8, r1
     b4c:	91 08       	sbc	r9, r1
     b4e:	c2 01       	movw	r24, r4
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	84 0d       	add	r24, r4
     b56:	95 1d       	adc	r25, r5
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	88 0f       	add	r24, r24
     b5e:	99 1f       	adc	r25, r25
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	84 19       	sub	r24, r4
     b66:	95 09       	sbc	r25, r5
     b68:	88 0d       	add	r24, r8
     b6a:	99 1d       	adc	r25, r9
     b6c:	88 0f       	add	r24, r24
     b6e:	99 1f       	adc	r25, r25
     b70:	8e 5d       	subi	r24, 0xDE	; 222
     b72:	99 4f       	sbci	r25, 0xF9	; 249
     b74:	fc 01       	movw	r30, r24
     b76:	01 90       	ld	r0, Z+
     b78:	f0 81       	ld	r31, Z
     b7a:	e0 2d       	mov	r30, r0
     b7c:	fe 8f       	std	Y+30, r31	; 0x1e
     b7e:	ed 8f       	std	Y+29, r30	; 0x1d
     b80:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b82:	1c 8d       	ldd	r17, Y+28	; 0x1c
     b84:	0e 0f       	add	r16, r30
     b86:	1f 1f       	adc	r17, r31
     b88:	8d 89       	ldd	r24, Y+21	; 0x15
     b8a:	9e 89       	ldd	r25, Y+22	; 0x16
     b8c:	03 96       	adiw	r24, 0x03	; 3
     b8e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	86 5e       	subi	r24, 0xE6	; 230
     b98:	96 4c       	sbci	r25, 0xC6	; 198
     b9a:	dc 01       	movw	r26, r24
     b9c:	0d 90       	ld	r0, X+
     b9e:	bc 91       	ld	r27, X
     ba0:	a0 2d       	mov	r26, r0
     ba2:	be 87       	std	Y+14, r27	; 0x0e
     ba4:	ad 87       	std	Y+13, r26	; 0x0d
     ba6:	3d 01       	movw	r6, r26
     ba8:	08 94       	sec
     baa:	61 08       	sbc	r6, r1
     bac:	71 08       	sbc	r7, r1
     bae:	c4 01       	movw	r24, r8
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0d       	add	r24, r8
     bb6:	99 1d       	adc	r25, r9
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	88 0f       	add	r24, r24
     bc2:	99 1f       	adc	r25, r25
     bc4:	88 19       	sub	r24, r8
     bc6:	99 09       	sbc	r25, r9
     bc8:	86 0d       	add	r24, r6
     bca:	97 1d       	adc	r25, r7
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	8e 5d       	subi	r24, 0xDE	; 222
     bd2:	99 4f       	sbci	r25, 0xF9	; 249
     bd4:	fc 01       	movw	r30, r24
     bd6:	01 90       	ld	r0, Z+
     bd8:	f0 81       	ld	r31, Z
     bda:	e0 2d       	mov	r30, r0
     bdc:	fc 83       	std	Y+4, r31	; 0x04
     bde:	eb 83       	std	Y+3, r30	; 0x03
     be0:	cf 01       	movw	r24, r30
     be2:	80 0f       	add	r24, r16
     be4:	91 1f       	adc	r25, r17
				}
}


//Function that cacomputes different permutations of the set of 4 tuples and determines the shortest 	
void permutation4()																
     be6:	29 8d       	ldd	r18, Y+25	; 0x19
     be8:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bea:	3c 8b       	std	Y+20, r19	; 0x14
     bec:	2b 8b       	std	Y+19, r18	; 0x13
{
    min=100;
    for(i=0;i<4;i++)
				{
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];
     bee:	d9 01       	movw	r26, r18
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	9c 93       	st	X, r25
     bf4:	8e 93       	st	-X, r24

					if(weight[j]<min)
     bf6:	82 15       	cp	r24, r2
     bf8:	93 05       	cpc	r25, r3
     bfa:	0c f0       	brlt	.+2      	; 0xbfe <permutation4+0x282>
     bfc:	65 c0       	rjmp	.+202    	; 0xcc8 <permutation4+0x34c>
					{
						min = weight[j];
     bfe:	1c 01       	movw	r2, r24
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
						{if(get(i)==k)
     c00:	8d 89       	ldd	r24, Y+21	; 0x15
     c02:	9e 89       	ldd	r25, Y+22	; 0x16
     c04:	0e 94 79 02 	call	0x4f2	; 0x4f2 <get>
     c08:	8c 01       	movw	r16, r24
     c0a:	1e 8a       	std	Y+22, r1	; 0x16
     c0c:	1d 8a       	std	Y+21, r1	; 0x15
     c0e:	2d 89       	ldd	r18, Y+21	; 0x15
     c10:	3e 89       	ldd	r19, Y+22	; 0x16
     c12:	02 17       	cp	r16, r18
     c14:	13 07       	cpc	r17, r19
     c16:	e1 f5       	brne	.+120    	; 0xc90 <permutation4+0x314>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     c18:	c8 01       	movw	r24, r16
     c1a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	8c 0d       	add	r24, r12
     c24:	9d 1d       	adc	r25, r13
     c26:	dc 01       	movw	r26, r24
     c28:	0d 90       	ld	r0, X+
     c2a:	bc 91       	ld	r27, X
     c2c:	a0 2d       	mov	r26, r0
     c2e:	b8 8b       	std	Y+16, r27	; 0x10
     c30:	af 87       	std	Y+15, r26	; 0x0f
     c32:	8d 89       	ldd	r24, Y+21	; 0x15
     c34:	9e 89       	ldd	r25, Y+22	; 0x16
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     c3c:	88 0f       	add	r24, r24
     c3e:	99 1f       	adc	r25, r25
     c40:	8c 0d       	add	r24, r12
     c42:	9d 1d       	adc	r25, r13
     c44:	fc 01       	movw	r30, r24
     c46:	01 90       	ld	r0, Z+
     c48:	f0 81       	ld	r31, Z
     c4a:	e0 2d       	mov	r30, r0
     c4c:	fa 83       	std	Y+2, r31	; 0x02
     c4e:	e9 83       	std	Y+1, r30	; 0x01
     c50:	8d 89       	ldd	r24, Y+21	; 0x15
     c52:	9e 89       	ldd	r25, Y+22	; 0x16
     c54:	02 96       	adiw	r24, 0x02	; 2
     c56:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	8c 0d       	add	r24, r12
     c60:	9d 1d       	adc	r25, r13
     c62:	dc 01       	movw	r26, r24
     c64:	0d 90       	ld	r0, X+
     c66:	bc 91       	ld	r27, X
     c68:	a0 2d       	mov	r26, r0
     c6a:	be 83       	std	Y+6, r27	; 0x06
     c6c:	ad 83       	std	Y+5, r26	; 0x05
     c6e:	8d 89       	ldd	r24, Y+21	; 0x15
     c70:	9e 89       	ldd	r25, Y+22	; 0x16
     c72:	03 96       	adiw	r24, 0x03	; 3
     c74:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	8c 0d       	add	r24, r12
     c7e:	9d 1d       	adc	r25, r13
     c80:	fc 01       	movw	r30, r24
     c82:	80 81       	ld	r24, Z
     c84:	91 81       	ldd	r25, Z+1	; 0x01
     c86:	a7 ee       	ldi	r26, 0xE7	; 231
     c88:	ba e3       	ldi	r27, 0x3A	; 58
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	9c 93       	st	X, r25
     c8e:	8e 93       	st	-X, r24
     c90:	ed 89       	ldd	r30, Y+21	; 0x15
     c92:	fe 89       	ldd	r31, Y+22	; 0x16
     c94:	31 96       	adiw	r30, 0x01	; 1
     c96:	fe 8b       	std	Y+22, r31	; 0x16
     c98:	ed 8b       	std	Y+21, r30	; 0x15
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
     c9a:	e4 30       	cpi	r30, 0x04	; 4
     c9c:	f1 05       	cpc	r31, r1
     c9e:	09 f0       	breq	.+2      	; 0xca2 <permutation4+0x326>
     ca0:	b6 cf       	rjmp	.-148    	; 0xc0e <permutation4+0x292>
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
						path[3] = perm[get1(i+3)];
     ca2:	fd 85       	ldd	r31, Y+13	; 0x0d
     ca4:	fd a3       	lds	r31, 0x5d
     ca6:	2e 85       	ldd	r18, Y+14	; 0x0e
     ca8:	2e a3       	lds	r18, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
     caa:	3b 85       	ldd	r19, Y+11	; 0x0b
     cac:	39 a7       	lds	r19, 0x79
     cae:	4c 85       	ldd	r20, Y+12	; 0x0c
     cb0:	4a a7       	lds	r20, 0x7a

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
     cb2:	59 85       	ldd	r21, Y+9	; 0x09
     cb4:	5b a3       	lds	r21, 0x5b
     cb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     cb8:	8c a3       	lds	r24, 0x5c
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
     cba:	9f 81       	ldd	r25, Y+7	; 0x07
     cbc:	9f a3       	lds	r25, 0x5f
     cbe:	a8 85       	ldd	r26, Y+8	; 0x08
     cc0:	a8 a7       	lds	r26, 0x78
						path[1] = perm[get1(i+1)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+2)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
     cc2:	b4 e0       	ldi	r27, 0x04	; 4
     cc4:	bb a7       	lds	r27, 0x7b
     cc6:	1c a6       	lds	r17, 0xbc
					}
					
					j++;


					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1];
     cc8:	c5 01       	movw	r24, r10
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	8a 0d       	add	r24, r10
     cd0:	9b 1d       	adc	r25, r11
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	8a 19       	sub	r24, r10
     ce0:	9b 09       	sbc	r25, r11
     ce2:	88 0d       	add	r24, r8
     ce4:	99 1d       	adc	r25, r9
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	8e 5d       	subi	r24, 0xDE	; 222
     cec:	99 4f       	sbci	r25, 0xF9	; 249
     cee:	fc 01       	movw	r30, r24
     cf0:	80 81       	ld	r24, Z
     cf2:	91 81       	ldd	r25, Z+1	; 0x01
     cf4:	29 89       	ldd	r18, Y+17	; 0x11
     cf6:	3a 89       	ldd	r19, Y+18	; 0x12
     cf8:	28 0f       	add	r18, r24
     cfa:	39 1f       	adc	r19, r25
     cfc:	38 a3       	lds	r19, 0x58
     cfe:	2f 8f       	std	Y+31, r18	; 0x1f
     d00:	c3 01       	movw	r24, r6
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	86 0d       	add	r24, r6
     d08:	97 1d       	adc	r25, r7
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	86 19       	sub	r24, r6
     d18:	97 09       	sbc	r25, r7
     d1a:	84 0d       	add	r24, r4
     d1c:	95 1d       	adc	r25, r5
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	8e 5d       	subi	r24, 0xDE	; 222
     d24:	99 4f       	sbci	r25, 0xF9	; 249
     d26:	dc 01       	movw	r26, r24
     d28:	0d 90       	ld	r0, X+
     d2a:	bc 91       	ld	r27, X
     d2c:	a0 2d       	mov	r26, r0
     d2e:	ba a3       	lds	r27, 0x5a
     d30:	a9 a3       	lds	r26, 0x59
     d32:	8b 81       	ldd	r24, Y+3	; 0x03
     d34:	9c 81       	ldd	r25, Y+4	; 0x04
     d36:	82 0f       	add	r24, r18
     d38:	93 1f       	adc	r25, r19
     d3a:	8d 01       	movw	r16, r26
     d3c:	08 0f       	add	r16, r24
     d3e:	19 1f       	adc	r17, r25
     d40:	eb 89       	ldd	r30, Y+19	; 0x13
     d42:	fc 89       	ldd	r31, Y+20	; 0x14
     d44:	13 83       	std	Z+3, r17	; 0x03
     d46:	02 83       	std	Z+2, r16	; 0x02

					if(weight[j]<min)
     d48:	02 15       	cp	r16, r2
     d4a:	13 05       	cpc	r17, r3
     d4c:	0c f0       	brlt	.+2      	; 0xd50 <permutation4+0x3d4>
     d4e:	6b c0       	rjmp	.+214    	; 0xe26 <permutation4+0x4aa>
     d50:	1a aa       	sts	0x9a, r17
     d52:	19 aa       	sts	0x99, r17
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     d54:	17 01       	movw	r2, r14
     d56:	08 94       	sec
     d58:	21 1c       	adc	r2, r1
     d5a:	31 1c       	adc	r3, r1
     d5c:	97 01       	movw	r18, r14
     d5e:	2e 5f       	subi	r18, 0xFE	; 254
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	3c 83       	std	Y+4, r19	; 0x04
     d64:	2b 83       	std	Y+3, r18	; 0x03
     d66:	a7 01       	movw	r20, r14
     d68:	4d 5f       	subi	r20, 0xFD	; 253
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	5e 8b       	std	Y+22, r21	; 0x16
     d6e:	4d 8b       	std	Y+21, r20	; 0x15
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
     d70:	a9 a9       	sts	0x49, r26
     d72:	ba a9       	sts	0x4a, r27
     d74:	ea 16       	cp	r14, r26
     d76:	fb 06       	cpc	r15, r27
     d78:	c1 f5       	brne	.+112    	; 0xdea <permutation4+0x46e>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     d7a:	c7 01       	movw	r24, r14
     d7c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	8c 0d       	add	r24, r12
     d86:	9d 1d       	adc	r25, r13
     d88:	fc 01       	movw	r30, r24
     d8a:	01 90       	ld	r0, Z+
     d8c:	f0 81       	ld	r31, Z
     d8e:	e0 2d       	mov	r30, r0
     d90:	f8 8b       	std	Y+16, r31	; 0x10
     d92:	ef 87       	std	Y+15, r30	; 0x0f
     d94:	c1 01       	movw	r24, r2
     d96:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     d9a:	88 0f       	add	r24, r24
     d9c:	99 1f       	adc	r25, r25
     d9e:	8c 0d       	add	r24, r12
     da0:	9d 1d       	adc	r25, r13
     da2:	dc 01       	movw	r26, r24
     da4:	0d 90       	ld	r0, X+
     da6:	bc 91       	ld	r27, X
     da8:	a0 2d       	mov	r26, r0
     daa:	ba 83       	std	Y+2, r27	; 0x02
     dac:	a9 83       	std	Y+1, r26	; 0x01
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	8c 0d       	add	r24, r12
     dbc:	9d 1d       	adc	r25, r13
     dbe:	fc 01       	movw	r30, r24
     dc0:	01 90       	ld	r0, Z+
     dc2:	f0 81       	ld	r31, Z
     dc4:	e0 2d       	mov	r30, r0
     dc6:	fe 83       	std	Y+6, r31	; 0x06
     dc8:	ed 83       	std	Y+5, r30	; 0x05
     dca:	8d 89       	ldd	r24, Y+21	; 0x15
     dcc:	9e 89       	ldd	r25, Y+22	; 0x16
     dce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	8c 0d       	add	r24, r12
     dd8:	9d 1d       	adc	r25, r13
     dda:	dc 01       	movw	r26, r24
     ddc:	8d 91       	ld	r24, X+
     dde:	9c 91       	ld	r25, X
     de0:	11 97       	sbiw	r26, 0x01	; 1
     de2:	e7 ee       	ldi	r30, 0xE7	; 231
     de4:	fa e3       	ldi	r31, 0x3A	; 58
     de6:	91 83       	std	Z+1, r25	; 0x01
     de8:	80 83       	st	Z, r24
     dea:	29 a9       	sts	0x49, r18
     dec:	3a a9       	sts	0x4a, r19
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	3a ab       	sts	0x5a, r19
     df4:	29 ab       	sts	0x59, r18
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
     df6:	24 30       	cpi	r18, 0x04	; 4
     df8:	31 05       	cpc	r19, r1
     dfa:	09 f0       	breq	.+2      	; 0xdfe <permutation4+0x482>
     dfc:	b9 cf       	rjmp	.-142    	; 0xd70 <permutation4+0x3f4>
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
     dfe:	39 85       	ldd	r19, Y+9	; 0x09
     e00:	3d a3       	lds	r19, 0x5d
     e02:	4a 85       	ldd	r20, Y+10	; 0x0a
     e04:	4e a3       	lds	r20, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
     e06:	5d 85       	ldd	r21, Y+13	; 0x0d
     e08:	59 a7       	lds	r21, 0x79
     e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
     e0c:	8a a7       	lds	r24, 0x7a

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
     e0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     e10:	9b a3       	lds	r25, 0x5b
     e12:	ac 85       	ldd	r26, Y+12	; 0x0c
     e14:	ac a3       	lds	r26, 0x5c
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
     e16:	bf 81       	ldd	r27, Y+7	; 0x07
     e18:	bf a3       	lds	r27, 0x5f
     e1a:	e8 85       	ldd	r30, Y+8	; 0x08
     e1c:	e8 a7       	lds	r30, 0x78

					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
     e1e:	18 01       	movw	r2, r16
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];
						path[2] = perm[get1(i+3)];                                              //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
     e20:	f4 e0       	ldi	r31, 0x04	; 4
     e22:	fb a7       	lds	r31, 0x7b
     e24:	1c a6       	lds	r17, 0xbc
					
					j++;



					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1];
     e26:	c5 01       	movw	r24, r10
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	8a 0d       	add	r24, r10
     e2e:	9b 1d       	adc	r25, r11
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	8a 19       	sub	r24, r10
     e3e:	9b 09       	sbc	r25, r11
     e40:	86 0d       	add	r24, r6
     e42:	97 1d       	adc	r25, r7
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	8e 5d       	subi	r24, 0xDE	; 222
     e4a:	99 4f       	sbci	r25, 0xF9	; 249
     e4c:	dc 01       	movw	r26, r24
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	e9 89       	ldd	r30, Y+17	; 0x11
     e54:	fa 89       	ldd	r31, Y+18	; 0x12
     e56:	e8 0f       	add	r30, r24
     e58:	f9 1f       	adc	r31, r25
     e5a:	fa 8b       	std	Y+18, r31	; 0x12
     e5c:	e9 8b       	std	Y+17, r30	; 0x11
     e5e:	c3 01       	movw	r24, r6
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	86 0d       	add	r24, r6
     e66:	97 1d       	adc	r25, r7
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	86 19       	sub	r24, r6
     e76:	97 09       	sbc	r25, r7
     e78:	88 0d       	add	r24, r8
     e7a:	99 1d       	adc	r25, r9
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	8e 5d       	subi	r24, 0xDE	; 222
     e82:	99 4f       	sbci	r25, 0xF9	; 249
     e84:	dc 01       	movw	r26, r24
     e86:	0d 90       	ld	r0, X+
     e88:	bc 91       	ld	r27, X
     e8a:	a0 2d       	mov	r26, r0
     e8c:	bc 83       	std	Y+4, r27	; 0x04
     e8e:	ab 83       	std	Y+3, r26	; 0x03
     e90:	c4 01       	movw	r24, r8
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	88 0d       	add	r24, r8
     e98:	99 1d       	adc	r25, r9
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 19       	sub	r24, r8
     ea8:	99 09       	sbc	r25, r9
     eaa:	84 0d       	add	r24, r4
     eac:	95 1d       	adc	r25, r5
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	8e 5d       	subi	r24, 0xDE	; 222
     eb4:	99 4f       	sbci	r25, 0xF9	; 249
     eb6:	fc 01       	movw	r30, r24
     eb8:	01 90       	ld	r0, Z+
     eba:	f0 81       	ld	r31, Z
     ebc:	e0 2d       	mov	r30, r0
     ebe:	fe 8b       	std	Y+22, r31	; 0x16
     ec0:	ed 8b       	std	Y+21, r30	; 0x15
     ec2:	89 89       	ldd	r24, Y+17	; 0x11
     ec4:	9a 89       	ldd	r25, Y+18	; 0x12
     ec6:	8a 0f       	add	r24, r26
     ec8:	9b 1f       	adc	r25, r27
     eca:	8f 01       	movw	r16, r30
     ecc:	08 0f       	add	r16, r24
     ece:	19 1f       	adc	r17, r25
     ed0:	ab 89       	ldd	r26, Y+19	; 0x13
     ed2:	bc 89       	ldd	r27, Y+20	; 0x14
     ed4:	15 96       	adiw	r26, 0x05	; 5
     ed6:	1c 93       	st	X, r17
     ed8:	0e 93       	st	-X, r16
     eda:	14 97       	sbiw	r26, 0x04	; 4

					if(weight[j]<min)
     edc:	02 15       	cp	r16, r2
     ede:	13 05       	cpc	r17, r3
     ee0:	0c f0       	brlt	.+2      	; 0xee4 <permutation4+0x568>
     ee2:	6b c0       	rjmp	.+214    	; 0xfba <permutation4+0x63e>
     ee4:	1a aa       	sts	0x9a, r17
     ee6:	19 aa       	sts	0x99, r17
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     ee8:	57 01       	movw	r10, r14
     eea:	08 94       	sec
     eec:	a1 1c       	adc	r10, r1
     eee:	b1 1c       	adc	r11, r1
     ef0:	88 24       	eor	r8, r8
     ef2:	99 24       	eor	r9, r9
     ef4:	68 94       	set
     ef6:	81 f8       	bld	r8, 1
     ef8:	8e 0c       	add	r8, r14
     efa:	9f 1c       	adc	r9, r15
     efc:	0f 2e       	mov	r0, r31
     efe:	f3 e0       	ldi	r31, 0x03	; 3
     f00:	2f 2e       	mov	r2, r31
     f02:	33 24       	eor	r3, r3
     f04:	f0 2d       	mov	r31, r0
     f06:	2e 0c       	add	r2, r14
     f08:	3f 1c       	adc	r3, r15
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
     f0a:	29 a9       	sts	0x49, r18
     f0c:	3a a9       	sts	0x4a, r19
     f0e:	e2 16       	cp	r14, r18
     f10:	f3 06       	cpc	r15, r19
     f12:	b1 f5       	brne	.+108    	; 0xf80 <permutation4+0x604>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
     f14:	c7 01       	movw	r24, r14
     f16:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	8c 0d       	add	r24, r12
     f20:	9d 1d       	adc	r25, r13
     f22:	dc 01       	movw	r26, r24
     f24:	0d 90       	ld	r0, X+
     f26:	bc 91       	ld	r27, X
     f28:	a0 2d       	mov	r26, r0
     f2a:	b8 8b       	std	Y+16, r27	; 0x10
     f2c:	af 87       	std	Y+15, r26	; 0x0f
     f2e:	c5 01       	movw	r24, r10
     f30:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	8c 0d       	add	r24, r12
     f3a:	9d 1d       	adc	r25, r13
     f3c:	fc 01       	movw	r30, r24
     f3e:	01 90       	ld	r0, Z+
     f40:	f0 81       	ld	r31, Z
     f42:	e0 2d       	mov	r30, r0
     f44:	fa 83       	std	Y+2, r31	; 0x02
     f46:	e9 83       	std	Y+1, r30	; 0x01
     f48:	c4 01       	movw	r24, r8
     f4a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	8c 0d       	add	r24, r12
     f54:	9d 1d       	adc	r25, r13
     f56:	dc 01       	movw	r26, r24
     f58:	0d 90       	ld	r0, X+
     f5a:	bc 91       	ld	r27, X
     f5c:	a0 2d       	mov	r26, r0
     f5e:	be 83       	std	Y+6, r27	; 0x06
     f60:	ad 83       	std	Y+5, r26	; 0x05
     f62:	c1 01       	movw	r24, r2
     f64:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	8c 0d       	add	r24, r12
     f6e:	9d 1d       	adc	r25, r13
     f70:	fc 01       	movw	r30, r24
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	a7 ee       	ldi	r26, 0xE7	; 231
     f78:	ba e3       	ldi	r27, 0x3A	; 58
     f7a:	11 96       	adiw	r26, 0x01	; 1
     f7c:	9c 93       	st	X, r25
     f7e:	8e 93       	st	-X, r24
     f80:	e9 a9       	sts	0x49, r30
     f82:	fa a9       	sts	0x4a, r31
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	fa ab       	sts	0x5a, r31
     f88:	e9 ab       	sts	0x59, r30
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
     f8a:	e4 30       	cpi	r30, 0x04	; 4
     f8c:	f1 05       	cpc	r31, r1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <permutation4+0x616>
     f90:	bc cf       	rjmp	.-136    	; 0xf0a <permutation4+0x58e>
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
     f92:	f9 85       	ldd	r31, Y+9	; 0x09
     f94:	fd a3       	lds	r31, 0x5d
     f96:	2a 85       	ldd	r18, Y+10	; 0x0a
     f98:	2e a3       	lds	r18, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
     f9a:	3b 85       	ldd	r19, Y+11	; 0x0b
     f9c:	39 a7       	lds	r19, 0x79
     f9e:	4c 85       	ldd	r20, Y+12	; 0x0c
     fa0:	4a a7       	lds	r20, 0x7a

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
     fa2:	5d 85       	ldd	r21, Y+13	; 0x0d
     fa4:	5b a3       	lds	r21, 0x5b
     fa6:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa8:	8c a3       	lds	r24, 0x5c
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
     faa:	9f 81       	ldd	r25, Y+7	; 0x07
     fac:	9f a3       	lds	r25, 0x5f
     fae:	a8 85       	ldd	r26, Y+8	; 0x08
     fb0:	a8 a7       	lds	r26, 0x78

					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
     fb2:	18 01       	movw	r2, r16
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];
						path[2] = perm[get1(i+2)];                                               //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+1)];
						for(k=0;k<4;k++)
     fb4:	b4 e0       	ldi	r27, 0x04	; 4
     fb6:	bb a7       	lds	r27, 0x7b
     fb8:	1c a6       	lds	r17, 0xbc
					j++;




					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1];
     fba:	c2 01       	movw	r24, r4
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	84 0d       	add	r24, r4
     fc2:	95 1d       	adc	r25, r5
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	84 19       	sub	r24, r4
     fd2:	95 09       	sbc	r25, r5
     fd4:	86 0d       	add	r24, r6
     fd6:	97 1d       	adc	r25, r7
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	8e 5d       	subi	r24, 0xDE	; 222
     fde:	99 4f       	sbci	r25, 0xF9	; 249
     fe0:	fc 01       	movw	r30, r24
     fe2:	a0 80       	ld	r10, Z
     fe4:	b1 80       	ldd	r11, Z+1	; 0x01
     fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fea:	8a 0d       	add	r24, r10
     fec:	9b 1d       	adc	r25, r11
     fee:	0b 81       	ldd	r16, Y+3	; 0x03
     ff0:	1c 81       	ldd	r17, Y+4	; 0x04
     ff2:	08 0f       	add	r16, r24
     ff4:	19 1f       	adc	r17, r25
     ff6:	ab 89       	ldd	r26, Y+19	; 0x13
     ff8:	bc 89       	ldd	r27, Y+20	; 0x14
     ffa:	17 96       	adiw	r26, 0x07	; 7
     ffc:	1c 93       	st	X, r17
     ffe:	0e 93       	st	-X, r16
    1000:	16 97       	sbiw	r26, 0x06	; 6

					if(weight[j]<min)
    1002:	02 15       	cp	r16, r2
    1004:	13 05       	cpc	r17, r3
    1006:	0c f0       	brlt	.+2      	; 0x100a <permutation4+0x68e>
    1008:	6e c0       	rjmp	.+220    	; 0x10e6 <permutation4+0x76a>
    100a:	22 24       	eor	r2, r2
    100c:	33 24       	eor	r3, r3
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    100e:	47 01       	movw	r8, r14
    1010:	08 94       	sec
    1012:	81 1c       	adc	r8, r1
    1014:	91 1c       	adc	r9, r1
    1016:	66 24       	eor	r6, r6
    1018:	77 24       	eor	r7, r7
    101a:	68 94       	set
    101c:	61 f8       	bld	r6, 1
    101e:	6e 0c       	add	r6, r14
    1020:	7f 1c       	adc	r7, r15
    1022:	0f 2e       	mov	r0, r31
    1024:	f3 e0       	ldi	r31, 0x03	; 3
    1026:	4f 2e       	mov	r4, r31
    1028:	55 24       	eor	r5, r5
    102a:	f0 2d       	mov	r31, r0
    102c:	4e 0c       	add	r4, r14
    102e:	5f 1c       	adc	r5, r15
    1030:	3c 82       	std	Y+4, r3	; 0x04
    1032:	2b 82       	std	Y+3, r2	; 0x03
    1034:	2f 84       	ldd	r2, Y+15	; 0x0f
    1036:	38 88       	ldd	r3, Y+16	; 0x10
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
    1038:	eb 81       	ldd	r30, Y+3	; 0x03
    103a:	fc 81       	ldd	r31, Y+4	; 0x04
    103c:	ee 16       	cp	r14, r30
    103e:	ff 06       	cpc	r15, r31
    1040:	99 f5       	brne	.+102    	; 0x10a8 <permutation4+0x72c>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    1042:	c7 01       	movw	r24, r14
    1044:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	8c 0d       	add	r24, r12
    104e:	9d 1d       	adc	r25, r13
    1050:	dc 01       	movw	r26, r24
    1052:	2d 90       	ld	r2, X+
    1054:	3c 90       	ld	r3, X
    1056:	c4 01       	movw	r24, r8
    1058:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	8c 0d       	add	r24, r12
    1062:	9d 1d       	adc	r25, r13
    1064:	fc 01       	movw	r30, r24
    1066:	01 90       	ld	r0, Z+
    1068:	f0 81       	ld	r31, Z
    106a:	e0 2d       	mov	r30, r0
    106c:	fa 83       	std	Y+2, r31	; 0x02
    106e:	e9 83       	std	Y+1, r30	; 0x01
    1070:	c3 01       	movw	r24, r6
    1072:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	8c 0d       	add	r24, r12
    107c:	9d 1d       	adc	r25, r13
    107e:	dc 01       	movw	r26, r24
    1080:	0d 90       	ld	r0, X+
    1082:	bc 91       	ld	r27, X
    1084:	a0 2d       	mov	r26, r0
    1086:	be 83       	std	Y+6, r27	; 0x06
    1088:	ad 83       	std	Y+5, r26	; 0x05
    108a:	c2 01       	movw	r24, r4
    108c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	8c 0d       	add	r24, r12
    1096:	9d 1d       	adc	r25, r13
    1098:	fc 01       	movw	r30, r24
    109a:	80 81       	ld	r24, Z
    109c:	91 81       	ldd	r25, Z+1	; 0x01
    109e:	a7 ee       	ldi	r26, 0xE7	; 231
    10a0:	ba e3       	ldi	r27, 0x3A	; 58
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	9c 93       	st	X, r25
    10a6:	8e 93       	st	-X, r24
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	fc 83       	std	Y+4, r31	; 0x04
    10b0:	eb 83       	std	Y+3, r30	; 0x03
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
    10b2:	e4 30       	cpi	r30, 0x04	; 4
    10b4:	f1 05       	cpc	r31, r1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <permutation4+0x73e>
    10b8:	bf cf       	rjmp	.-130    	; 0x1038 <permutation4+0x6bc>
    10ba:	38 8a       	std	Y+16, r3	; 0x10
    10bc:	2f 86       	std	Y+15, r2	; 0x0f
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+2)];
    10be:	fb 85       	ldd	r31, Y+11	; 0x0b
    10c0:	fd a3       	lds	r31, 0x5d
    10c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c4:	2e a3       	lds	r18, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
    10c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    10c8:	39 a7       	lds	r19, 0x79
    10ca:	4e 85       	ldd	r20, Y+14	; 0x0e
    10cc:	4a a7       	lds	r20, 0x7a

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
    10ce:	59 85       	ldd	r21, Y+9	; 0x09
    10d0:	5b a3       	lds	r21, 0x5b
    10d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    10d4:	8c a3       	lds	r24, 0x5c
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
    10d6:	9f 81       	ldd	r25, Y+7	; 0x07
    10d8:	9f a3       	lds	r25, 0x5f
    10da:	a8 85       	ldd	r26, Y+8	; 0x08
    10dc:	a8 a7       	lds	r26, 0x78

					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+2)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
    10de:	18 01       	movw	r2, r16
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+1)];
						path[2] = perm[get1(i+3)];                                             //the path[] array is updated with different permutations of the input as the value of i varies
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
    10e0:	b4 e0       	ldi	r27, 0x04	; 4
    10e2:	bb a7       	lds	r27, 0x7b
    10e4:	1c a6       	lds	r17, 0xbc
					}
					
					j++;


                    weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1];
    10e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10e8:	98 a1       	lds	r25, 0x48
    10ea:	ed 89       	ldd	r30, Y+21	; 0x15
    10ec:	fe 89       	ldd	r31, Y+22	; 0x16
    10ee:	8e 0f       	add	r24, r30
    10f0:	9f 1f       	adc	r25, r31
    10f2:	85 01       	movw	r16, r10
    10f4:	08 0f       	add	r16, r24
    10f6:	19 1f       	adc	r17, r25
    10f8:	ab 89       	ldd	r26, Y+19	; 0x13
    10fa:	bc 89       	ldd	r27, Y+20	; 0x14
    10fc:	19 96       	adiw	r26, 0x09	; 9
    10fe:	1c 93       	st	X, r17
    1100:	0e 93       	st	-X, r16
    1102:	18 97       	sbiw	r26, 0x08	; 8
					if(weight[j]<min)
    1104:	02 15       	cp	r16, r2
    1106:	13 05       	cpc	r17, r3
    1108:	0c f0       	brlt	.+2      	; 0x110c <permutation4+0x790>
    110a:	6e c0       	rjmp	.+220    	; 0x11e8 <permutation4+0x86c>
    110c:	44 24       	eor	r4, r4
    110e:	55 24       	eor	r5, r5
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    1110:	57 01       	movw	r10, r14
    1112:	08 94       	sec
    1114:	a1 1c       	adc	r10, r1
    1116:	b1 1c       	adc	r11, r1
    1118:	88 24       	eor	r8, r8
    111a:	99 24       	eor	r9, r9
    111c:	68 94       	set
    111e:	81 f8       	bld	r8, 1
    1120:	8e 0c       	add	r8, r14
    1122:	9f 1c       	adc	r9, r15
    1124:	0f 2e       	mov	r0, r31
    1126:	f3 e0       	ldi	r31, 0x03	; 3
    1128:	6f 2e       	mov	r6, r31
    112a:	77 24       	eor	r7, r7
    112c:	f0 2d       	mov	r31, r0
    112e:	6e 0c       	add	r6, r14
    1130:	7f 1c       	adc	r7, r15
    1132:	2d 80       	ldd	r2, Y+5	; 0x05
    1134:	3e 80       	ldd	r3, Y+6	; 0x06
    1136:	5c 82       	std	Y+4, r5	; 0x04
    1138:	4b 82       	std	Y+3, r4	; 0x03
    113a:	4f 84       	ldd	r4, Y+15	; 0x0f
    113c:	58 88       	ldd	r5, Y+16	; 0x10
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
    113e:	eb 81       	ldd	r30, Y+3	; 0x03
    1140:	fc 81       	ldd	r31, Y+4	; 0x04
    1142:	ee 16       	cp	r14, r30
    1144:	ff 06       	cpc	r15, r31
    1146:	81 f5       	brne	.+96     	; 0x11a8 <permutation4+0x82c>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    1148:	c7 01       	movw	r24, r14
    114a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	8c 0d       	add	r24, r12
    1154:	9d 1d       	adc	r25, r13
    1156:	dc 01       	movw	r26, r24
    1158:	4d 90       	ld	r4, X+
    115a:	5c 90       	ld	r5, X
    115c:	c5 01       	movw	r24, r10
    115e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	8c 0d       	add	r24, r12
    1168:	9d 1d       	adc	r25, r13
    116a:	fc 01       	movw	r30, r24
    116c:	01 90       	ld	r0, Z+
    116e:	f0 81       	ld	r31, Z
    1170:	e0 2d       	mov	r30, r0
    1172:	fa 83       	std	Y+2, r31	; 0x02
    1174:	e9 83       	std	Y+1, r30	; 0x01
    1176:	c4 01       	movw	r24, r8
    1178:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	8c 0d       	add	r24, r12
    1182:	9d 1d       	adc	r25, r13
    1184:	dc 01       	movw	r26, r24
    1186:	2d 90       	ld	r2, X+
    1188:	3c 90       	ld	r3, X
    118a:	c3 01       	movw	r24, r6
    118c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	8c 0d       	add	r24, r12
    1196:	9d 1d       	adc	r25, r13
    1198:	fc 01       	movw	r30, r24
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	a7 ee       	ldi	r26, 0xE7	; 231
    11a0:	ba e3       	ldi	r27, 0x3A	; 58
    11a2:	11 96       	adiw	r26, 0x01	; 1
    11a4:	9c 93       	st	X, r25
    11a6:	8e 93       	st	-X, r24
    11a8:	eb 81       	ldd	r30, Y+3	; 0x03
    11aa:	fc 81       	ldd	r31, Y+4	; 0x04
    11ac:	31 96       	adiw	r30, 0x01	; 1
    11ae:	fc 83       	std	Y+4, r31	; 0x04
    11b0:	eb 83       	std	Y+3, r30	; 0x03
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
    11b2:	e4 30       	cpi	r30, 0x04	; 4
    11b4:	f1 05       	cpc	r31, r1
    11b6:	19 f6       	brne	.-122    	; 0x113e <permutation4+0x7c2>
    11b8:	3e 82       	std	Y+6, r3	; 0x06
    11ba:	2d 82       	std	Y+5, r2	; 0x05
    11bc:	58 8a       	std	Y+16, r5	; 0x10
    11be:	4f 86       	std	Y+15, r4	; 0x0f
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+3)];
    11c0:	fd 85       	ldd	r31, Y+13	; 0x0d
    11c2:	fd a3       	lds	r31, 0x5d
    11c4:	2e 85       	ldd	r18, Y+14	; 0x0e
    11c6:	2e a3       	lds	r18, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
    11c8:	39 85       	ldd	r19, Y+9	; 0x09
    11ca:	39 a7       	lds	r19, 0x79
    11cc:	4a 85       	ldd	r20, Y+10	; 0x0a
    11ce:	4a a7       	lds	r20, 0x7a
                    weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1];
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
    11d0:	5b 85       	ldd	r21, Y+11	; 0x0b
    11d2:	5b a3       	lds	r21, 0x5b
    11d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d6:	8c a3       	lds	r24, 0x5c

                    weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1];
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
    11d8:	9f 81       	ldd	r25, Y+7	; 0x07
    11da:	9f a3       	lds	r25, 0x5f
    11dc:	a8 85       	ldd	r26, Y+8	; 0x08
    11de:	a8 a7       	lds	r26, 0x78


                    weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+2)]-1] + C[perm[get1(i+2)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+3)]-1];
					if(weight[j]<min)
					{
						min = weight[j];
    11e0:	18 01       	movw	r2, r16
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+2)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+3)];
						for(k=0;k<4;k++)
    11e2:	b4 e0       	ldi	r27, 0x04	; 4
    11e4:	bb a7       	lds	r27, 0x7b
    11e6:	1c a6       	lds	r17, 0xbc
					
					j++;



					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1];
    11e8:	89 a1       	lds	r24, 0x49
    11ea:	9a a1       	lds	r25, 0x4a
    11ec:	e9 89       	ldd	r30, Y+17	; 0x11
    11ee:	fa 89       	ldd	r31, Y+18	; 0x12
    11f0:	8e 0f       	add	r24, r30
    11f2:	9f 1f       	adc	r25, r31
    11f4:	0d 8d       	ldd	r16, Y+29	; 0x1d
    11f6:	1e 8d       	ldd	r17, Y+30	; 0x1e
    11f8:	08 0f       	add	r16, r24
    11fa:	19 1f       	adc	r17, r25
    11fc:	ab 89       	ldd	r26, Y+19	; 0x13
    11fe:	bc 89       	ldd	r27, Y+20	; 0x14
    1200:	1b 96       	adiw	r26, 0x0b	; 11
    1202:	1c 93       	st	X, r17
    1204:	0e 93       	st	-X, r16
    1206:	1a 97       	sbiw	r26, 0x0a	; 10

					if(weight[j]<min)
    1208:	02 15       	cp	r16, r2
    120a:	13 05       	cpc	r17, r3
    120c:	0c f0       	brlt	.+2      	; 0x1210 <permutation4+0x894>
    120e:	6e c0       	rjmp	.+220    	; 0x12ec <permutation4+0x970>
    1210:	44 24       	eor	r4, r4
    1212:	55 24       	eor	r5, r5
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    1214:	57 01       	movw	r10, r14
    1216:	08 94       	sec
    1218:	a1 1c       	adc	r10, r1
    121a:	b1 1c       	adc	r11, r1
    121c:	88 24       	eor	r8, r8
    121e:	99 24       	eor	r9, r9
    1220:	68 94       	set
    1222:	81 f8       	bld	r8, 1
    1224:	8e 0c       	add	r8, r14
    1226:	9f 1c       	adc	r9, r15
    1228:	0f 2e       	mov	r0, r31
    122a:	f3 e0       	ldi	r31, 0x03	; 3
    122c:	6f 2e       	mov	r6, r31
    122e:	77 24       	eor	r7, r7
    1230:	f0 2d       	mov	r31, r0
    1232:	6e 0c       	add	r6, r14
    1234:	7f 1c       	adc	r7, r15
    1236:	2d 80       	ldd	r2, Y+5	; 0x05
    1238:	3e 80       	ldd	r3, Y+6	; 0x06
    123a:	5c 82       	std	Y+4, r5	; 0x04
    123c:	4b 82       	std	Y+3, r4	; 0x03
    123e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1240:	58 88       	ldd	r5, Y+16	; 0x10
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
						{if(get1(i)==k)
    1242:	eb 81       	ldd	r30, Y+3	; 0x03
    1244:	fc 81       	ldd	r31, Y+4	; 0x04
    1246:	ee 16       	cp	r14, r30
    1248:	ff 06       	cpc	r15, r31
    124a:	81 f5       	brne	.+96     	; 0x12ac <permutation4+0x930>
							{correct_order[0]=Input[get1(k)];correct_order[1]=Input[get1(k+1)];correct_order[2]=Input[get1(k+2)];correct_order[3]=Input[get1(k+3)];}}
    124c:	c7 01       	movw	r24, r14
    124e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	8c 0d       	add	r24, r12
    1258:	9d 1d       	adc	r25, r13
    125a:	dc 01       	movw	r26, r24
    125c:	4d 90       	ld	r4, X+
    125e:	5c 90       	ld	r5, X
    1260:	c5 01       	movw	r24, r10
    1262:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	8c 0d       	add	r24, r12
    126c:	9d 1d       	adc	r25, r13
    126e:	fc 01       	movw	r30, r24
    1270:	01 90       	ld	r0, Z+
    1272:	f0 81       	ld	r31, Z
    1274:	e0 2d       	mov	r30, r0
    1276:	fa 83       	std	Y+2, r31	; 0x02
    1278:	e9 83       	std	Y+1, r30	; 0x01
    127a:	c4 01       	movw	r24, r8
    127c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	8c 0d       	add	r24, r12
    1286:	9d 1d       	adc	r25, r13
    1288:	dc 01       	movw	r26, r24
    128a:	2d 90       	ld	r2, X+
    128c:	3c 90       	ld	r3, X
    128e:	c3 01       	movw	r24, r6
    1290:	0e 94 7e 02 	call	0x4fc	; 0x4fc <get1>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	8c 0d       	add	r24, r12
    129a:	9d 1d       	adc	r25, r13
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	91 81       	ldd	r25, Z+1	; 0x01
    12a2:	a7 ee       	ldi	r26, 0xE7	; 231
    12a4:	ba e3       	ldi	r27, 0x3A	; 58
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	9c 93       	st	X, r25
    12aa:	8e 93       	st	-X, r24
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04
    12b0:	31 96       	adiw	r30, 0x01	; 1
    12b2:	fc 83       	std	Y+4, r31	; 0x04
    12b4:	eb 83       	std	Y+3, r30	; 0x03
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
    12b6:	e4 30       	cpi	r30, 0x04	; 4
    12b8:	f1 05       	cpc	r31, r1
    12ba:	19 f6       	brne	.-122    	; 0x1242 <permutation4+0x8c6>
    12bc:	3e 82       	std	Y+6, r3	; 0x06
    12be:	2d 82       	std	Y+5, r2	; 0x05
    12c0:	58 8a       	std	Y+16, r5	; 0x10
    12c2:	4f 86       	std	Y+15, r4	; 0x0f
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+2)];
    12c4:	fb 85       	ldd	r31, Y+11	; 0x0b
    12c6:	fd a3       	lds	r31, 0x5d
    12c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ca:	2e a3       	lds	r18, 0x5e
					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
    12cc:	39 85       	ldd	r19, Y+9	; 0x09
    12ce:	39 a7       	lds	r19, 0x79
    12d0:	4a 85       	ldd	r20, Y+10	; 0x0a
    12d2:	4a a7       	lds	r20, 0x7a

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
    12d4:	5d 85       	ldd	r21, Y+13	; 0x0d
    12d6:	5b a3       	lds	r21, 0x5b
    12d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    12da:	8c a3       	lds	r24, 0x5c
					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
						path[0] = perm[get1(i)];
    12dc:	9f 81       	ldd	r25, Y+7	; 0x07
    12de:	9f a3       	lds	r25, 0x5f
    12e0:	a8 85       	ldd	r26, Y+8	; 0x08
    12e2:	a8 a7       	lds	r26, 0x78

					weight[j] = C[start-1][perm[get1(i)]-1] + C[perm[get1(i)]-1][perm[get1(i+3)]-1] + C[perm[get1(i+3)]-1][perm[get1(i+1)]-1] + C[perm[get1(i+1)]-1][perm[get1(i+2)]-1];

					if(weight[j]<min)
					{
						min = weight[j];
    12e4:	18 01       	movw	r2, r16
						path[0] = perm[get1(i)];
						path[1] = perm[get1(i+3)];                                           //the path[] array is updated with different permutations of the input as the value of i varies
						path[2] = perm[get1(i+1)];
						path[3] = perm[get1(i+2)];
						for(k=0;k<4;k++)
    12e6:	b4 e0       	ldi	r27, 0x04	; 4
    12e8:	bb a7       	lds	r27, 0x7b
    12ea:	1c a6       	lds	r17, 0xbc
    12ec:	e9 8d       	ldd	r30, Y+25	; 0x19
    12ee:	fa 8d       	ldd	r31, Y+26	; 0x1a
    12f0:	3c 96       	adiw	r30, 0x0c	; 12
    12f2:	fa 8f       	std	Y+26, r31	; 0x1a
    12f4:	e9 8f       	std	Y+25, r30	; 0x19

//Function that cacomputes different permutations of the set of 4 tuples and determines the shortest 	
void permutation4()																
{
    min=100;
    for(i=0;i<4;i++)
    12f6:	2f 89       	ldd	r18, Y+23	; 0x17
    12f8:	38 8d       	ldd	r19, Y+24	; 0x18
    12fa:	24 30       	cpi	r18, 0x04	; 4
    12fc:	31 05       	cpc	r19, r1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <permutation4+0x986>
    1300:	bb cb       	rjmp	.-2186   	; 0xa78 <permutation4+0xfc>
    1302:	8f a5       	lds	r24, 0x6f
    1304:	98 a9       	sts	0x48, r25
    1306:	48 96       	adiw	r24, 0x18	; 24
    1308:	90 93 2f 38 	sts	0x382F, r25
    130c:	80 93 2e 38 	sts	0x382E, r24
    1310:	30 92 27 38 	sts	0x3827, r3
    1314:	20 92 26 38 	sts	0x3826, r2
    1318:	ec e3       	ldi	r30, 0x3C	; 60
    131a:	f8 e3       	ldi	r31, 0x38	; 56
    131c:	3f a1       	lds	r19, 0x4f
    131e:	30 93 3c 38 	sts	0x383C, r19
    1322:	48 a5       	lds	r20, 0x68
    1324:	40 93 3d 38 	sts	0x383D, r20
    1328:	5b a1       	lds	r21, 0x4b
    132a:	50 93 3e 38 	sts	0x383E, r21
    132e:	8c a1       	lds	r24, 0x4c
    1330:	83 83       	std	Z+3, r24	; 0x03
    1332:	99 a5       	lds	r25, 0x69
    1334:	90 93 40 38 	sts	0x3840, r25
    1338:	aa a5       	lds	r26, 0x6a
    133a:	a5 83       	std	Z+5, r26	; 0x05
    133c:	bd a1       	lds	r27, 0x4d
    133e:	b0 93 42 38 	sts	0x3842, r27
    1342:	2e a1       	lds	r18, 0x4e
    1344:	27 83       	std	Z+7, r18	; 0x07
    1346:	3b a5       	lds	r19, 0x6b
    1348:	30 93 16 39 	sts	0x3916, r19
    134c:	4c a5       	lds	r20, 0x6c
    134e:	40 93 17 39 	sts	0x3917, r20
    1352:	8f 85       	ldd	r24, Y+15	; 0x0f
    1354:	98 89       	ldd	r25, Y+16	; 0x10
    1356:	90 93 e2 3a 	sts	0x3AE2, r25
    135a:	80 93 e1 3a 	sts	0x3AE1, r24
    135e:	a9 81       	ldd	r26, Y+1	; 0x01
    1360:	ba 81       	ldd	r27, Y+2	; 0x02
    1362:	b0 93 e4 3a 	sts	0x3AE4, r27
    1366:	a0 93 e3 3a 	sts	0x3AE3, r26
    136a:	ed 81       	ldd	r30, Y+5	; 0x05
    136c:	fe 81       	ldd	r31, Y+6	; 0x06
    136e:	f0 93 e6 3a 	sts	0x3AE6, r31
    1372:	e0 93 e5 3a 	sts	0x3AE5, r30
    1376:	84 e0       	ldi	r24, 0x04	; 4
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	90 93 f7 39 	sts	0x39F7, r25
    137e:	80 93 f6 39 	sts	0x39F6, r24
					}
					
					j++;

				}
}
    1382:	e2 96       	adiw	r28, 0x32	; 50
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	bf 90       	pop	r11
    13a0:	af 90       	pop	r10
    13a2:	9f 90       	pop	r9
    13a4:	8f 90       	pop	r8
    13a6:	7f 90       	pop	r7
    13a8:	6f 90       	pop	r6
    13aa:	5f 90       	pop	r5
    13ac:	4f 90       	pop	r4
    13ae:	3f 90       	pop	r3
    13b0:	2f 90       	pop	r2
    13b2:	08 95       	ret

000013b4 <shortest_path>:
	
//function that calculates the shortest path for the given input	
void shortest_path()
{
    13b4:	2f 92       	push	r2
    13b6:	3f 92       	push	r3
    13b8:	4f 92       	push	r4
    13ba:	5f 92       	push	r5
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	66 97       	sbiw	r28, 0x16	; 22
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
	for(f=0;f<2;f++)	//two loops for the first two tuples of three unit each
    13e8:	10 92 49 38 	sts	0x3849, r1
    13ec:	10 92 48 38 	sts	0x3848, r1
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
	Input[2] = 9;
	}
	else{
		start = path[2];
		Input[0] = 6;
		Input[1] = 8;
    13f4:	29 e0       	ldi	r18, 0x09	; 9
    13f6:	3a e3       	ldi	r19, 0x3A	; 58
    13f8:	2e 5f       	subi	r18, 0xFE	; 254
    13fa:	3f 4f       	sbci	r19, 0xFF	; 255
    13fc:	3a 8b       	std	Y+18, r19	; 0x12
    13fe:	29 8b       	std	Y+17, r18	; 0x11
	{
		for(b=0;b<3;b++)
		{
			for(c=0;c<3;c++)
			{
				if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0))		//if there is an element in the matrix A corresponding to given input
    1400:	0f 2e       	mov	r0, r31
    1402:	fa eb       	ldi	r31, 0xBA	; 186
    1404:	ef 2e       	mov	r14, r31
    1406:	f7 e3       	ldi	r31, 0x37	; 55
    1408:	ff 2e       	mov	r15, r31
    140a:	f0 2d       	mov	r31, r0
    140c:	0f 2e       	mov	r0, r31
    140e:	fb e0       	ldi	r31, 0x0B	; 11
    1410:	8f 2e       	mov	r8, r31
    1412:	fa e3       	ldi	r31, 0x3A	; 58
    1414:	9f 2e       	mov	r9, r31
    1416:	f0 2d       	mov	r31, r0
				{
					perm[0] = A[Input[0]-1][a];												
					perm[1] = A[Input[1]-1][b];
    1418:	22 24       	eor	r2, r2
    141a:	33 24       	eor	r3, r3
    141c:	68 94       	set
    141e:	21 f8       	bld	r2, 1
    1420:	6a e1       	ldi	r22, 0x1A	; 26
    1422:	79 e3       	ldi	r23, 0x39	; 57
    1424:	26 0e       	add	r2, r22
    1426:	37 1e       	adc	r3, r23
//function that calculates the shortest path for the given input	
void shortest_path()
{
	for(f=0;f<2;f++)	//two loops for the first two tuples of three unit each
	{
		if(f==0){
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	c1 f4       	brne	.+48     	; 0x145c <shortest_path+0xa8>
	start = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	90 93 14 3a 	sts	0x3A14, r25
    1434:	80 93 13 3a 	sts	0x3A13, r24
	Input[0] = 1;
    1438:	a9 e0       	ldi	r26, 0x09	; 9
    143a:	ba e3       	ldi	r27, 0x3A	; 58
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	9c 93       	st	X, r25
    1440:	8e 93       	st	-X, r24
	Input[1] = 18;
    1442:	82 e1       	ldi	r24, 0x12	; 18
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	e9 89       	ldd	r30, Y+17	; 0x11
    1448:	fa 89       	ldd	r31, Y+18	; 0x12
    144a:	91 83       	std	Z+1, r25	; 0x01
    144c:	80 83       	st	Z, r24
	Input[2] = 9;
    144e:	89 e0       	ldi	r24, 0x09	; 9
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	90 93 0e 3a 	sts	0x3A0E, r25
    1456:	80 93 0d 3a 	sts	0x3A0D, r24
    145a:	1a c0       	rjmp	.+52     	; 0x1490 <shortest_path+0xdc>
	}
	else{
		start = path[2];
    145c:	80 91 40 38 	lds	r24, 0x3840
    1460:	90 91 41 38 	lds	r25, 0x3841
    1464:	90 93 14 3a 	sts	0x3A14, r25
    1468:	80 93 13 3a 	sts	0x3A13, r24
		Input[0] = 6;
    146c:	86 e0       	ldi	r24, 0x06	; 6
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 e0       	ldi	r26, 0x09	; 9
    1472:	ba e3       	ldi	r27, 0x3A	; 58
    1474:	8d 93       	st	X+, r24
    1476:	9c 93       	st	X, r25
		Input[1] = 8;
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	e9 89       	ldd	r30, Y+17	; 0x11
    147e:	fa 89       	ldd	r31, Y+18	; 0x12
    1480:	91 83       	std	Z+1, r25	; 0x01
    1482:	80 83       	st	Z, r24
		Input[2] = 17;
    1484:	81 e1       	ldi	r24, 0x11	; 17
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	90 93 0e 3a 	sts	0x3A0E, r25
    148c:	80 93 0d 3a 	sts	0x3A0D, r24
	}
	for(a=0;a<3;a++)																		//loop to get the minimum weight and the correct order of units 
    1490:	10 92 12 3a 	sts	0x3A12, r1
    1494:	10 92 11 3a 	sts	0x3A11, r1
			{
				if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0))		//if there is an element in the matrix A corresponding to given input
				{
					perm[0] = A[Input[0]-1][a];												
					perm[1] = A[Input[1]-1][b];
					perm[2] = A[Input[2]-1][c];
    1498:	0a e1       	ldi	r16, 0x1A	; 26
    149a:	19 e3       	ldi	r17, 0x39	; 57
    149c:	0c 5f       	subi	r16, 0xFC	; 252
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
		Input[1] = 8;
		Input[2] = 17;
	}
	for(a=0;a<3;a++)																		//loop to get the minimum weight and the correct order of units 
	{
		for(b=0;b<3;b++)
    14a0:	10 92 45 38 	sts	0x3845, r1
    14a4:	10 92 44 38 	sts	0x3844, r1
		{
			for(c=0;c<3;c++)
    14a8:	10 92 f9 39 	sts	0x39F9, r1
    14ac:	10 92 f8 39 	sts	0x39F8, r1
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	50 e0       	ldi	r21, 0x00	; 0
			{
				if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0))		//if there is an element in the matrix A corresponding to given input
    14b4:	80 91 09 3a 	lds	r24, 0x3A09
    14b8:	90 91 0a 3a 	lds	r25, 0x3A0A
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	9c 01       	movw	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	20 91 11 3a 	lds	r18, 0x3A11
    14cc:	30 91 12 3a 	lds	r19, 0x3A12
    14d0:	82 0f       	add	r24, r18
    14d2:	93 1f       	adc	r25, r19
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	8e 0d       	add	r24, r14
    14da:	9f 1d       	adc	r25, r15
    14dc:	dc 01       	movw	r26, r24
    14de:	6d 91       	ld	r22, X+
    14e0:	7c 91       	ld	r23, X
    14e2:	11 97       	sbiw	r26, 0x01	; 1
    14e4:	61 15       	cp	r22, r1
    14e6:	71 05       	cpc	r23, r1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <shortest_path+0x138>
    14ea:	4f c0       	rjmp	.+158    	; 0x158a <shortest_path+0x1d6>
    14ec:	f4 01       	movw	r30, r8
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	fc 01       	movw	r30, r24
    14f4:	31 97       	sbiw	r30, 0x01	; 1
    14f6:	cf 01       	movw	r24, r30
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	8e 0f       	add	r24, r30
    14fe:	9f 1f       	adc	r25, r31
    1500:	20 91 44 38 	lds	r18, 0x3844
    1504:	30 91 45 38 	lds	r19, 0x3845
    1508:	82 0f       	add	r24, r18
    150a:	93 1f       	adc	r25, r19
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	8e 0d       	add	r24, r14
    1512:	9f 1d       	adc	r25, r15
    1514:	dc 01       	movw	r26, r24
    1516:	8d 91       	ld	r24, X+
    1518:	9c 91       	ld	r25, X
    151a:	11 97       	sbiw	r26, 0x01	; 1
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	a9 f1       	breq	.+106    	; 0x158a <shortest_path+0x1d6>
    1520:	80 91 0d 3a 	lds	r24, 0x3A0D
    1524:	90 91 0e 3a 	lds	r25, 0x3A0E
    1528:	01 97       	sbiw	r24, 0x01	; 1
    152a:	9c 01       	movw	r18, r24
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	82 0f       	add	r24, r18
    1532:	93 1f       	adc	r25, r19
    1534:	84 0f       	add	r24, r20
    1536:	95 1f       	adc	r25, r21
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	8e 0d       	add	r24, r14
    153e:	9f 1d       	adc	r25, r15
    1540:	dc 01       	movw	r26, r24
    1542:	4d 91       	ld	r20, X+
    1544:	5c 91       	ld	r21, X
    1546:	11 97       	sbiw	r26, 0x01	; 1
    1548:	41 15       	cp	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	f1 f0       	breq	.+60     	; 0x158a <shortest_path+0x1d6>
				{
					perm[0] = A[Input[0]-1][a];												
    154e:	aa e1       	ldi	r26, 0x1A	; 26
    1550:	b9 e3       	ldi	r27, 0x39	; 57
    1552:	6d 93       	st	X+, r22
    1554:	7c 93       	st	X, r23
					perm[1] = A[Input[1]-1][b];
    1556:	cf 01       	movw	r24, r30
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	8e 0f       	add	r24, r30
    155e:	9f 1f       	adc	r25, r31
    1560:	20 91 44 38 	lds	r18, 0x3844
    1564:	30 91 45 38 	lds	r19, 0x3845
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	8e 0d       	add	r24, r14
    1572:	9f 1d       	adc	r25, r15
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	d1 01       	movw	r26, r2
    157c:	8d 93       	st	X+, r24
    157e:	9c 93       	st	X, r25
					perm[2] = A[Input[2]-1][c];
    1580:	f8 01       	movw	r30, r16
    1582:	51 83       	std	Z+1, r21	; 0x01
    1584:	40 83       	st	Z, r20
	
					permutation3();															//we get optimized path nodes in path[] array for 3 unit tuple
    1586:	0e 94 83 02 	call	0x506	; 0x506 <permutation3>
	}
	for(a=0;a<3;a++)																		//loop to get the minimum weight and the correct order of units 
	{
		for(b=0;b<3;b++)
		{
			for(c=0;c<3;c++)
    158a:	80 91 f8 39 	lds	r24, 0x39F8
    158e:	90 91 f9 39 	lds	r25, 0x39F9
    1592:	ac 01       	movw	r20, r24
    1594:	4f 5f       	subi	r20, 0xFF	; 255
    1596:	5f 4f       	sbci	r21, 0xFF	; 255
    1598:	50 93 f9 39 	sts	0x39F9, r21
    159c:	40 93 f8 39 	sts	0x39F8, r20
    15a0:	43 30       	cpi	r20, 0x03	; 3
    15a2:	51 05       	cpc	r21, r1
    15a4:	0c f4       	brge	.+2      	; 0x15a8 <shortest_path+0x1f4>
    15a6:	86 cf       	rjmp	.-244    	; 0x14b4 <shortest_path+0x100>
		Input[1] = 8;
		Input[2] = 17;
	}
	for(a=0;a<3;a++)																		//loop to get the minimum weight and the correct order of units 
	{
		for(b=0;b<3;b++)
    15a8:	80 91 44 38 	lds	r24, 0x3844
    15ac:	90 91 45 38 	lds	r25, 0x3845
    15b0:	01 96       	adiw	r24, 0x01	; 1
    15b2:	90 93 45 38 	sts	0x3845, r25
    15b6:	80 93 44 38 	sts	0x3844, r24
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	91 05       	cpc	r25, r1
    15be:	0c f4       	brge	.+2      	; 0x15c2 <shortest_path+0x20e>
    15c0:	73 cf       	rjmp	.-282    	; 0x14a8 <shortest_path+0xf4>
		start = path[2];
		Input[0] = 6;
		Input[1] = 8;
		Input[2] = 17;
	}
	for(a=0;a<3;a++)																		//loop to get the minimum weight and the correct order of units 
    15c2:	80 91 11 3a 	lds	r24, 0x3A11
    15c6:	90 91 12 3a 	lds	r25, 0x3A12
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	90 93 12 3a 	sts	0x3A12, r25
    15d0:	80 93 11 3a 	sts	0x3A11, r24
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	0c f4       	brge	.+2      	; 0x15dc <shortest_path+0x228>
    15da:	62 cf       	rjmp	.-316    	; 0x14a0 <shortest_path+0xec>
		}
	}
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node 
				if(B[start-1][path[0]-1][c] == 0)
    15dc:	80 91 3c 38 	lds	r24, 0x383C
    15e0:	90 91 3d 38 	lds	r25, 0x383D
    15e4:	ac 01       	movw	r20, r24
    15e6:	41 50       	subi	r20, 0x01	; 1
    15e8:	50 40       	sbci	r21, 0x00	; 0
    15ea:	80 91 13 3a 	lds	r24, 0x3A13
    15ee:	90 91 14 3a 	lds	r25, 0x3A14
    15f2:	bc 01       	movw	r22, r24
    15f4:	61 50       	subi	r22, 0x01	; 1
    15f6:	70 40       	sbci	r23, 0x00	; 0
    15f8:	ca 01       	movw	r24, r20
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	84 0f       	add	r24, r20
    1600:	95 1f       	adc	r25, r21
    1602:	9c 01       	movw	r18, r24
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	22 0f       	add	r18, r18
    160e:	33 1f       	adc	r19, r19
    1610:	28 1b       	sub	r18, r24
    1612:	39 0b       	sbc	r19, r25
    1614:	42 0f       	add	r20, r18
    1616:	53 1f       	adc	r21, r19
    1618:	8a ef       	ldi	r24, 0xFA	; 250
    161a:	91 e0       	ldi	r25, 0x01	; 1
    161c:	68 9f       	mul	r22, r24
    161e:	90 01       	movw	r18, r0
    1620:	69 9f       	mul	r22, r25
    1622:	30 0d       	add	r19, r0
    1624:	78 9f       	mul	r23, r24
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	24 0f       	add	r18, r20
    162c:	35 1f       	adc	r19, r21
    162e:	f9 01       	movw	r30, r18
    1630:	ec 5b       	subi	r30, 0xBC	; 188
    1632:	f5 4f       	sbci	r31, 0xF5	; 245
    1634:	20 81       	ld	r18, Z
    1636:	31 81       	ldd	r19, Z+1	; 0x01
    1638:	21 15       	cp	r18, r1
    163a:	31 05       	cpc	r19, r1
    163c:	11 f0       	breq	.+4      	; 0x1642 <shortest_path+0x28e>
    163e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__stack+0x47d>
    1642:	16 c0       	rjmp	.+44     	; 0x1670 <shortest_path+0x2bc>
    1644:	8d 91       	ld	r24, X+
    1646:	9d 91       	ld	r25, X+
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	29 f4       	brne	.+10     	; 0x1656 <shortest_path+0x2a2>
    164c:	70 93 2d 38 	sts	0x382D, r23
    1650:	60 93 2c 38 	sts	0x382C, r22
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <shortest_path+0x2bc>
					break;
				total_path[count] = B[start-1][path[0]-1][c];
    1656:	81 93       	st	Z+, r24
    1658:	91 93       	st	Z+, r25
				count++;
    165a:	6f 5f       	subi	r22, 0xFF	; 255
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
				}
			}
		}
	}
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    165e:	2f 5f       	subi	r18, 0xFF	; 255
    1660:	3f 4f       	sbci	r19, 0xFF	; 255
    1662:	2b 30       	cpi	r18, 0x0B	; 11
    1664:	31 05       	cpc	r19, r1
    1666:	71 f7       	brne	.-36     	; 0x1644 <shortest_path+0x290>
    1668:	70 93 2d 38 	sts	0x382D, r23
    166c:	60 93 2c 38 	sts	0x382C, r22
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
			{																				//between the first and second correct node 
				if(B[path[0]-1][path[1]-1][c] == 0)
    1670:	80 91 3e 38 	lds	r24, 0x383E
    1674:	90 91 3f 38 	lds	r25, 0x383F
    1678:	ac 01       	movw	r20, r24
    167a:	41 50       	subi	r20, 0x01	; 1
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	80 91 3c 38 	lds	r24, 0x383C
    1682:	90 91 3d 38 	lds	r25, 0x383D
    1686:	bc 01       	movw	r22, r24
    1688:	61 50       	subi	r22, 0x01	; 1
    168a:	70 40       	sbci	r23, 0x00	; 0
    168c:	ca 01       	movw	r24, r20
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	84 0f       	add	r24, r20
    1694:	95 1f       	adc	r25, r21
    1696:	9c 01       	movw	r18, r24
    1698:	22 0f       	add	r18, r18
    169a:	33 1f       	adc	r19, r19
    169c:	22 0f       	add	r18, r18
    169e:	33 1f       	adc	r19, r19
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	28 1b       	sub	r18, r24
    16a6:	39 0b       	sbc	r19, r25
    16a8:	42 0f       	add	r20, r18
    16aa:	53 1f       	adc	r21, r19
    16ac:	8a ef       	ldi	r24, 0xFA	; 250
    16ae:	91 e0       	ldi	r25, 0x01	; 1
    16b0:	68 9f       	mul	r22, r24
    16b2:	90 01       	movw	r18, r0
    16b4:	69 9f       	mul	r22, r25
    16b6:	30 0d       	add	r19, r0
    16b8:	78 9f       	mul	r23, r24
    16ba:	30 0d       	add	r19, r0
    16bc:	11 24       	eor	r1, r1
    16be:	24 0f       	add	r18, r20
    16c0:	35 1f       	adc	r19, r21
    16c2:	f9 01       	movw	r30, r18
    16c4:	ec 5b       	subi	r30, 0xBC	; 188
    16c6:	f5 4f       	sbci	r31, 0xF5	; 245
    16c8:	20 81       	ld	r18, Z
    16ca:	31 81       	ldd	r19, Z+1	; 0x01
    16cc:	21 15       	cp	r18, r1
    16ce:	31 05       	cpc	r19, r1
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <shortest_path+0x320>
    16d2:	8a c7       	rjmp	.+3860   	; 0x25e8 <__stack+0x3e9>
    16d4:	16 c0       	rjmp	.+44     	; 0x1702 <shortest_path+0x34e>
    16d6:	8d 91       	ld	r24, X+
    16d8:	9d 91       	ld	r25, X+
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	29 f4       	brne	.+10     	; 0x16e8 <shortest_path+0x334>
    16de:	70 93 2d 38 	sts	0x382D, r23
    16e2:	60 93 2c 38 	sts	0x382C, r22
    16e6:	0d c0       	rjmp	.+26     	; 0x1702 <shortest_path+0x34e>
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
    16e8:	81 93       	st	Z+, r24
    16ea:	91 93       	st	Z+, r25
				count++;
    16ec:	6f 5f       	subi	r22, 0xFF	; 255
    16ee:	7f 4f       	sbci	r23, 0xFF	; 255
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    16f0:	2f 5f       	subi	r18, 0xFF	; 255
    16f2:	3f 4f       	sbci	r19, 0xFF	; 255
    16f4:	2b 30       	cpi	r18, 0x0B	; 11
    16f6:	31 05       	cpc	r19, r1
    16f8:	71 f7       	brne	.-36     	; 0x16d6 <shortest_path+0x322>
    16fa:	70 93 2d 38 	sts	0x382D, r23
    16fe:	60 93 2c 38 	sts	0x382C, r22
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    1702:	10 92 f9 39 	sts	0x39F9, r1
    1706:	10 92 f8 39 	sts	0x39F8, r1
			{																				//between the second and third correct node 
				if(B[path[1]-1][path[2]-1][c] == 0)
    170a:	80 91 40 38 	lds	r24, 0x3840
    170e:	90 91 41 38 	lds	r25, 0x3841
    1712:	ac 01       	movw	r20, r24
    1714:	41 50       	subi	r20, 0x01	; 1
    1716:	50 40       	sbci	r21, 0x00	; 0
    1718:	80 91 3e 38 	lds	r24, 0x383E
    171c:	90 91 3f 38 	lds	r25, 0x383F
    1720:	bc 01       	movw	r22, r24
    1722:	61 50       	subi	r22, 0x01	; 1
    1724:	70 40       	sbci	r23, 0x00	; 0
    1726:	ca 01       	movw	r24, r20
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	84 0f       	add	r24, r20
    172e:	95 1f       	adc	r25, r21
    1730:	9c 01       	movw	r18, r24
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	22 0f       	add	r18, r18
    173c:	33 1f       	adc	r19, r19
    173e:	28 1b       	sub	r18, r24
    1740:	39 0b       	sbc	r19, r25
    1742:	42 0f       	add	r20, r18
    1744:	53 1f       	adc	r21, r19
    1746:	8a ef       	ldi	r24, 0xFA	; 250
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	68 9f       	mul	r22, r24
    174c:	90 01       	movw	r18, r0
    174e:	69 9f       	mul	r22, r25
    1750:	30 0d       	add	r19, r0
    1752:	78 9f       	mul	r23, r24
    1754:	30 0d       	add	r19, r0
    1756:	11 24       	eor	r1, r1
    1758:	24 0f       	add	r18, r20
    175a:	35 1f       	adc	r19, r21
    175c:	f9 01       	movw	r30, r18
    175e:	ec 5b       	subi	r30, 0xBC	; 188
    1760:	f5 4f       	sbci	r31, 0xF5	; 245
    1762:	20 81       	ld	r18, Z
    1764:	31 81       	ldd	r19, Z+1	; 0x01
    1766:	21 15       	cp	r18, r1
    1768:	31 05       	cpc	r19, r1
    176a:	09 f0       	breq	.+2      	; 0x176e <shortest_path+0x3ba>
    176c:	ef c6       	rjmp	.+3550   	; 0x254c <__stack+0x34d>
    176e:	20 c0       	rjmp	.+64     	; 0x17b0 <shortest_path+0x3fc>
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    1770:	a9 01       	movw	r20, r18
			{																				//between the second and third correct node 
				if(B[path[1]-1][path[2]-1][c] == 0)
    1772:	81 91       	ld	r24, Z+
    1774:	91 91       	ld	r25, Z+
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	49 f4       	brne	.+18     	; 0x178c <shortest_path+0x3d8>
    177a:	30 93 f9 39 	sts	0x39F9, r19
    177e:	20 93 f8 39 	sts	0x39F8, r18
    1782:	70 93 2d 38 	sts	0x382D, r23
    1786:	60 93 2c 38 	sts	0x382C, r22
    178a:	12 c0       	rjmp	.+36     	; 0x17b0 <shortest_path+0x3fc>
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
    178c:	8d 93       	st	X+, r24
    178e:	9d 93       	st	X+, r25
				count++;
    1790:	6f 5f       	subi	r22, 0xFF	; 255
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    1794:	9a 01       	movw	r18, r20
    1796:	2f 5f       	subi	r18, 0xFF	; 255
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	2b 30       	cpi	r18, 0x0B	; 11
    179c:	31 05       	cpc	r19, r1
    179e:	41 f7       	brne	.-48     	; 0x1770 <shortest_path+0x3bc>
    17a0:	30 93 f9 39 	sts	0x39F9, r19
    17a4:	20 93 f8 39 	sts	0x39F8, r18
    17a8:	70 93 2d 38 	sts	0x382D, r23
    17ac:	60 93 2c 38 	sts	0x382C, r22
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}

	for(a=count1;a<count;a++)																//adds element to direction array from matrix D
    17b0:	40 90 2a 38 	lds	r4, 0x382A
    17b4:	50 90 2b 38 	lds	r5, 0x382B
    17b8:	5c 82       	std	Y+4, r5	; 0x04
    17ba:	4b 82       	std	Y+3, r4	; 0x03
    17bc:	60 90 2c 38 	lds	r6, 0x382C
    17c0:	70 90 2d 38 	lds	r7, 0x382D
    17c4:	78 86       	std	Y+8, r7	; 0x08
    17c6:	6f 82       	std	Y+7, r6	; 0x07
    17c8:	46 14       	cp	r4, r6
    17ca:	57 04       	cpc	r5, r7
    17cc:	0c f0       	brlt	.+2      	; 0x17d0 <shortest_path+0x41c>
    17ce:	50 c5       	rjmp	.+2720   	; 0x2270 <__stack+0x71>

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    17d0:	c2 01       	movw	r24, r4
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	9c 01       	movw	r18, r24
    17d8:	26 5b       	subi	r18, 0xB6	; 182
    17da:	37 4c       	sbci	r19, 0xC7	; 199
    17dc:	3a 83       	std	Y+2, r19	; 0x02
    17de:	29 83       	std	Y+1, r18	; 0x01
    17e0:	bc 01       	movw	r22, r24
    17e2:	62 5d       	subi	r22, 0xD2	; 210
    17e4:	76 4c       	sbci	r23, 0xC6	; 198
    17e6:	7e 87       	std	Y+14, r23	; 0x0e
    17e8:	6d 87       	std	Y+13, r22	; 0x0d
    17ea:	db 01       	movw	r26, r22
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}

	for(a=count1;a<count;a++)																//adds element to direction array from matrix D
    17ec:	a2 01       	movw	r20, r4
	{
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	72 e0       	ldi	r23, 0x02	; 2
    17f2:	63 01       	movw	r12, r6
    17f4:	f9 01       	movw	r30, r18
    17f6:	8d 01       	movw	r16, r26
    17f8:	81 91       	ld	r24, Z+
    17fa:	91 91       	ld	r25, Z+
    17fc:	4f 5f       	subi	r20, 0xFF	; 255
    17fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1800:	9c 01       	movw	r18, r24
    1802:	21 50       	subi	r18, 0x01	; 1
    1804:	30 40       	sbci	r19, 0x00	; 0
    1806:	c9 01       	movw	r24, r18
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	82 0f       	add	r24, r18
    180e:	93 1f       	adc	r25, r19
    1810:	88 0f       	add	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	88 0f       	add	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	82 1b       	sub	r24, r18
    181e:	93 0b       	sbc	r25, r19
    1820:	20 81       	ld	r18, Z
    1822:	31 81       	ldd	r19, Z+1	; 0x01
    1824:	82 0f       	add	r24, r18
    1826:	93 1f       	adc	r25, r19
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	86 0f       	add	r24, r22
    1830:	97 1f       	adc	r25, r23
    1832:	dc 01       	movw	r26, r24
    1834:	8d 91       	ld	r24, X+
    1836:	9c 91       	ld	r25, X
    1838:	d8 01       	movw	r26, r16
    183a:	8d 93       	st	X+, r24
    183c:	9d 93       	st	X+, r25
    183e:	8d 01       	movw	r16, r26
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}

	for(a=count1;a<count;a++)																//adds element to direction array from matrix D
    1840:	4c 15       	cp	r20, r12
    1842:	5d 05       	cpc	r21, r13
    1844:	cc f2       	brlt	.-78     	; 0x17f8 <shortest_path+0x444>
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;

	for(a=count1;a<count;a++)																//Loop for adding element to dir[] array
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	cc 24       	eor	r12, r12
    184c:	dd 24       	eor	r13, r13
					if(A[b][c]==total_path[a])
					{
						turn[i] = b+1;														
						if(i%2!=0)
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    184e:	eb 81       	ldd	r30, Y+3	; 0x03
    1850:	fc 81       	ldd	r31, Y+4	; 0x04
    1852:	31 97       	sbiw	r30, 0x01	; 1
    1854:	fc 87       	std	Y+12, r31	; 0x0c
    1856:	eb 87       	std	Y+11, r30	; 0x0b

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    1858:	cf 01       	movw	r24, r30
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	9c 01       	movw	r18, r24
    1860:	22 5d       	subi	r18, 0xD2	; 210
    1862:	36 4c       	sbci	r19, 0xC6	; 198
    1864:	4f 80       	ldd	r4, Y+7	; 0x07
    1866:	58 84       	ldd	r5, Y+8	; 0x08
    1868:	44 0c       	add	r4, r4
    186a:	55 1c       	adc	r5, r5
    186c:	58 8a       	std	Y+16, r5	; 0x10
    186e:	4f 86       	std	Y+15, r4	; 0x0f
    1870:	8e e2       	ldi	r24, 0x2E	; 46
    1872:	99 e3       	ldi	r25, 0x39	; 57
    1874:	02 97       	sbiw	r24, 0x02	; 2
    1876:	48 0e       	add	r4, r24
    1878:	59 1e       	adc	r5, r25
    187a:	5e 82       	std	Y+6, r5	; 0x06
    187c:	4d 82       	std	Y+5, r4	; 0x05
			direction[a] = direction[a-1];													//direction is set to previous value once it is found to be zero
			for(b=0;b<18;b++)
			{
				for(c=0;c<3;c++)
				{
					if(A[b][c]==total_path[a])
    187e:	b7 01       	movw	r22, r14
    1880:	6a 5f       	subi	r22, 0xFA	; 250
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	7a 87       	std	Y+10, r23	; 0x0a
    1886:	69 87       	std	Y+9, r22	; 0x09
					{
						turn[i] = b+1;														
    1888:	0f 2e       	mov	r0, r31
    188a:	f0 e2       	ldi	r31, 0x20	; 32
    188c:	af 2e       	mov	r10, r31
    188e:	f9 e3       	ldi	r31, 0x39	; 57
    1890:	bf 2e       	mov	r11, r31
    1892:	f0 2d       	mov	r31, r0
						if(i%2!=0)
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    1894:	3c 8a       	std	Y+20, r3	; 0x14
    1896:	2b 8a       	std	Y+19, r2	; 0x13
    1898:	19 01       	movw	r2, r18

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    189a:	21 01       	movw	r4, r2

	i=0;j=0;

	for(a=count1;a<count;a++)																//Loop for adding element to dir[] array
	{																						//Basic logic is to add element only when 
		if(direction[a]==0)																	//the direction value is zero
    189c:	d1 01       	movw	r26, r2
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	8d 91       	ld	r24, X+
    18a2:	9c 91       	ld	r25, X
    18a4:	13 97       	sbiw	r26, 0x03	; 3
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	09 f0       	breq	.+2      	; 0x18ac <shortest_path+0x4f8>
    18aa:	9b c0       	rjmp	.+310    	; 0x19e2 <shortest_path+0x62e>
		{																					
			direction[a] = direction[a-1];													//direction is set to previous value once it is found to be zero
    18ac:	8d 91       	ld	r24, X+
    18ae:	9c 91       	ld	r25, X
    18b0:	11 97       	sbiw	r26, 0x01	; 1
    18b2:	13 96       	adiw	r26, 0x03	; 3
    18b4:	9c 93       	st	X, r25
    18b6:	8e 93       	st	-X, r24
    18b8:	12 97       	sbiw	r26, 0x02	; 2
			for(b=0;b<18;b++)
			{
				for(c=0;c<3;c++)
				{
					if(A[b][c]==total_path[a])
    18ba:	e9 81       	ldd	r30, Y+1	; 0x01
    18bc:	fa 81       	ldd	r31, Y+2	; 0x02
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	29 85       	ldd	r18, Y+9	; 0x09
    18c4:	3a 85       	ldd	r19, Y+10	; 0x0a

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    18c6:	00 e0       	ldi	r16, 0x00	; 0
    18c8:	10 e0       	ldi	r17, 0x00	; 0
    18ca:	c8 01       	movw	r24, r16
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	80 0f       	add	r24, r16
    18d2:	91 1f       	adc	r25, r17
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	dc 01       	movw	r26, r24
    18da:	a6 54       	subi	r26, 0x46	; 70
    18dc:	b8 4c       	sbci	r27, 0xC8	; 200
    18de:	c8 01       	movw	r24, r16
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	9e 8b       	std	Y+22, r25	; 0x16
    18e4:	8d 8b       	std	Y+21, r24	; 0x15
			direction[a] = direction[a-1];													//direction is set to previous value once it is found to be zero
			for(b=0;b<18;b++)
			{
				for(c=0;c<3;c++)
				{
					if(A[b][c]==total_path[a])
    18e6:	8d 91       	ld	r24, X+
    18e8:	9d 91       	ld	r25, X+
    18ea:	86 17       	cp	r24, r22
    18ec:	97 07       	cpc	r25, r23
    18ee:	09 f0       	breq	.+2      	; 0x18f2 <shortest_path+0x53e>
    18f0:	6c c0       	rjmp	.+216    	; 0x19ca <shortest_path+0x616>
					{
						turn[i] = b+1;														
    18f2:	ca 01       	movw	r24, r20
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	8a 0d       	add	r24, r10
    18fa:	9b 1d       	adc	r25, r11
    18fc:	6d 88       	ldd	r6, Y+21	; 0x15
    18fe:	7e 88       	ldd	r7, Y+22	; 0x16
    1900:	fc 01       	movw	r30, r24
    1902:	71 82       	std	Z+1, r7	; 0x01
    1904:	60 82       	st	Z, r6
						if(i%2!=0)
    1906:	40 ff       	sbrs	r20, 0
    1908:	5e c0       	rjmp	.+188    	; 0x19c6 <shortest_path+0x612>
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    190a:	c6 01       	movw	r24, r12
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	8f 51       	subi	r24, 0x1F	; 31
    1912:	95 4c       	sbci	r25, 0xC5	; 197
    1914:	fc 01       	movw	r30, r24
    1916:	80 81       	ld	r24, Z
    1918:	91 81       	ldd	r25, Z+1	; 0x01
    191a:	86 15       	cp	r24, r6
    191c:	97 05       	cpc	r25, r7
    191e:	f1 f4       	brne	.+60     	; 0x195c <shortest_path+0x5a8>
    1920:	ca 01       	movw	r24, r20
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	8a 0d       	add	r24, r10
    192a:	9b 1d       	adc	r25, r11
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	91 81       	ldd	r25, Z+1	; 0x01
    1932:	86 15       	cp	r24, r6
    1934:	97 05       	cpc	r25, r7
    1936:	4c f4       	brge	.+18     	; 0x194a <shortest_path+0x596>
    1938:	f2 01       	movw	r30, r4
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	83 30       	cpi	r24, 0x03	; 3
    1940:	91 05       	cpc	r25, r1
    1942:	61 f5       	brne	.+88     	; 0x199c <shortest_path+0x5e8>
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	34 c0       	rjmp	.+104    	; 0x19b2 <shortest_path+0x5fe>
    194a:	f2 01       	movw	r30, r4
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	83 30       	cpi	r24, 0x03	; 3
    1952:	91 05       	cpc	r25, r1
    1954:	31 f5       	brne	.+76     	; 0x19a2 <shortest_path+0x5ee>
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	2b c0       	rjmp	.+86     	; 0x19b2 <shortest_path+0x5fe>
    195c:	ca 01       	movw	r24, r20
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	8a 0d       	add	r24, r10
    1966:	9b 1d       	adc	r25, r11
    1968:	fc 01       	movw	r30, r24
    196a:	80 81       	ld	r24, Z
    196c:	91 81       	ldd	r25, Z+1	; 0x01
    196e:	6d 88       	ldd	r6, Y+21	; 0x15
    1970:	7e 88       	ldd	r7, Y+22	; 0x16
    1972:	86 15       	cp	r24, r6
    1974:	97 05       	cpc	r25, r7
    1976:	4c f4       	brge	.+18     	; 0x198a <shortest_path+0x5d6>
    1978:	f2 01       	movw	r30, r4
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	83 30       	cpi	r24, 0x03	; 3
    1980:	91 05       	cpc	r25, r1
    1982:	91 f4       	brne	.+36     	; 0x19a8 <shortest_path+0x5f4>
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <shortest_path+0x5fe>
    198a:	f2 01       	movw	r30, r4
    198c:	80 81       	ld	r24, Z
    198e:	91 81       	ldd	r25, Z+1	; 0x01
    1990:	83 30       	cpi	r24, 0x03	; 3
    1992:	91 05       	cpc	r25, r1
    1994:	61 f4       	brne	.+24     	; 0x19ae <shortest_path+0x5fa>
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0b c0       	rjmp	.+22     	; 0x19b2 <shortest_path+0x5fe>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	08 c0       	rjmp	.+16     	; 0x19b2 <shortest_path+0x5fe>
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <shortest_path+0x5fe>
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <shortest_path+0x5fe>
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	f6 01       	movw	r30, r12
    19b4:	ee 0f       	add	r30, r30
    19b6:	ff 1f       	adc	r31, r31
    19b8:	ef 5f       	subi	r30, 0xFF	; 255
    19ba:	f5 4c       	sbci	r31, 0xC5	; 197
    19bc:	80 83       	st	Z, r24
    19be:	91 83       	std	Z+1, r25	; 0x01
							j++;
    19c0:	08 94       	sec
    19c2:	c1 1c       	adc	r12, r1
    19c4:	d1 1c       	adc	r13, r1
						}
						i++;
    19c6:	4f 5f       	subi	r20, 0xFF	; 255
    19c8:	5f 4f       	sbci	r21, 0xFF	; 255
		if(direction[a]==0)																	//the direction value is zero
		{																					
			direction[a] = direction[a-1];													//direction is set to previous value once it is found to be zero
			for(b=0;b<18;b++)
			{
				for(c=0;c<3;c++)
    19ca:	2a 17       	cp	r18, r26
    19cc:	3b 07       	cpc	r19, r27
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <shortest_path+0x61e>
    19d0:	8a cf       	rjmp	.-236    	; 0x18e6 <shortest_path+0x532>
    19d2:	0f 5f       	subi	r16, 0xFF	; 255
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	2a 5f       	subi	r18, 0xFA	; 250
    19d8:	3f 4f       	sbci	r19, 0xFF	; 255
	for(a=count1;a<count;a++)																//Loop for adding element to dir[] array
	{																						//Basic logic is to add element only when 
		if(direction[a]==0)																	//the direction value is zero
		{																					
			direction[a] = direction[a-1];													//direction is set to previous value once it is found to be zero
			for(b=0;b<18;b++)
    19da:	02 31       	cpi	r16, 0x12	; 18
    19dc:	11 05       	cpc	r17, r1
    19de:	09 f0       	breq	.+2      	; 0x19e2 <shortest_path+0x62e>
    19e0:	74 cf       	rjmp	.-280    	; 0x18ca <shortest_path+0x516>
    19e2:	44 24       	eor	r4, r4
    19e4:	55 24       	eor	r5, r5
    19e6:	68 94       	set
    19e8:	41 f8       	bld	r4, 1
    19ea:	24 0c       	add	r2, r4
    19ec:	35 1c       	adc	r3, r5
    19ee:	29 81       	ldd	r18, Y+1	; 0x01
    19f0:	3a 81       	ldd	r19, Y+2	; 0x02
    19f2:	2e 5f       	subi	r18, 0xFE	; 254
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	3a 83       	std	Y+2, r19	; 0x02
    19f8:	29 83       	std	Y+1, r18	; 0x01
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;

	for(a=count1;a<count;a++)																//Loop for adding element to dir[] array
    19fa:	6d 81       	ldd	r22, Y+5	; 0x05
    19fc:	7e 81       	ldd	r23, Y+6	; 0x06
    19fe:	26 16       	cp	r2, r22
    1a00:	37 06       	cpc	r3, r23
    1a02:	09 f0       	breq	.+2      	; 0x1a06 <shortest_path+0x652>
    1a04:	4a cf       	rjmp	.-364    	; 0x189a <shortest_path+0x4e6>
    1a06:	2b 88       	ldd	r2, Y+19	; 0x13
    1a08:	3c 88       	ldd	r3, Y+20	; 0x14

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    1a0a:	0b 81       	ldd	r16, Y+3	; 0x03
    1a0c:	1c 81       	ldd	r17, Y+4	; 0x04
    1a0e:	0f 5f       	subi	r16, 0xFF	; 255
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	50 93 f7 39 	sts	0x39F7, r21
    1a16:	40 93 f6 39 	sts	0x39F6, r20
    1a1a:	d0 92 2f 38 	sts	0x382F, r13
    1a1e:	c0 92 2e 38 	sts	0x382E, r12

		}
	}


	bot_rotate[0] = 1;																		//gives initial value to bot_rotate for first tuple using get_turn function
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	90 93 16 3a 	sts	0x3A16, r25
    1a2a:	80 93 15 3a 	sts	0x3A15, r24
	bot_rotate[count1] = get_turn(direction[count1-1],direction[count1]);					//gives initial value to bot_rotate for second tuple using get_turn function
    1a2e:	ee e2       	ldi	r30, 0x2E	; 46
    1a30:	f9 e3       	ldi	r31, 0x39	; 57
    1a32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	8e 0f       	add	r24, r30
    1a3c:	9f 1f       	adc	r25, r31
    1a3e:	cb 80       	ldd	r12, Y+3	; 0x03
    1a40:	dc 80       	ldd	r13, Y+4	; 0x04
    1a42:	cc 0c       	add	r12, r12
    1a44:	dd 1c       	adc	r13, r13
    1a46:	ec 0d       	add	r30, r12
    1a48:	fd 1d       	adc	r31, r13
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	dc 01       	movw	r26, r24
    1a50:	8d 91       	ld	r24, X+
    1a52:	9c 91       	ld	r25, X
    1a54:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    1a58:	f6 01       	movw	r30, r12
    1a5a:	eb 5e       	subi	r30, 0xEB	; 235
    1a5c:	f5 4c       	sbci	r31, 0xC5	; 197
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    1a62:	00 0f       	add	r16, r16
    1a64:	11 1f       	adc	r17, r17
    1a66:	0f 2e       	mov	r0, r31
    1a68:	f5 e1       	ldi	r31, 0x15	; 21
    1a6a:	af 2e       	mov	r10, r31
    1a6c:	fa e3       	ldi	r31, 0x3A	; 58
    1a6e:	bf 2e       	mov	r11, r31
    1a70:	f0 2d       	mov	r31, r0
    1a72:	a0 0e       	add	r10, r16
    1a74:	b1 1e       	adc	r11, r17
    1a76:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a78:	18 89       	ldd	r17, Y+16	; 0x10
    1a7a:	02 5d       	subi	r16, 0xD2	; 210
    1a7c:	16 4c       	sbci	r17, 0xC6	; 198
    1a7e:	68 01       	movw	r12, r16
    1a80:	85 01       	movw	r16, r10
    1a82:	ad 84       	ldd	r10, Y+13	; 0x0d
    1a84:	be 84       	ldd	r11, Y+14	; 0x0e

	bot_rotate[0] = 1;																		//gives initial value to bot_rotate for first tuple using get_turn function
	bot_rotate[count1] = get_turn(direction[count1-1],direction[count1]);					//gives initial value to bot_rotate for second tuple using get_turn function
	for(a=count1;a<count;a++)
	{
		bot_rotate[a+1] = get_turn(direction[a],direction[a+1]);							//gives value to bot_rotate array
    1a86:	f5 01       	movw	r30, r10
    1a88:	81 91       	ld	r24, Z+
    1a8a:	91 91       	ld	r25, Z+
    1a8c:	5f 01       	movw	r10, r30
    1a8e:	60 81       	ld	r22, Z
    1a90:	71 81       	ldd	r23, Z+1	; 0x01
    1a92:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    1a96:	d8 01       	movw	r26, r16
    1a98:	8d 93       	st	X+, r24
    1a9a:	9d 93       	st	X+, r25
    1a9c:	8d 01       	movw	r16, r26
	}


	bot_rotate[0] = 1;																		//gives initial value to bot_rotate for first tuple using get_turn function
	bot_rotate[count1] = get_turn(direction[count1-1],direction[count1]);					//gives initial value to bot_rotate for second tuple using get_turn function
	for(a=count1;a<count;a++)
    1a9e:	ac 14       	cp	r10, r12
    1aa0:	bd 04       	cpc	r11, r13
    1aa2:	89 f7       	brne	.-30     	; 0x1a86 <shortest_path+0x6d2>
	{
		bot_rotate[a+1] = get_turn(direction[a],direction[a+1]);							//gives value to bot_rotate array
	}
	count1 = count;																			//count1 is initialized with a non zero value at the end of first tuple
    1aa4:	4f 80       	ldd	r4, Y+7	; 0x07
    1aa6:	58 84       	ldd	r5, Y+8	; 0x08
    1aa8:	50 92 2b 38 	sts	0x382B, r5
    1aac:	40 92 2a 38 	sts	0x382A, r4
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
{
	for(f=0;f<2;f++)	//two loops for the first two tuples of three unit each
    1ab0:	80 91 48 38 	lds	r24, 0x3848
    1ab4:	90 91 49 38 	lds	r25, 0x3849
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	90 93 49 38 	sts	0x3849, r25
    1abe:	80 93 48 38 	sts	0x3848, r24
    1ac2:	82 30       	cpi	r24, 0x02	; 2
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	0c f4       	brge	.+2      	; 0x1aca <shortest_path+0x716>
    1ac8:	af cc       	rjmp	.-1698   	; 0x1428 <shortest_path+0x74>
		bot_rotate[a+1] = get_turn(direction[a],direction[a+1]);							//gives value to bot_rotate array
	}
	count1 = count;																			//count1 is initialized with a non zero value at the end of first tuple
}

	count2=count;																			//count2 is initialized with a non zero value at the end of second tuple
    1aca:	80 91 2c 38 	lds	r24, 0x382C
    1ace:	90 91 2d 38 	lds	r25, 0x382D
    1ad2:	90 93 29 38 	sts	0x3829, r25
    1ad6:	80 93 28 38 	sts	0x3828, r24
	start = path[2];																		//start is set to end node of second tuple
    1ada:	80 91 40 38 	lds	r24, 0x3840
    1ade:	90 91 41 38 	lds	r25, 0x3841
    1ae2:	90 93 14 3a 	sts	0x3A14, r25
    1ae6:	80 93 13 3a 	sts	0x3A13, r24
	Input[0] = 4;																			//input to the third tuple
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	90 93 0a 3a 	sts	0x3A0A, r25
    1af2:	80 93 09 3a 	sts	0x3A09, r24
	Input[1] = 13;
    1af6:	8d e0       	ldi	r24, 0x0D	; 13
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	90 93 0c 3a 	sts	0x3A0C, r25
    1afe:	80 93 0b 3a 	sts	0x3A0B, r24
	Input[2] = 3;
    1b02:	83 e0       	ldi	r24, 0x03	; 3
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	90 93 0e 3a 	sts	0x3A0E, r25
    1b0a:	80 93 0d 3a 	sts	0x3A0D, r24
	Input[3] = 7;
    1b0e:	87 e0       	ldi	r24, 0x07	; 7
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	90 93 10 3a 	sts	0x3A10, r25
    1b16:	80 93 0f 3a 	sts	0x3A0F, r24

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
    1b1a:	10 92 12 3a 	sts	0x3A12, r1
    1b1e:	10 92 11 3a 	sts	0x3A11, r1
	{
		for(c=0;c<3;c++)
		{
		    for(d=0;d<3;d++)
            {
                if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0)&&(A[Input[3]-1][d]!=0)) //if there is an element in the matrix A corresponding to given input
    1b22:	0f 2e       	mov	r0, r31
    1b24:	fa eb       	ldi	r31, 0xBA	; 186
    1b26:	6f 2e       	mov	r6, r31
    1b28:	f7 e3       	ldi	r31, 0x37	; 55
    1b2a:	7f 2e       	mov	r7, r31
    1b2c:	f0 2d       	mov	r31, r0
    1b2e:	0d e0       	ldi	r16, 0x0D	; 13
    1b30:	1a e3       	ldi	r17, 0x3A	; 58
                {
                    perm[0] = A[Input[0]-1][a];
    1b32:	0f 2e       	mov	r0, r31
    1b34:	fa e1       	ldi	r31, 0x1A	; 26
    1b36:	ef 2e       	mov	r14, r31
    1b38:	f9 e3       	ldi	r31, 0x39	; 57
    1b3a:	ff 2e       	mov	r15, r31
    1b3c:	f0 2d       	mov	r31, r0
                    perm[1] = A[Input[1]-1][b];
    1b3e:	aa 24       	eor	r10, r10
    1b40:	bb 24       	eor	r11, r11
    1b42:	68 94       	set
    1b44:	a1 f8       	bld	r10, 1
    1b46:	ae 0c       	add	r10, r14
    1b48:	bf 1c       	adc	r11, r15
                    perm[2] = A[Input[2]-1][c];
    1b4a:	88 24       	eor	r8, r8
    1b4c:	99 24       	eor	r9, r9
    1b4e:	68 94       	set
    1b50:	82 f8       	bld	r8, 2
    1b52:	8e 0c       	add	r8, r14
    1b54:	9f 1c       	adc	r9, r15
	Input[2] = 3;
	Input[3] = 7;

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
{
	for(b=0;b<3;b++)
    1b56:	10 92 45 38 	sts	0x3845, r1
    1b5a:	10 92 44 38 	sts	0x3844, r1
                if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0)&&(A[Input[3]-1][d]!=0)) //if there is an element in the matrix A corresponding to given input
                {
                    perm[0] = A[Input[0]-1][a];
                    perm[1] = A[Input[1]-1][b];
                    perm[2] = A[Input[2]-1][c];
                    perm[3] = A[Input[3]-1][d];
    1b5e:	0f 2e       	mov	r0, r31
    1b60:	f6 e0       	ldi	r31, 0x06	; 6
    1b62:	cf 2e       	mov	r12, r31
    1b64:	dd 24       	eor	r13, r13
    1b66:	f0 2d       	mov	r31, r0
    1b68:	ce 0c       	add	r12, r14
    1b6a:	df 1c       	adc	r13, r15

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
{
	for(b=0;b<3;b++)
	{
		for(c=0;c<3;c++)
    1b6c:	10 92 f9 39 	sts	0x39F9, r1
    1b70:	10 92 f8 39 	sts	0x39F8, r1
		{
		    for(d=0;d<3;d++)
    1b74:	10 92 00 3a 	sts	0x3A00, r1
    1b78:	10 92 ff 39 	sts	0x39FF, r1
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	50 e0       	ldi	r21, 0x00	; 0
            {
                if((A[Input[0]-1][a]!=0)&&(A[Input[1]-1][b]!=0)&&(A[Input[2]-1][c]!=0)&&(A[Input[3]-1][d]!=0)) //if there is an element in the matrix A corresponding to given input
    1b80:	80 91 09 3a 	lds	r24, 0x3A09
    1b84:	90 91 0a 3a 	lds	r25, 0x3A0A
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	9c 01       	movw	r18, r24
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	20 91 11 3a 	lds	r18, 0x3A11
    1b98:	30 91 12 3a 	lds	r19, 0x3A12
    1b9c:	82 0f       	add	r24, r18
    1b9e:	93 1f       	adc	r25, r19
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	86 0d       	add	r24, r6
    1ba6:	97 1d       	adc	r25, r7
    1ba8:	dc 01       	movw	r26, r24
    1baa:	6d 91       	ld	r22, X+
    1bac:	7c 91       	ld	r23, X
    1bae:	11 97       	sbiw	r26, 0x01	; 1
    1bb0:	61 15       	cp	r22, r1
    1bb2:	71 05       	cpc	r23, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <shortest_path+0x804>
    1bb6:	6e c0       	rjmp	.+220    	; 0x1c94 <shortest_path+0x8e0>
    1bb8:	80 91 0b 3a 	lds	r24, 0x3A0B
    1bbc:	90 91 0c 3a 	lds	r25, 0x3A0C
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	22 0f       	add	r18, r18
    1bc6:	33 1f       	adc	r19, r19
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	20 91 44 38 	lds	r18, 0x3844
    1bd0:	30 91 45 38 	lds	r19, 0x3845
    1bd4:	82 0f       	add	r24, r18
    1bd6:	93 1f       	adc	r25, r19
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	86 0d       	add	r24, r6
    1bde:	97 1d       	adc	r25, r7
    1be0:	dc 01       	movw	r26, r24
    1be2:	ed 91       	ld	r30, X+
    1be4:	fc 91       	ld	r31, X
    1be6:	11 97       	sbiw	r26, 0x01	; 1
    1be8:	30 97       	sbiw	r30, 0x00	; 0
    1bea:	09 f4       	brne	.+2      	; 0x1bee <shortest_path+0x83a>
    1bec:	53 c0       	rjmp	.+166    	; 0x1c94 <shortest_path+0x8e0>
    1bee:	d8 01       	movw	r26, r16
    1bf0:	8d 91       	ld	r24, X+
    1bf2:	9c 91       	ld	r25, X
    1bf4:	2c 01       	movw	r4, r24
    1bf6:	08 94       	sec
    1bf8:	41 08       	sbc	r4, r1
    1bfa:	51 08       	sbc	r5, r1
    1bfc:	c2 01       	movw	r24, r4
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	84 0d       	add	r24, r4
    1c04:	95 1d       	adc	r25, r5
    1c06:	20 91 f8 39 	lds	r18, 0x39F8
    1c0a:	30 91 f9 39 	lds	r19, 0x39F9
    1c0e:	82 0f       	add	r24, r18
    1c10:	93 1f       	adc	r25, r19
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	86 0d       	add	r24, r6
    1c18:	97 1d       	adc	r25, r7
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	8d 91       	ld	r24, X+
    1c1e:	9c 91       	ld	r25, X
    1c20:	11 97       	sbiw	r26, 0x01	; 1
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	b9 f1       	breq	.+110    	; 0x1c94 <shortest_path+0x8e0>
    1c26:	80 91 0f 3a 	lds	r24, 0x3A0F
    1c2a:	90 91 10 3a 	lds	r25, 0x3A10
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	9c 01       	movw	r18, r24
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	82 0f       	add	r24, r18
    1c38:	93 1f       	adc	r25, r19
    1c3a:	84 0f       	add	r24, r20
    1c3c:	95 1f       	adc	r25, r21
    1c3e:	88 0f       	add	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	86 0d       	add	r24, r6
    1c44:	97 1d       	adc	r25, r7
    1c46:	dc 01       	movw	r26, r24
    1c48:	4d 91       	ld	r20, X+
    1c4a:	5c 91       	ld	r21, X
    1c4c:	11 97       	sbiw	r26, 0x01	; 1
    1c4e:	41 15       	cp	r20, r1
    1c50:	51 05       	cpc	r21, r1
    1c52:	01 f1       	breq	.+64     	; 0x1c94 <shortest_path+0x8e0>
                {
                    perm[0] = A[Input[0]-1][a];
    1c54:	d7 01       	movw	r26, r14
    1c56:	6d 93       	st	X+, r22
    1c58:	7c 93       	st	X, r23
                    perm[1] = A[Input[1]-1][b];
    1c5a:	d5 01       	movw	r26, r10
    1c5c:	ed 93       	st	X+, r30
    1c5e:	fc 93       	st	X, r31
                    perm[2] = A[Input[2]-1][c];
    1c60:	c2 01       	movw	r24, r4
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	84 0d       	add	r24, r4
    1c68:	95 1d       	adc	r25, r5
    1c6a:	20 91 f8 39 	lds	r18, 0x39F8
    1c6e:	30 91 f9 39 	lds	r19, 0x39F9
    1c72:	82 0f       	add	r24, r18
    1c74:	93 1f       	adc	r25, r19
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	86 0d       	add	r24, r6
    1c7c:	97 1d       	adc	r25, r7
    1c7e:	fc 01       	movw	r30, r24
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
    1c84:	d4 01       	movw	r26, r8
    1c86:	8d 93       	st	X+, r24
    1c88:	9c 93       	st	X, r25
                    perm[3] = A[Input[3]-1][d];
    1c8a:	f6 01       	movw	r30, r12
    1c8c:	51 83       	std	Z+1, r21	; 0x01
    1c8e:	40 83       	st	Z, r20
					
                    permutation4();															//we get optimized path nodes in path[] array for four unit tuple
    1c90:	0e 94 be 04 	call	0x97c	; 0x97c <permutation4>
{
	for(b=0;b<3;b++)
	{
		for(c=0;c<3;c++)
		{
		    for(d=0;d<3;d++)
    1c94:	80 91 ff 39 	lds	r24, 0x39FF
    1c98:	90 91 00 3a 	lds	r25, 0x3A00
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca2:	50 93 00 3a 	sts	0x3A00, r21
    1ca6:	40 93 ff 39 	sts	0x39FF, r20
    1caa:	43 30       	cpi	r20, 0x03	; 3
    1cac:	51 05       	cpc	r21, r1
    1cae:	0c f4       	brge	.+2      	; 0x1cb2 <shortest_path+0x8fe>
    1cb0:	67 cf       	rjmp	.-306    	; 0x1b80 <shortest_path+0x7cc>

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
{
	for(b=0;b<3;b++)
	{
		for(c=0;c<3;c++)
    1cb2:	80 91 f8 39 	lds	r24, 0x39F8
    1cb6:	90 91 f9 39 	lds	r25, 0x39F9
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	90 93 f9 39 	sts	0x39F9, r25
    1cc0:	80 93 f8 39 	sts	0x39F8, r24
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	0c f4       	brge	.+2      	; 0x1ccc <shortest_path+0x918>
    1cca:	54 cf       	rjmp	.-344    	; 0x1b74 <shortest_path+0x7c0>
	Input[2] = 3;
	Input[3] = 7;

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
{
	for(b=0;b<3;b++)
    1ccc:	80 91 44 38 	lds	r24, 0x3844
    1cd0:	90 91 45 38 	lds	r25, 0x3845
    1cd4:	01 96       	adiw	r24, 0x01	; 1
    1cd6:	90 93 45 38 	sts	0x3845, r25
    1cda:	80 93 44 38 	sts	0x3844, r24
    1cde:	83 30       	cpi	r24, 0x03	; 3
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	0c f4       	brge	.+2      	; 0x1ce6 <shortest_path+0x932>
    1ce4:	43 cf       	rjmp	.-378    	; 0x1b6c <shortest_path+0x7b8>
	Input[0] = 4;																			//input to the third tuple
	Input[1] = 13;
	Input[2] = 3;
	Input[3] = 7;

for(a=0;a<3;a++)																			//loop to get the minimum weight and the correct order of units
    1ce6:	80 91 11 3a 	lds	r24, 0x3A11
    1cea:	90 91 12 3a 	lds	r25, 0x3A12
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	90 93 12 3a 	sts	0x3A12, r25
    1cf4:	80 93 11 3a 	sts	0x3A11, r24
    1cf8:	83 30       	cpi	r24, 0x03	; 3
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	0c f4       	brge	.+2      	; 0x1d00 <shortest_path+0x94c>
    1cfe:	2b cf       	rjmp	.-426    	; 0x1b56 <shortest_path+0x7a2>
}


			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node
				if(B[start-1][path[0]-1][c] == 0)
    1d00:	40 91 3c 38 	lds	r20, 0x383C
    1d04:	50 91 3d 38 	lds	r21, 0x383D
    1d08:	41 50       	subi	r20, 0x01	; 1
    1d0a:	50 40       	sbci	r21, 0x00	; 0
    1d0c:	60 91 13 3a 	lds	r22, 0x3A13
    1d10:	70 91 14 3a 	lds	r23, 0x3A14
    1d14:	61 50       	subi	r22, 0x01	; 1
    1d16:	70 40       	sbci	r23, 0x00	; 0
    1d18:	ca 01       	movw	r24, r20
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	84 0f       	add	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	9c 01       	movw	r18, r24
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	28 1b       	sub	r18, r24
    1d32:	39 0b       	sbc	r19, r25
    1d34:	42 0f       	add	r20, r18
    1d36:	53 1f       	adc	r21, r19
    1d38:	2a ef       	ldi	r18, 0xFA	; 250
    1d3a:	31 e0       	ldi	r19, 0x01	; 1
    1d3c:	62 9f       	mul	r22, r18
    1d3e:	c0 01       	movw	r24, r0
    1d40:	63 9f       	mul	r22, r19
    1d42:	90 0d       	add	r25, r0
    1d44:	72 9f       	mul	r23, r18
    1d46:	90 0d       	add	r25, r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	84 0f       	add	r24, r20
    1d4c:	95 1f       	adc	r25, r21
    1d4e:	fc 01       	movw	r30, r24
    1d50:	ec 5b       	subi	r30, 0xBC	; 188
    1d52:	f5 4f       	sbci	r31, 0xF5	; 245
    1d54:	80 81       	ld	r24, Z
    1d56:	91 81       	ldd	r25, Z+1	; 0x01
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <shortest_path+0x9aa>
    1d5c:	b0 c3       	rjmp	.+1888   	; 0x24be <__stack+0x2bf>
    1d5e:	16 c0       	rjmp	.+44     	; 0x1d8c <shortest_path+0x9d8>
    1d60:	8d 91       	ld	r24, X+
    1d62:	9d 91       	ld	r25, X+
    1d64:	00 97       	sbiw	r24, 0x00	; 0
    1d66:	29 f4       	brne	.+10     	; 0x1d72 <shortest_path+0x9be>
    1d68:	70 93 2d 38 	sts	0x382D, r23
    1d6c:	60 93 2c 38 	sts	0x382C, r22
    1d70:	0d c0       	rjmp	.+26     	; 0x1d8c <shortest_path+0x9d8>
					break;
				total_path[count] = B[start-1][path[0]-1][c];
    1d72:	81 93       	st	Z+, r24
    1d74:	91 93       	st	Z+, r25
				count++;
    1d76:	6f 5f       	subi	r22, 0xFF	; 255
    1d78:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}
}


			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1d7a:	2f 5f       	subi	r18, 0xFF	; 255
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	2b 30       	cpi	r18, 0x0B	; 11
    1d80:	31 05       	cpc	r19, r1
    1d82:	71 f7       	brne	.-36     	; 0x1d60 <shortest_path+0x9ac>
    1d84:	70 93 2d 38 	sts	0x382D, r23
    1d88:	60 93 2c 38 	sts	0x382C, r22
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the first and second correct node
				if(B[path[0]-1][path[1]-1][c] == 0)
    1d8c:	40 91 3e 38 	lds	r20, 0x383E
    1d90:	50 91 3f 38 	lds	r21, 0x383F
    1d94:	41 50       	subi	r20, 0x01	; 1
    1d96:	50 40       	sbci	r21, 0x00	; 0
    1d98:	60 91 3c 38 	lds	r22, 0x383C
    1d9c:	70 91 3d 38 	lds	r23, 0x383D
    1da0:	61 50       	subi	r22, 0x01	; 1
    1da2:	70 40       	sbci	r23, 0x00	; 0
    1da4:	ca 01       	movw	r24, r20
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	84 0f       	add	r24, r20
    1dac:	95 1f       	adc	r25, r21
    1dae:	9c 01       	movw	r18, r24
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	28 1b       	sub	r18, r24
    1dbe:	39 0b       	sbc	r19, r25
    1dc0:	42 0f       	add	r20, r18
    1dc2:	53 1f       	adc	r21, r19
    1dc4:	2a ef       	ldi	r18, 0xFA	; 250
    1dc6:	31 e0       	ldi	r19, 0x01	; 1
    1dc8:	62 9f       	mul	r22, r18
    1dca:	c0 01       	movw	r24, r0
    1dcc:	63 9f       	mul	r22, r19
    1dce:	90 0d       	add	r25, r0
    1dd0:	72 9f       	mul	r23, r18
    1dd2:	90 0d       	add	r25, r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	84 0f       	add	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	fc 01       	movw	r30, r24
    1ddc:	ec 5b       	subi	r30, 0xBC	; 188
    1dde:	f5 4f       	sbci	r31, 0xF5	; 245
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	09 f0       	breq	.+2      	; 0x1dea <shortest_path+0xa36>
    1de8:	23 c3       	rjmp	.+1606   	; 0x2430 <__stack+0x231>
    1dea:	16 c0       	rjmp	.+44     	; 0x1e18 <shortest_path+0xa64>
    1dec:	8d 91       	ld	r24, X+
    1dee:	9d 91       	ld	r25, X+
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	29 f4       	brne	.+10     	; 0x1dfe <shortest_path+0xa4a>
    1df4:	70 93 2d 38 	sts	0x382D, r23
    1df8:	60 93 2c 38 	sts	0x382C, r22
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <shortest_path+0xa64>
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
    1dfe:	81 93       	st	Z+, r24
    1e00:	91 93       	st	Z+, r25
				count++;
    1e02:	6f 5f       	subi	r22, 0xFF	; 255
    1e04:	7f 4f       	sbci	r23, 0xFF	; 255
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1e06:	2f 5f       	subi	r18, 0xFF	; 255
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
    1e0a:	2b 30       	cpi	r18, 0x0B	; 11
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	71 f7       	brne	.-36     	; 0x1dec <shortest_path+0xa38>
    1e10:	70 93 2d 38 	sts	0x382D, r23
    1e14:	60 93 2c 38 	sts	0x382C, r22
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the second and third correct node
				if(B[path[1]-1][path[2]-1][c] == 0)
    1e18:	40 91 40 38 	lds	r20, 0x3840
    1e1c:	50 91 41 38 	lds	r21, 0x3841
    1e20:	41 50       	subi	r20, 0x01	; 1
    1e22:	50 40       	sbci	r21, 0x00	; 0
    1e24:	60 91 3e 38 	lds	r22, 0x383E
    1e28:	70 91 3f 38 	lds	r23, 0x383F
    1e2c:	61 50       	subi	r22, 0x01	; 1
    1e2e:	70 40       	sbci	r23, 0x00	; 0
    1e30:	ca 01       	movw	r24, r20
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	84 0f       	add	r24, r20
    1e38:	95 1f       	adc	r25, r21
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	22 0f       	add	r18, r18
    1e3e:	33 1f       	adc	r19, r19
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	28 1b       	sub	r18, r24
    1e4a:	39 0b       	sbc	r19, r25
    1e4c:	42 0f       	add	r20, r18
    1e4e:	53 1f       	adc	r21, r19
    1e50:	2a ef       	ldi	r18, 0xFA	; 250
    1e52:	31 e0       	ldi	r19, 0x01	; 1
    1e54:	62 9f       	mul	r22, r18
    1e56:	c0 01       	movw	r24, r0
    1e58:	63 9f       	mul	r22, r19
    1e5a:	90 0d       	add	r25, r0
    1e5c:	72 9f       	mul	r23, r18
    1e5e:	90 0d       	add	r25, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	84 0f       	add	r24, r20
    1e64:	95 1f       	adc	r25, r21
    1e66:	fc 01       	movw	r30, r24
    1e68:	ec 5b       	subi	r30, 0xBC	; 188
    1e6a:	f5 4f       	sbci	r31, 0xF5	; 245
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <shortest_path+0xac2>
    1e74:	96 c2       	rjmp	.+1324   	; 0x23a2 <__stack+0x1a3>
    1e76:	16 c0       	rjmp	.+44     	; 0x1ea4 <shortest_path+0xaf0>
    1e78:	8d 91       	ld	r24, X+
    1e7a:	9d 91       	ld	r25, X+
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	29 f4       	brne	.+10     	; 0x1e8a <shortest_path+0xad6>
    1e80:	70 93 2d 38 	sts	0x382D, r23
    1e84:	60 93 2c 38 	sts	0x382C, r22
    1e88:	0d c0       	rjmp	.+26     	; 0x1ea4 <shortest_path+0xaf0>
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
    1e8a:	81 93       	st	Z+, r24
    1e8c:	91 93       	st	Z+, r25
				count++;
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	2b 30       	cpi	r18, 0x0B	; 11
    1e98:	31 05       	cpc	r19, r1
    1e9a:	71 f7       	brne	.-36     	; 0x1e78 <shortest_path+0xac4>
    1e9c:	70 93 2d 38 	sts	0x382D, r23
    1ea0:	60 93 2c 38 	sts	0x382C, r22
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1ea4:	10 92 f9 39 	sts	0x39F9, r1
    1ea8:	10 92 f8 39 	sts	0x39F8, r1
			{																				//between the third and fourth correct node
				if(B[path[2]-1][path[3]-1][c] == 0)
    1eac:	40 91 42 38 	lds	r20, 0x3842
    1eb0:	50 91 43 38 	lds	r21, 0x3843
    1eb4:	41 50       	subi	r20, 0x01	; 1
    1eb6:	50 40       	sbci	r21, 0x00	; 0
    1eb8:	60 91 40 38 	lds	r22, 0x3840
    1ebc:	70 91 41 38 	lds	r23, 0x3841
    1ec0:	61 50       	subi	r22, 0x01	; 1
    1ec2:	70 40       	sbci	r23, 0x00	; 0
    1ec4:	ca 01       	movw	r24, r20
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	84 0f       	add	r24, r20
    1ecc:	95 1f       	adc	r25, r21
    1ece:	9c 01       	movw	r18, r24
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	22 0f       	add	r18, r18
    1eda:	33 1f       	adc	r19, r19
    1edc:	28 1b       	sub	r18, r24
    1ede:	39 0b       	sbc	r19, r25
    1ee0:	42 0f       	add	r20, r18
    1ee2:	53 1f       	adc	r21, r19
    1ee4:	2a ef       	ldi	r18, 0xFA	; 250
    1ee6:	31 e0       	ldi	r19, 0x01	; 1
    1ee8:	62 9f       	mul	r22, r18
    1eea:	c0 01       	movw	r24, r0
    1eec:	63 9f       	mul	r22, r19
    1eee:	90 0d       	add	r25, r0
    1ef0:	72 9f       	mul	r23, r18
    1ef2:	90 0d       	add	r25, r0
    1ef4:	11 24       	eor	r1, r1
    1ef6:	84 0f       	add	r24, r20
    1ef8:	95 1f       	adc	r25, r21
    1efa:	fc 01       	movw	r30, r24
    1efc:	ec 5b       	subi	r30, 0xBC	; 188
    1efe:	f5 4f       	sbci	r31, 0xF5	; 245
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <shortest_path+0xb56>
    1f08:	03 c2       	rjmp	.+1030   	; 0x2310 <__stack+0x111>
    1f0a:	20 c0       	rjmp	.+64     	; 0x1f4c <shortest_path+0xb98>
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1f0c:	a9 01       	movw	r20, r18
			{																				//between the third and fourth correct node
				if(B[path[2]-1][path[3]-1][c] == 0)
    1f0e:	8d 91       	ld	r24, X+
    1f10:	9d 91       	ld	r25, X+
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	49 f4       	brne	.+18     	; 0x1f28 <shortest_path+0xb74>
    1f16:	30 93 f9 39 	sts	0x39F9, r19
    1f1a:	20 93 f8 39 	sts	0x39F8, r18
    1f1e:	70 93 2d 38 	sts	0x382D, r23
    1f22:	60 93 2c 38 	sts	0x382C, r22
    1f26:	12 c0       	rjmp	.+36     	; 0x1f4c <shortest_path+0xb98>
					break;
				total_path[count] = B[path[2]-1][path[3]-1][c];
    1f28:	81 93       	st	Z+, r24
    1f2a:	91 93       	st	Z+, r25
				count++;
    1f2c:	6f 5f       	subi	r22, 0xFF	; 255
    1f2e:	7f 4f       	sbci	r23, 0xFF	; 255
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    1f30:	9a 01       	movw	r18, r20
    1f32:	2f 5f       	subi	r18, 0xFF	; 255
    1f34:	3f 4f       	sbci	r19, 0xFF	; 255
    1f36:	2b 30       	cpi	r18, 0x0B	; 11
    1f38:	31 05       	cpc	r19, r1
    1f3a:	41 f7       	brne	.-48     	; 0x1f0c <shortest_path+0xb58>
    1f3c:	30 93 f9 39 	sts	0x39F9, r19
    1f40:	20 93 f8 39 	sts	0x39F8, r18
    1f44:	70 93 2d 38 	sts	0x382D, r23
    1f48:	60 93 2c 38 	sts	0x382C, r22
					break;
				total_path[count] = B[path[2]-1][path[3]-1][c];
				count++;
			}

	for(a=count2;a<count;a++)																//adds element to direction array from matrix D
    1f4c:	a0 90 28 38 	lds	r10, 0x3828
    1f50:	b0 90 29 38 	lds	r11, 0x3829
    1f54:	40 90 2c 38 	lds	r4, 0x382C
    1f58:	50 90 2d 38 	lds	r5, 0x382D
    1f5c:	5a 82       	std	Y+2, r5	; 0x02
    1f5e:	49 82       	std	Y+1, r4	; 0x01
    1f60:	a4 14       	cp	r10, r4
    1f62:	b5 04       	cpc	r11, r5
    1f64:	0c f0       	brlt	.+2      	; 0x1f68 <shortest_path+0xbb4>
    1f66:	ae c1       	rjmp	.+860    	; 0x22c4 <__stack+0xc5>

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    1f68:	c5 01       	movw	r24, r10
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	9c 01       	movw	r18, r24
    1f70:	26 5b       	subi	r18, 0xB6	; 182
    1f72:	37 4c       	sbci	r19, 0xC7	; 199
    1f74:	3c 83       	std	Y+4, r19	; 0x04
    1f76:	2b 83       	std	Y+3, r18	; 0x03
    1f78:	bc 01       	movw	r22, r24
    1f7a:	62 5d       	subi	r22, 0xD2	; 210
    1f7c:	76 4c       	sbci	r23, 0xC6	; 198
    1f7e:	7e 83       	std	Y+6, r23	; 0x06
    1f80:	6d 83       	std	Y+5, r22	; 0x05
    1f82:	db 01       	movw	r26, r22
					break;
				total_path[count] = B[path[2]-1][path[3]-1][c];
				count++;
			}

	for(a=count2;a<count;a++)																//adds element to direction array from matrix D
    1f84:	a5 01       	movw	r20, r10
	{
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	72 e0       	ldi	r23, 0x02	; 2
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	8d 01       	movw	r16, r26
    1f8e:	81 91       	ld	r24, Z+
    1f90:	91 91       	ld	r25, Z+
    1f92:	4f 5f       	subi	r20, 0xFF	; 255
    1f94:	5f 4f       	sbci	r21, 0xFF	; 255
    1f96:	9c 01       	movw	r18, r24
    1f98:	21 50       	subi	r18, 0x01	; 1
    1f9a:	30 40       	sbci	r19, 0x00	; 0
    1f9c:	c9 01       	movw	r24, r18
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	82 0f       	add	r24, r18
    1fa4:	93 1f       	adc	r25, r19
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	82 1b       	sub	r24, r18
    1fb4:	93 0b       	sbc	r25, r19
    1fb6:	20 81       	ld	r18, Z
    1fb8:	31 81       	ldd	r19, Z+1	; 0x01
    1fba:	82 0f       	add	r24, r18
    1fbc:	93 1f       	adc	r25, r19
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	86 0f       	add	r24, r22
    1fc6:	97 1f       	adc	r25, r23
    1fc8:	dc 01       	movw	r26, r24
    1fca:	8d 91       	ld	r24, X+
    1fcc:	9c 91       	ld	r25, X
    1fce:	d8 01       	movw	r26, r16
    1fd0:	8d 93       	st	X+, r24
    1fd2:	9d 93       	st	X+, r25
    1fd4:	8d 01       	movw	r16, r26
					break;
				total_path[count] = B[path[2]-1][path[3]-1][c];
				count++;
			}

	for(a=count2;a<count;a++)																//adds element to direction array from matrix D
    1fd6:	49 80       	ldd	r4, Y+1	; 0x01
    1fd8:	5a 80       	ldd	r5, Y+2	; 0x02
    1fda:	44 15       	cp	r20, r4
    1fdc:	55 05       	cpc	r21, r5
    1fde:	bc f2       	brlt	.-82     	; 0x1f8e <shortest_path+0xbda>
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;

	for(a=count2;a<count;a++)																//Loop for adding element to dir[] array
    1fe0:	20 91 44 38 	lds	r18, 0x3844
    1fe4:	30 91 45 38 	lds	r19, 0x3845
    1fe8:	60 91 f8 39 	lds	r22, 0x39F8
    1fec:	70 91 f9 39 	lds	r23, 0x39F9
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	00 e0       	ldi	r16, 0x00	; 0
    1ff6:	10 e0       	ldi	r17, 0x00	; 0
					if(A[b][c]==total_path[a])
					{
						turn[i] = b+1;
						if(i%2!=0)
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    1ff8:	c5 01       	movw	r24, r10
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	98 87       	std	Y+8, r25	; 0x08
    1ffe:	8f 83       	std	Y+7, r24	; 0x07

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	0f 2e       	mov	r0, r31
    2006:	fe e2       	ldi	r31, 0x2E	; 46
    2008:	8f 2e       	mov	r8, r31
    200a:	f9 e3       	ldi	r31, 0x39	; 57
    200c:	9f 2e       	mov	r9, r31
    200e:	f0 2d       	mov	r31, r0
    2010:	88 0e       	add	r8, r24
    2012:	99 1e       	adc	r9, r25
    2014:	44 0c       	add	r4, r4
    2016:	55 1c       	adc	r5, r5
    2018:	5a 86       	std	Y+10, r5	; 0x0a
    201a:	49 86       	std	Y+9, r4	; 0x09
    201c:	8e e2       	ldi	r24, 0x2E	; 46
    201e:	99 e3       	ldi	r25, 0x39	; 57
    2020:	02 97       	sbiw	r24, 0x02	; 2
    2022:	48 0e       	add	r4, r24
    2024:	59 1e       	adc	r5, r25
    2026:	5c 86       	std	Y+12, r5	; 0x0c
    2028:	4b 86       	std	Y+11, r4	; 0x0b
			{
				for(c=0;c<4;c++)
				{
					if(A[b][c]==total_path[a])
					{
						turn[i] = b+1;
    202a:	0f 2e       	mov	r0, r31
    202c:	f0 e2       	ldi	r31, 0x20	; 32
    202e:	cf 2e       	mov	r12, r31
    2030:	f9 e3       	ldi	r31, 0x39	; 57
    2032:	df 2e       	mov	r13, r31
    2034:	f0 2d       	mov	r31, r0
						if(i%2!=0)
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    2036:	0f 2e       	mov	r0, r31
    2038:	f1 e0       	ldi	r31, 0x01	; 1
    203a:	2f 2e       	mov	r2, r31
    203c:	fa e3       	ldi	r31, 0x3A	; 58
    203e:	3f 2e       	mov	r3, r31
    2040:	f0 2d       	mov	r31, r0
    2042:	35 01       	movw	r6, r10

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2044:	54 01       	movw	r10, r8

	i=0;j=0;

	for(a=count2;a<count;a++)																//Loop for adding element to dir[] array
	{																						//Logic is similar to the three unit tuple case 
		if(direction[a]==0)
    2046:	d4 01       	movw	r26, r8
    2048:	12 96       	adiw	r26, 0x02	; 2
    204a:	8d 91       	ld	r24, X+
    204c:	9c 91       	ld	r25, X
    204e:	13 97       	sbiw	r26, 0x03	; 3
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	09 f0       	breq	.+2      	; 0x2056 <shortest_path+0xca2>
    2054:	a0 c0       	rjmp	.+320    	; 0x2196 <shortest_path+0xde2>
		{
			direction[a] = direction[a-1];
    2056:	8d 91       	ld	r24, X+
    2058:	9c 91       	ld	r25, X
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	13 96       	adiw	r26, 0x03	; 3
    205e:	9c 93       	st	X, r25
    2060:	8e 93       	st	-X, r24
    2062:	12 97       	sbiw	r26, 0x02	; 2
			for(b=0;b<18;b++)
			{
				for(c=0;c<4;c++)
				{
					if(A[b][c]==total_path[a])
    2064:	eb 81       	ldd	r30, Y+3	; 0x03
    2066:	fc 81       	ldd	r31, Y+4	; 0x04
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	22 ec       	ldi	r18, 0xC2	; 194
    206e:	37 e3       	ldi	r19, 0x37	; 55

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2070:	ee 24       	eor	r14, r14
    2072:	ff 24       	eor	r15, r15
    2074:	c7 01       	movw	r24, r14
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	8e 0d       	add	r24, r14
    207c:	9f 1d       	adc	r25, r15
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	dc 01       	movw	r26, r24
    2084:	a6 54       	subi	r26, 0x46	; 70
    2086:	b8 4c       	sbci	r27, 0xC8	; 200
    2088:	c7 01       	movw	r24, r14
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	9e 87       	std	Y+14, r25	; 0x0e
    208e:	8d 87       	std	Y+13, r24	; 0x0d
			direction[a] = direction[a-1];
			for(b=0;b<18;b++)
			{
				for(c=0;c<4;c++)
				{
					if(A[b][c]==total_path[a])
    2090:	8d 91       	ld	r24, X+
    2092:	9d 91       	ld	r25, X+
    2094:	86 17       	cp	r24, r22
    2096:	97 07       	cpc	r25, r23
    2098:	09 f0       	breq	.+2      	; 0x209c <shortest_path+0xce8>
    209a:	6b c0       	rjmp	.+214    	; 0x2172 <shortest_path+0xdbe>
					{
						turn[i] = b+1;
    209c:	ca 01       	movw	r24, r20
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	8c 0d       	add	r24, r12
    20a4:	9d 1d       	adc	r25, r13
    20a6:	4d 84       	ldd	r4, Y+13	; 0x0d
    20a8:	5e 84       	ldd	r5, Y+14	; 0x0e
    20aa:	fc 01       	movw	r30, r24
    20ac:	51 82       	std	Z+1, r5	; 0x01
    20ae:	40 82       	st	Z, r4
						if(i%2!=0)
    20b0:	40 ff       	sbrs	r20, 0
    20b2:	5d c0       	rjmp	.+186    	; 0x216e <shortest_path+0xdba>
						{
							dir[j] = correct_order[j]==turn[i]?(turn[i]>turn[i-1]?(direction[a-1]==3?2:1):(direction[a-1]==3?1:2)):(turn[i]>turn[i-1]?(direction[a-1]==3?1:2):(direction[a-1]==3?2:1));
    20b4:	c8 01       	movw	r24, r16
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	8f 51       	subi	r24, 0x1F	; 31
    20bc:	95 4c       	sbci	r25, 0xC5	; 197
    20be:	fc 01       	movw	r30, r24
    20c0:	80 81       	ld	r24, Z
    20c2:	91 81       	ldd	r25, Z+1	; 0x01
    20c4:	84 15       	cp	r24, r4
    20c6:	95 05       	cpc	r25, r5
    20c8:	f1 f4       	brne	.+60     	; 0x2106 <shortest_path+0xd52>
    20ca:	ca 01       	movw	r24, r20
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	88 0f       	add	r24, r24
    20d0:	99 1f       	adc	r25, r25
    20d2:	8c 0d       	add	r24, r12
    20d4:	9d 1d       	adc	r25, r13
    20d6:	fc 01       	movw	r30, r24
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	84 15       	cp	r24, r4
    20de:	95 05       	cpc	r25, r5
    20e0:	4c f4       	brge	.+18     	; 0x20f4 <shortest_path+0xd40>
    20e2:	f5 01       	movw	r30, r10
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	83 30       	cpi	r24, 0x03	; 3
    20ea:	91 05       	cpc	r25, r1
    20ec:	61 f5       	brne	.+88     	; 0x2146 <shortest_path+0xd92>
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	34 c0       	rjmp	.+104    	; 0x215c <shortest_path+0xda8>
    20f4:	f5 01       	movw	r30, r10
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	91 05       	cpc	r25, r1
    20fe:	31 f5       	brne	.+76     	; 0x214c <shortest_path+0xd98>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	2b c0       	rjmp	.+86     	; 0x215c <shortest_path+0xda8>
    2106:	ca 01       	movw	r24, r20
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	8c 0d       	add	r24, r12
    2110:	9d 1d       	adc	r25, r13
    2112:	fc 01       	movw	r30, r24
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	4d 84       	ldd	r4, Y+13	; 0x0d
    211a:	5e 84       	ldd	r5, Y+14	; 0x0e
    211c:	84 15       	cp	r24, r4
    211e:	95 05       	cpc	r25, r5
    2120:	4c f4       	brge	.+18     	; 0x2134 <shortest_path+0xd80>
    2122:	f5 01       	movw	r30, r10
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	91 05       	cpc	r25, r1
    212c:	91 f4       	brne	.+36     	; 0x2152 <shortest_path+0xd9e>
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	14 c0       	rjmp	.+40     	; 0x215c <shortest_path+0xda8>
    2134:	f5 01       	movw	r30, r10
    2136:	80 81       	ld	r24, Z
    2138:	91 81       	ldd	r25, Z+1	; 0x01
    213a:	83 30       	cpi	r24, 0x03	; 3
    213c:	91 05       	cpc	r25, r1
    213e:	61 f4       	brne	.+24     	; 0x2158 <shortest_path+0xda4>
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0b c0       	rjmp	.+22     	; 0x215c <shortest_path+0xda8>
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	08 c0       	rjmp	.+16     	; 0x215c <shortest_path+0xda8>
    214c:	82 e0       	ldi	r24, 0x02	; 2
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	05 c0       	rjmp	.+10     	; 0x215c <shortest_path+0xda8>
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	02 c0       	rjmp	.+4      	; 0x215c <shortest_path+0xda8>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	f8 01       	movw	r30, r16
    215e:	ee 0f       	add	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	e2 0d       	add	r30, r2
    2164:	f3 1d       	adc	r31, r3
    2166:	80 83       	st	Z, r24
    2168:	91 83       	std	Z+1, r25	; 0x01
							j++;
    216a:	0f 5f       	subi	r16, 0xFF	; 255
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
						}
						i++;
    216e:	4f 5f       	subi	r20, 0xFF	; 255
    2170:	5f 4f       	sbci	r21, 0xFF	; 255
		if(direction[a]==0)
		{
			direction[a] = direction[a-1];
			for(b=0;b<18;b++)
			{
				for(c=0;c<4;c++)
    2172:	2a 17       	cp	r18, r26
    2174:	3b 07       	cpc	r19, r27
    2176:	09 f0       	breq	.+2      	; 0x217a <shortest_path+0xdc6>
    2178:	8b cf       	rjmp	.-234    	; 0x2090 <shortest_path+0xcdc>
    217a:	08 94       	sec
    217c:	e1 1c       	adc	r14, r1
    217e:	f1 1c       	adc	r15, r1
    2180:	2a 5f       	subi	r18, 0xFA	; 250
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
	for(a=count2;a<count;a++)																//Loop for adding element to dir[] array
	{																						//Logic is similar to the three unit tuple case 
		if(direction[a]==0)
		{
			direction[a] = direction[a-1];
			for(b=0;b<18;b++)
    2184:	f2 e1       	ldi	r31, 0x12	; 18
    2186:	ef 16       	cp	r14, r31
    2188:	f1 04       	cpc	r15, r1
    218a:	09 f0       	breq	.+2      	; 0x218e <shortest_path+0xdda>
    218c:	73 cf       	rjmp	.-282    	; 0x2074 <shortest_path+0xcc0>
			{
				for(c=0;c<4;c++)
    218e:	64 e0       	ldi	r22, 0x04	; 4
    2190:	70 e0       	ldi	r23, 0x00	; 0
	for(a=count2;a<count;a++)																//Loop for adding element to dir[] array
	{																						//Logic is similar to the three unit tuple case 
		if(direction[a]==0)
		{
			direction[a] = direction[a-1];
			for(b=0;b<18;b++)
    2192:	22 e1       	ldi	r18, 0x12	; 18
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	44 24       	eor	r4, r4
    2198:	55 24       	eor	r5, r5
    219a:	68 94       	set
    219c:	41 f8       	bld	r4, 1
    219e:	84 0c       	add	r8, r4
    21a0:	95 1c       	adc	r9, r5
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	8b 83       	std	Y+3, r24	; 0x03
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;

	for(a=count2;a<count;a++)																//Loop for adding element to dir[] array
    21ac:	ab 85       	ldd	r26, Y+11	; 0x0b
    21ae:	bc 85       	ldd	r27, Y+12	; 0x0c
    21b0:	8a 16       	cp	r8, r26
    21b2:	9b 06       	cpc	r9, r27
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <shortest_path+0xe04>
    21b6:	46 cf       	rjmp	.-372    	; 0x2044 <shortest_path+0xc90>

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    21b8:	73 01       	movw	r14, r6
    21ba:	08 94       	sec
    21bc:	e1 1c       	adc	r14, r1
    21be:	f1 1c       	adc	r15, r1
    21c0:	c3 01       	movw	r24, r6
    21c2:	80 95       	com	r24
    21c4:	90 95       	com	r25
    21c6:	e9 81       	ldd	r30, Y+1	; 0x01
    21c8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ca:	8e 0f       	add	r24, r30
    21cc:	9f 1f       	adc	r25, r31
    21ce:	67 01       	movw	r12, r14
    21d0:	c8 0e       	add	r12, r24
    21d2:	d9 1e       	adc	r13, r25
    21d4:	20 93 44 38 	sts	0x3844, r18
    21d8:	30 93 45 38 	sts	0x3845, r19
    21dc:	60 93 f8 39 	sts	0x39F8, r22
    21e0:	70 93 f9 39 	sts	0x39F9, r23
    21e4:	50 93 f7 39 	sts	0x39F7, r21
    21e8:	40 93 f6 39 	sts	0x39F6, r20
    21ec:	10 93 2f 38 	sts	0x382F, r17
    21f0:	00 93 2e 38 	sts	0x382E, r16
			}

		}
	}

	bot_rotate[count2] = get_turn(direction[count2-1],direction[count2]);						//gives initial value to bot_rotate for third tuple using get_turn function
    21f4:	ee e2       	ldi	r30, 0x2E	; 46
    21f6:	f9 e3       	ldi	r31, 0x39	; 57
    21f8:	8f 81       	ldd	r24, Y+7	; 0x07
    21fa:	98 85       	ldd	r25, Y+8	; 0x08
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	8e 0f       	add	r24, r30
    2202:	9f 1f       	adc	r25, r31
    2204:	83 01       	movw	r16, r6
    2206:	00 0f       	add	r16, r16
    2208:	11 1f       	adc	r17, r17
    220a:	e0 0f       	add	r30, r16
    220c:	f1 1f       	adc	r31, r17
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	dc 01       	movw	r26, r24
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    221c:	f8 01       	movw	r30, r16
    221e:	eb 5e       	subi	r30, 0xEB	; 235
    2220:	f5 4c       	sbci	r31, 0xC5	; 197
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2226:	c7 01       	movw	r24, r14
    2228:	88 0f       	add	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	0f 2e       	mov	r0, r31
    222e:	f5 e1       	ldi	r31, 0x15	; 21
    2230:	af 2e       	mov	r10, r31
    2232:	fa e3       	ldi	r31, 0x3A	; 58
    2234:	bf 2e       	mov	r11, r31
    2236:	f0 2d       	mov	r31, r0
    2238:	a8 0e       	add	r10, r24
    223a:	b9 1e       	adc	r11, r25
    223c:	09 85       	ldd	r16, Y+9	; 0x09
    223e:	1a 85       	ldd	r17, Y+10	; 0x0a
    2240:	02 5d       	subi	r16, 0xD2	; 210
    2242:	16 4c       	sbci	r17, 0xC6	; 198
    2244:	ed 80       	ldd	r14, Y+5	; 0x05
    2246:	fe 80       	ldd	r15, Y+6	; 0x06
	}

	bot_rotate[count2] = get_turn(direction[count2-1],direction[count2]);						//gives initial value to bot_rotate for third tuple using get_turn function
	for(a=count2;a<count;a++)
	{
		bot_rotate[a+1] = get_turn(direction[a],direction[a+1]);								//gives value to bot_rotate array
    2248:	f7 01       	movw	r30, r14
    224a:	81 91       	ld	r24, Z+
    224c:	91 91       	ld	r25, Z+
    224e:	7f 01       	movw	r14, r30
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    2258:	d5 01       	movw	r26, r10
    225a:	8d 93       	st	X+, r24
    225c:	9d 93       	st	X+, r25
    225e:	5d 01       	movw	r10, r26

		}
	}

	bot_rotate[count2] = get_turn(direction[count2-1],direction[count2]);						//gives initial value to bot_rotate for third tuple using get_turn function
	for(a=count2;a<count;a++)
    2260:	e0 16       	cp	r14, r16
    2262:	f1 06       	cpc	r15, r17
    2264:	89 f7       	brne	.-30     	; 0x2248 <__stack+0x49>
    2266:	d0 92 12 3a 	sts	0x3A12, r13
    226a:	c0 92 11 3a 	sts	0x3A11, r12
    226e:	51 c2       	rjmp	.+1186   	; 0x2712 <__stack+0x513>
	for(a=count1;a<count;a++)																//adds element to direction array from matrix D
	{
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;
    2270:	10 92 f7 39 	sts	0x39F7, r1
    2274:	10 92 f6 39 	sts	0x39F6, r1
    2278:	10 92 2f 38 	sts	0x382F, r1
    227c:	10 92 2e 38 	sts	0x382E, r1

		}
	}


	bot_rotate[0] = 1;																		//gives initial value to bot_rotate for first tuple using get_turn function
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	90 93 16 3a 	sts	0x3A16, r25
    2288:	80 93 15 3a 	sts	0x3A15, r24
	bot_rotate[count1] = get_turn(direction[count1-1],direction[count1]);					//gives initial value to bot_rotate for second tuple using get_turn function
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	ee e2       	ldi	r30, 0x2E	; 46
    2294:	f9 e3       	ldi	r31, 0x39	; 57
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	8e 0f       	add	r24, r30
    229c:	9f 1f       	adc	r25, r31
    229e:	0b 81       	ldd	r16, Y+3	; 0x03
    22a0:	1c 81       	ldd	r17, Y+4	; 0x04
    22a2:	00 0f       	add	r16, r16
    22a4:	11 1f       	adc	r17, r17
    22a6:	e0 0f       	add	r30, r16
    22a8:	f1 1f       	adc	r31, r17
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	fc 01       	movw	r30, r24
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    22b8:	f8 01       	movw	r30, r16
    22ba:	eb 5e       	subi	r30, 0xEB	; 235
    22bc:	f5 4c       	sbci	r31, 0xC5	; 197
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	f0 cb       	rjmp	.-2080   	; 0x1aa4 <shortest_path+0x6f0>
	for(a=count2;a<count;a++)																//adds element to direction array from matrix D
	{
		direction[a] = D[total_path[a]-1][total_path[a+1]-1];
	}

	i=0;j=0;
    22c4:	10 92 f7 39 	sts	0x39F7, r1
    22c8:	10 92 f6 39 	sts	0x39F6, r1
    22cc:	10 92 2f 38 	sts	0x382F, r1
    22d0:	10 92 2e 38 	sts	0x382E, r1
			}

		}
	}

	bot_rotate[count2] = get_turn(direction[count2-1],direction[count2]);						//gives initial value to bot_rotate for third tuple using get_turn function
    22d4:	f5 01       	movw	r30, r10
    22d6:	31 97       	sbiw	r30, 0x01	; 1
    22d8:	8e e2       	ldi	r24, 0x2E	; 46
    22da:	99 e3       	ldi	r25, 0x39	; 57
    22dc:	ee 0f       	add	r30, r30
    22de:	ff 1f       	adc	r31, r31
    22e0:	e8 0f       	add	r30, r24
    22e2:	f9 1f       	adc	r31, r25
    22e4:	85 01       	movw	r16, r10
    22e6:	00 0f       	add	r16, r16
    22e8:	11 1f       	adc	r17, r17
    22ea:	80 0f       	add	r24, r16
    22ec:	91 1f       	adc	r25, r17
    22ee:	dc 01       	movw	r26, r24
    22f0:	6d 91       	ld	r22, X+
    22f2:	7c 91       	ld	r23, X
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	0e 94 3a 02 	call	0x474	; 0x474 <get_turn>
    22fc:	f8 01       	movw	r30, r16
    22fe:	eb 5e       	subi	r30, 0xEB	; 235
    2300:	f5 4c       	sbci	r31, 0xC5	; 197
    2302:	91 83       	std	Z+1, r25	; 0x01
    2304:	80 83       	st	Z, r24
	for(a=count2;a<count;a++)
    2306:	b0 92 12 3a 	sts	0x3A12, r11
    230a:	a0 92 11 3a 	sts	0x3A11, r10
    230e:	01 c2       	rjmp	.+1026   	; 0x2712 <__stack+0x513>
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the third and fourth correct node
				if(B[path[2]-1][path[3]-1][c] == 0)
					break;
				total_path[count] = B[path[2]-1][path[3]-1][c];
    2310:	e0 91 2c 38 	lds	r30, 0x382C
    2314:	f0 91 2d 38 	lds	r31, 0x382D
    2318:	df 01       	movw	r26, r30
    231a:	aa 0f       	add	r26, r26
    231c:	bb 1f       	adc	r27, r27
    231e:	a6 5b       	subi	r26, 0xB6	; 182
    2320:	b7 4c       	sbci	r27, 0xC7	; 199
    2322:	8d 93       	st	X+, r24
    2324:	9c 93       	st	X, r25
				count++;
    2326:	31 96       	adiw	r30, 0x01	; 1
    2328:	f0 93 2d 38 	sts	0x382D, r31
    232c:	e0 93 2c 38 	sts	0x382C, r30
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	90 93 f9 39 	sts	0x39F9, r25
    2338:	80 93 f8 39 	sts	0x39F8, r24
    233c:	bf 01       	movw	r22, r30
			{																				//between the third and fourth correct node
				if(B[path[2]-1][path[3]-1][c] == 0)
    233e:	40 91 42 38 	lds	r20, 0x3842
    2342:	50 91 43 38 	lds	r21, 0x3843
    2346:	41 50       	subi	r20, 0x01	; 1
    2348:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    234a:	ca 01       	movw	r24, r20
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	84 0f       	add	r24, r20
    2352:	95 1f       	adc	r25, r21
    2354:	9c 01       	movw	r18, r24
    2356:	22 0f       	add	r18, r18
    2358:	33 1f       	adc	r19, r19
    235a:	22 0f       	add	r18, r18
    235c:	33 1f       	adc	r19, r19
    235e:	22 0f       	add	r18, r18
    2360:	33 1f       	adc	r19, r19
    2362:	28 1b       	sub	r18, r24
    2364:	39 0b       	sbc	r19, r25
    2366:	d9 01       	movw	r26, r18
    2368:	a4 0f       	add	r26, r20
    236a:	b5 1f       	adc	r27, r21
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the third and fourth correct node
				if(B[path[2]-1][path[3]-1][c] == 0)
    236c:	80 91 40 38 	lds	r24, 0x3840
    2370:	90 91 41 38 	lds	r25, 0x3841
    2374:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2376:	2a ef       	ldi	r18, 0xFA	; 250
    2378:	31 e0       	ldi	r19, 0x01	; 1
    237a:	82 9f       	mul	r24, r18
    237c:	a0 01       	movw	r20, r0
    237e:	83 9f       	mul	r24, r19
    2380:	50 0d       	add	r21, r0
    2382:	92 9f       	mul	r25, r18
    2384:	50 0d       	add	r21, r0
    2386:	11 24       	eor	r1, r1
    2388:	a4 0f       	add	r26, r20
    238a:	b5 1f       	adc	r27, r21
    238c:	aa 5b       	subi	r26, 0xBA	; 186
    238e:	b5 4f       	sbci	r27, 0xF5	; 245
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	e6 5b       	subi	r30, 0xB6	; 182
    2396:	f7 4c       	sbci	r31, 0xC7	; 199
    2398:	21 e0       	ldi	r18, 0x01	; 1
    239a:	30 e0       	ldi	r19, 0x00	; 0
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
				count++;
			}
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	b6 cd       	rjmp	.-1172   	; 0x1f0e <shortest_path+0xb5a>

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the second and third correct node
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
    23a2:	e0 91 2c 38 	lds	r30, 0x382C
    23a6:	f0 91 2d 38 	lds	r31, 0x382D
    23aa:	df 01       	movw	r26, r30
    23ac:	aa 0f       	add	r26, r26
    23ae:	bb 1f       	adc	r27, r27
    23b0:	a6 5b       	subi	r26, 0xB6	; 182
    23b2:	b7 4c       	sbci	r27, 0xC7	; 199
    23b4:	8d 93       	st	X+, r24
    23b6:	9c 93       	st	X, r25
				count++;
    23b8:	31 96       	adiw	r30, 0x01	; 1
    23ba:	f0 93 2d 38 	sts	0x382D, r31
    23be:	e0 93 2c 38 	sts	0x382C, r30
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	90 93 f9 39 	sts	0x39F9, r25
    23ca:	80 93 f8 39 	sts	0x39F8, r24
    23ce:	bf 01       	movw	r22, r30
			{																				//between the second and third correct node
				if(B[path[1]-1][path[2]-1][c] == 0)
    23d0:	40 91 40 38 	lds	r20, 0x3840
    23d4:	50 91 41 38 	lds	r21, 0x3841
    23d8:	41 50       	subi	r20, 0x01	; 1
    23da:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    23dc:	ca 01       	movw	r24, r20
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	84 0f       	add	r24, r20
    23e4:	95 1f       	adc	r25, r21
    23e6:	9c 01       	movw	r18, r24
    23e8:	22 0f       	add	r18, r18
    23ea:	33 1f       	adc	r19, r19
    23ec:	22 0f       	add	r18, r18
    23ee:	33 1f       	adc	r19, r19
    23f0:	22 0f       	add	r18, r18
    23f2:	33 1f       	adc	r19, r19
    23f4:	28 1b       	sub	r18, r24
    23f6:	39 0b       	sbc	r19, r25
    23f8:	d9 01       	movw	r26, r18
    23fa:	a4 0f       	add	r26, r20
    23fc:	b5 1f       	adc	r27, r21
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the second and third correct node
				if(B[path[1]-1][path[2]-1][c] == 0)
    23fe:	80 91 3e 38 	lds	r24, 0x383E
    2402:	90 91 3f 38 	lds	r25, 0x383F
    2406:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2408:	2a ef       	ldi	r18, 0xFA	; 250
    240a:	31 e0       	ldi	r19, 0x01	; 1
    240c:	82 9f       	mul	r24, r18
    240e:	a0 01       	movw	r20, r0
    2410:	83 9f       	mul	r24, r19
    2412:	50 0d       	add	r21, r0
    2414:	92 9f       	mul	r25, r18
    2416:	50 0d       	add	r21, r0
    2418:	11 24       	eor	r1, r1
    241a:	a4 0f       	add	r26, r20
    241c:	b5 1f       	adc	r27, r21
    241e:	aa 5b       	subi	r26, 0xBA	; 186
    2420:	b5 4f       	sbci	r27, 0xF5	; 245
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	e6 5b       	subi	r30, 0xB6	; 182
    2428:	f7 4c       	sbci	r31, 0xC7	; 199
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    242a:	21 e0       	ldi	r18, 0x01	; 1
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	24 cd       	rjmp	.-1464   	; 0x1e78 <shortest_path+0xac4>

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the first and second correct node
				if(B[path[0]-1][path[1]-1][c] == 0)
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
    2430:	e0 91 2c 38 	lds	r30, 0x382C
    2434:	f0 91 2d 38 	lds	r31, 0x382D
    2438:	df 01       	movw	r26, r30
    243a:	aa 0f       	add	r26, r26
    243c:	bb 1f       	adc	r27, r27
    243e:	a6 5b       	subi	r26, 0xB6	; 182
    2440:	b7 4c       	sbci	r27, 0xC7	; 199
    2442:	8d 93       	st	X+, r24
    2444:	9c 93       	st	X, r25
				count++;
    2446:	31 96       	adiw	r30, 0x01	; 1
    2448:	f0 93 2d 38 	sts	0x382D, r31
    244c:	e0 93 2c 38 	sts	0x382C, r30
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	90 93 f9 39 	sts	0x39F9, r25
    2458:	80 93 f8 39 	sts	0x39F8, r24
    245c:	bf 01       	movw	r22, r30
			{																				//between the first and second correct node
				if(B[path[0]-1][path[1]-1][c] == 0)
    245e:	40 91 3e 38 	lds	r20, 0x383E
    2462:	50 91 3f 38 	lds	r21, 0x383F
    2466:	41 50       	subi	r20, 0x01	; 1
    2468:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    246a:	ca 01       	movw	r24, r20
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	84 0f       	add	r24, r20
    2472:	95 1f       	adc	r25, r21
    2474:	9c 01       	movw	r18, r24
    2476:	22 0f       	add	r18, r18
    2478:	33 1f       	adc	r19, r19
    247a:	22 0f       	add	r18, r18
    247c:	33 1f       	adc	r19, r19
    247e:	22 0f       	add	r18, r18
    2480:	33 1f       	adc	r19, r19
    2482:	28 1b       	sub	r18, r24
    2484:	39 0b       	sbc	r19, r25
    2486:	d9 01       	movw	r26, r18
    2488:	a4 0f       	add	r26, r20
    248a:	b5 1f       	adc	r27, r21
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the first and second correct node
				if(B[path[0]-1][path[1]-1][c] == 0)
    248c:	80 91 3c 38 	lds	r24, 0x383C
    2490:	90 91 3d 38 	lds	r25, 0x383D
    2494:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2496:	2a ef       	ldi	r18, 0xFA	; 250
    2498:	31 e0       	ldi	r19, 0x01	; 1
    249a:	82 9f       	mul	r24, r18
    249c:	a0 01       	movw	r20, r0
    249e:	83 9f       	mul	r24, r19
    24a0:	50 0d       	add	r21, r0
    24a2:	92 9f       	mul	r25, r18
    24a4:	50 0d       	add	r21, r0
    24a6:	11 24       	eor	r1, r1
    24a8:	a4 0f       	add	r26, r20
    24aa:	b5 1f       	adc	r27, r21
    24ac:	aa 5b       	subi	r26, 0xBA	; 186
    24ae:	b5 4f       	sbci	r27, 0xF5	; 245
    24b0:	ee 0f       	add	r30, r30
    24b2:	ff 1f       	adc	r31, r31
    24b4:	e6 5b       	subi	r30, 0xB6	; 182
    24b6:	f7 4c       	sbci	r31, 0xC7	; 199
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	97 cc       	rjmp	.-1746   	; 0x1dec <shortest_path+0xa38>

			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node
				if(B[start-1][path[0]-1][c] == 0)
					break;
				total_path[count] = B[start-1][path[0]-1][c];
    24be:	e0 91 2c 38 	lds	r30, 0x382C
    24c2:	f0 91 2d 38 	lds	r31, 0x382D
    24c6:	df 01       	movw	r26, r30
    24c8:	aa 0f       	add	r26, r26
    24ca:	bb 1f       	adc	r27, r27
    24cc:	a6 5b       	subi	r26, 0xB6	; 182
    24ce:	b7 4c       	sbci	r27, 0xC7	; 199
    24d0:	8d 93       	st	X+, r24
    24d2:	9c 93       	st	X, r25
				count++;
    24d4:	31 96       	adiw	r30, 0x01	; 1
    24d6:	f0 93 2d 38 	sts	0x382D, r31
    24da:	e0 93 2c 38 	sts	0x382C, r30
		}
	}
}


			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	90 93 f9 39 	sts	0x39F9, r25
    24e6:	80 93 f8 39 	sts	0x39F8, r24
    24ea:	bf 01       	movw	r22, r30
			{																				//between the start and first correct node
				if(B[start-1][path[0]-1][c] == 0)
    24ec:	40 91 3c 38 	lds	r20, 0x383C
    24f0:	50 91 3d 38 	lds	r21, 0x383D
    24f4:	41 50       	subi	r20, 0x01	; 1
    24f6:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    24f8:	ca 01       	movw	r24, r20
    24fa:	88 0f       	add	r24, r24
    24fc:	99 1f       	adc	r25, r25
    24fe:	84 0f       	add	r24, r20
    2500:	95 1f       	adc	r25, r21
    2502:	9c 01       	movw	r18, r24
    2504:	22 0f       	add	r18, r18
    2506:	33 1f       	adc	r19, r19
    2508:	22 0f       	add	r18, r18
    250a:	33 1f       	adc	r19, r19
    250c:	22 0f       	add	r18, r18
    250e:	33 1f       	adc	r19, r19
    2510:	28 1b       	sub	r18, r24
    2512:	39 0b       	sbc	r19, r25
    2514:	d9 01       	movw	r26, r18
    2516:	a4 0f       	add	r26, r20
    2518:	b5 1f       	adc	r27, r21
}


			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node
				if(B[start-1][path[0]-1][c] == 0)
    251a:	80 91 13 3a 	lds	r24, 0x3A13
    251e:	90 91 14 3a 	lds	r25, 0x3A14
    2522:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2524:	2a ef       	ldi	r18, 0xFA	; 250
    2526:	31 e0       	ldi	r19, 0x01	; 1
    2528:	82 9f       	mul	r24, r18
    252a:	a0 01       	movw	r20, r0
    252c:	83 9f       	mul	r24, r19
    252e:	50 0d       	add	r21, r0
    2530:	92 9f       	mul	r25, r18
    2532:	50 0d       	add	r21, r0
    2534:	11 24       	eor	r1, r1
    2536:	a4 0f       	add	r26, r20
    2538:	b5 1f       	adc	r27, r21
    253a:	aa 5b       	subi	r26, 0xBA	; 186
    253c:	b5 4f       	sbci	r27, 0xF5	; 245
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	e6 5b       	subi	r30, 0xB6	; 182
    2544:	f7 4c       	sbci	r31, 0xC7	; 199
		}
	}
}


			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	0a cc       	rjmp	.-2028   	; 0x1d60 <shortest_path+0x9ac>

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
			{																				//between the second and third correct node 
				if(B[path[1]-1][path[2]-1][c] == 0)
					break;
				total_path[count] = B[path[1]-1][path[2]-1][c];
    254c:	a0 91 2c 38 	lds	r26, 0x382C
    2550:	b0 91 2d 38 	lds	r27, 0x382D
    2554:	cd 01       	movw	r24, r26
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	86 5b       	subi	r24, 0xB6	; 182
    255c:	97 4c       	sbci	r25, 0xC7	; 199
    255e:	fc 01       	movw	r30, r24
    2560:	31 83       	std	Z+1, r19	; 0x01
    2562:	20 83       	st	Z, r18
				count++;
    2564:	11 96       	adiw	r26, 0x01	; 1
    2566:	b0 93 2d 38 	sts	0x382D, r27
    256a:	a0 93 2c 38 	sts	0x382C, r26
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	90 93 f9 39 	sts	0x39F9, r25
    2576:	80 93 f8 39 	sts	0x39F8, r24
    257a:	bd 01       	movw	r22, r26
			{																				//between the second and third correct node 
				if(B[path[1]-1][path[2]-1][c] == 0)
    257c:	80 91 40 38 	lds	r24, 0x3840
    2580:	90 91 41 38 	lds	r25, 0x3841
    2584:	ac 01       	movw	r20, r24
    2586:	41 50       	subi	r20, 0x01	; 1
    2588:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    258a:	ca 01       	movw	r24, r20
    258c:	88 0f       	add	r24, r24
    258e:	99 1f       	adc	r25, r25
    2590:	84 0f       	add	r24, r20
    2592:	95 1f       	adc	r25, r21
    2594:	9c 01       	movw	r18, r24
    2596:	22 0f       	add	r18, r18
    2598:	33 1f       	adc	r19, r19
    259a:	22 0f       	add	r18, r18
    259c:	33 1f       	adc	r19, r19
    259e:	22 0f       	add	r18, r18
    25a0:	33 1f       	adc	r19, r19
    25a2:	28 1b       	sub	r18, r24
    25a4:	39 0b       	sbc	r19, r25
    25a6:	f9 01       	movw	r30, r18
    25a8:	e4 0f       	add	r30, r20
    25aa:	f5 1f       	adc	r31, r21
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
			{																				//between the second and third correct node 
				if(B[path[1]-1][path[2]-1][c] == 0)
    25ac:	80 91 3e 38 	lds	r24, 0x383E
    25b0:	90 91 3f 38 	lds	r25, 0x383F
    25b4:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    25b6:	2a ef       	ldi	r18, 0xFA	; 250
    25b8:	31 e0       	ldi	r19, 0x01	; 1
    25ba:	82 9f       	mul	r24, r18
    25bc:	a0 01       	movw	r20, r0
    25be:	83 9f       	mul	r24, r19
    25c0:	50 0d       	add	r21, r0
    25c2:	92 9f       	mul	r25, r18
    25c4:	50 0d       	add	r21, r0
    25c6:	11 24       	eor	r1, r1
    25c8:	4e 0f       	add	r20, r30
    25ca:	5f 1f       	adc	r21, r31
    25cc:	fa 01       	movw	r30, r20
    25ce:	ea 5b       	subi	r30, 0xBA	; 186
    25d0:	f5 4f       	sbci	r31, 0xF5	; 245
    25d2:	cd 01       	movw	r24, r26
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	dc 01       	movw	r26, r24
    25da:	a6 5b       	subi	r26, 0xB6	; 182
    25dc:	b7 4c       	sbci	r27, 0xC7	; 199
    25de:	21 e0       	ldi	r18, 0x01	; 1
    25e0:	30 e0       	ldi	r19, 0x00	; 0
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	c5 c8       	rjmp	.-3702   	; 0x1772 <shortest_path+0x3be>

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
			{																				//between the first and second correct node 
				if(B[path[0]-1][path[1]-1][c] == 0)
					break;
				total_path[count] = B[path[0]-1][path[1]-1][c];
    25e8:	e0 91 2c 38 	lds	r30, 0x382C
    25ec:	f0 91 2d 38 	lds	r31, 0x382D
    25f0:	cf 01       	movw	r24, r30
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	86 5b       	subi	r24, 0xB6	; 182
    25f8:	97 4c       	sbci	r25, 0xC7	; 199
    25fa:	dc 01       	movw	r26, r24
    25fc:	2d 93       	st	X+, r18
    25fe:	3c 93       	st	X, r19
				count++;
    2600:	31 96       	adiw	r30, 0x01	; 1
    2602:	f0 93 2d 38 	sts	0x382D, r31
    2606:	e0 93 2c 38 	sts	0x382C, r30
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	90 93 f9 39 	sts	0x39F9, r25
    2612:	80 93 f8 39 	sts	0x39F8, r24
    2616:	bf 01       	movw	r22, r30
			{																				//between the first and second correct node 
				if(B[path[0]-1][path[1]-1][c] == 0)
    2618:	80 91 3e 38 	lds	r24, 0x383E
    261c:	90 91 3f 38 	lds	r25, 0x383F
    2620:	ac 01       	movw	r20, r24
    2622:	41 50       	subi	r20, 0x01	; 1
    2624:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2626:	ca 01       	movw	r24, r20
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	84 0f       	add	r24, r20
    262e:	95 1f       	adc	r25, r21
    2630:	9c 01       	movw	r18, r24
    2632:	22 0f       	add	r18, r18
    2634:	33 1f       	adc	r19, r19
    2636:	22 0f       	add	r18, r18
    2638:	33 1f       	adc	r19, r19
    263a:	22 0f       	add	r18, r18
    263c:	33 1f       	adc	r19, r19
    263e:	28 1b       	sub	r18, r24
    2640:	39 0b       	sbc	r19, r25
    2642:	d9 01       	movw	r26, r18
    2644:	a4 0f       	add	r26, r20
    2646:	b5 1f       	adc	r27, r21
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
			{																				//between the first and second correct node 
				if(B[path[0]-1][path[1]-1][c] == 0)
    2648:	80 91 3c 38 	lds	r24, 0x383C
    264c:	90 91 3d 38 	lds	r25, 0x383D
    2650:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    2652:	2a ef       	ldi	r18, 0xFA	; 250
    2654:	31 e0       	ldi	r19, 0x01	; 1
    2656:	82 9f       	mul	r24, r18
    2658:	a0 01       	movw	r20, r0
    265a:	83 9f       	mul	r24, r19
    265c:	50 0d       	add	r21, r0
    265e:	92 9f       	mul	r25, r18
    2660:	50 0d       	add	r21, r0
    2662:	11 24       	eor	r1, r1
    2664:	4a 0f       	add	r20, r26
    2666:	5b 1f       	adc	r21, r27
    2668:	da 01       	movw	r26, r20
    266a:	aa 5b       	subi	r26, 0xBA	; 186
    266c:	b5 4f       	sbci	r27, 0xF5	; 245
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	e6 5b       	subi	r30, 0xB6	; 182
    2674:	f7 4c       	sbci	r31, 0xC7	; 199
					break;
				total_path[count] = B[start-1][path[0]-1][c];
				count++;
			}

			for(c=0;c<11;c++)																//loop that adds node to the total_path array
    2676:	21 e0       	ldi	r18, 0x01	; 1
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	2d c8       	rjmp	.-4006   	; 0x16d6 <shortest_path+0x322>
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node 
				if(B[start-1][path[0]-1][c] == 0)
					break;
				total_path[count] = B[start-1][path[0]-1][c];
    267c:	e0 91 2c 38 	lds	r30, 0x382C
    2680:	f0 91 2d 38 	lds	r31, 0x382D
    2684:	cf 01       	movw	r24, r30
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	86 5b       	subi	r24, 0xB6	; 182
    268c:	97 4c       	sbci	r25, 0xC7	; 199
    268e:	dc 01       	movw	r26, r24
    2690:	2d 93       	st	X+, r18
    2692:	3c 93       	st	X, r19
				count++;
    2694:	31 96       	adiw	r30, 0x01	; 1
    2696:	f0 93 2d 38 	sts	0x382D, r31
    269a:	e0 93 2c 38 	sts	0x382C, r30
				}
			}
		}
	}
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	90 93 f9 39 	sts	0x39F9, r25
    26a6:	80 93 f8 39 	sts	0x39F8, r24
    26aa:	bf 01       	movw	r22, r30
			{																				//between the start and first correct node 
				if(B[start-1][path[0]-1][c] == 0)
    26ac:	80 91 3c 38 	lds	r24, 0x383C
    26b0:	90 91 3d 38 	lds	r25, 0x383D
    26b4:	ac 01       	movw	r20, r24
    26b6:	41 50       	subi	r20, 0x01	; 1
    26b8:	50 40       	sbci	r21, 0x00	; 0

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    26ba:	ca 01       	movw	r24, r20
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	84 0f       	add	r24, r20
    26c2:	95 1f       	adc	r25, r21
    26c4:	9c 01       	movw	r18, r24
    26c6:	22 0f       	add	r18, r18
    26c8:	33 1f       	adc	r19, r19
    26ca:	22 0f       	add	r18, r18
    26cc:	33 1f       	adc	r19, r19
    26ce:	22 0f       	add	r18, r18
    26d0:	33 1f       	adc	r19, r19
    26d2:	28 1b       	sub	r18, r24
    26d4:	39 0b       	sbc	r19, r25
    26d6:	d9 01       	movw	r26, r18
    26d8:	a4 0f       	add	r26, r20
    26da:	b5 1f       	adc	r27, r21
		}
	}
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
			{																				//between the start and first correct node 
				if(B[start-1][path[0]-1][c] == 0)
    26dc:	80 91 13 3a 	lds	r24, 0x3A13
    26e0:	90 91 14 3a 	lds	r25, 0x3A14
    26e4:	01 97       	sbiw	r24, 0x01	; 1

				}
}
	
//function that calculates the shortest path for the given input	
void shortest_path()
    26e6:	2a ef       	ldi	r18, 0xFA	; 250
    26e8:	31 e0       	ldi	r19, 0x01	; 1
    26ea:	82 9f       	mul	r24, r18
    26ec:	a0 01       	movw	r20, r0
    26ee:	83 9f       	mul	r24, r19
    26f0:	50 0d       	add	r21, r0
    26f2:	92 9f       	mul	r25, r18
    26f4:	50 0d       	add	r21, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	4a 0f       	add	r20, r26
    26fa:	5b 1f       	adc	r21, r27
    26fc:	da 01       	movw	r26, r20
    26fe:	aa 5b       	subi	r26, 0xBA	; 186
    2700:	b5 4f       	sbci	r27, 0xF5	; 245
    2702:	ee 0f       	add	r30, r30
    2704:	ff 1f       	adc	r31, r31
    2706:	e6 5b       	subi	r30, 0xB6	; 182
    2708:	f7 4c       	sbci	r31, 0xC7	; 199
				}
			}
		}
	}
	
			for(c=0;c<11;c++)																//loop that adds node from matrix B to the total_path array
    270a:	21 e0       	ldi	r18, 0x01	; 1
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <shortest_path+0x290>
	for(a=count2;a<count;a++)
	{
		bot_rotate[a+1] = get_turn(direction[a],direction[a+1]);								//gives value to bot_rotate array
	}

}
    2712:	66 96       	adiw	r28, 0x16	; 22
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	f8 94       	cli
    2718:	de bf       	out	0x3e, r29	; 62
    271a:	0f be       	out	0x3f, r0	; 63
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	df 90       	pop	r13
    272c:	cf 90       	pop	r12
    272e:	bf 90       	pop	r11
    2730:	af 90       	pop	r10
    2732:	9f 90       	pop	r9
    2734:	8f 90       	pop	r8
    2736:	7f 90       	pop	r7
    2738:	6f 90       	pop	r6
    273a:	5f 90       	pop	r5
    273c:	4f 90       	pop	r4
    273e:	3f 90       	pop	r3
    2740:	2f 90       	pop	r2
    2742:	08 95       	ret

00002744 <servo1_pin_config>:
//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    2744:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    2746:	2d 9a       	sbi	0x05, 5	; 5
}
    2748:	08 95       	ret

0000274a <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    274a:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    274c:	2e 9a       	sbi	0x05, 6	; 5
}
    274e:	08 95       	ret

00002750 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    2750:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    2752:	2f 9a       	sbi	0x05, 7	; 5
}
    2754:	08 95       	ret

00002756 <Sharp_GP2D12_estimation>:

// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
    275a:	68 2f       	mov	r22, r24
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2766:	2f ee       	ldi	r18, 0xEF	; 239
    2768:	39 ec       	ldi	r19, 0xC9	; 201
    276a:	43 e9       	ldi	r20, 0x93	; 147
    276c:	5f e3       	ldi	r21, 0x3F	; 63
    276e:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <pow>
    2772:	b6 2f       	mov	r27, r22
    2774:	a7 2f       	mov	r26, r23
    2776:	38 2f       	mov	r19, r24
    2778:	29 2f       	mov	r18, r25
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e8       	ldi	r24, 0x80	; 128
    2780:	9f e3       	ldi	r25, 0x3F	; 63
    2782:	42 2f       	mov	r20, r18
    2784:	0b 2f       	mov	r16, r27
    2786:	1a 2f       	mov	r17, r26
    2788:	23 2f       	mov	r18, r19
    278a:	34 2f       	mov	r19, r20
    278c:	a9 01       	movw	r20, r18
    278e:	98 01       	movw	r18, r16
    2790:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
    2794:	2a e9       	ldi	r18, 0x9A	; 154
    2796:	39 ef       	ldi	r19, 0xF9	; 249
    2798:	4e e2       	ldi	r20, 0x2E	; 46
    279a:	55 e4       	ldi	r21, 0x45	; 69
    279c:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__mulsf3>
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e2       	ldi	r20, 0x20	; 32
    27a6:	51 e4       	ldi	r21, 0x41	; 65
    27a8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__mulsf3>
    27ac:	0e 94 af 19 	call	0x335e	; 0x335e <__fixsfsi>
    27b0:	88 27       	eor	r24, r24
    27b2:	77 fd       	sbrc	r23, 7
    27b4:	80 95       	com	r24
    27b6:	98 2f       	mov	r25, r24
    27b8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__floatsisf>
	distanceInt = (int)distance;
    27bc:	0e 94 af 19 	call	0x335e	; 0x335e <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
    27c0:	86 2f       	mov	r24, r22
    27c2:	97 2f       	mov	r25, r23
    27c4:	23 e0       	ldi	r18, 0x03	; 3
    27c6:	81 32       	cpi	r24, 0x21	; 33
    27c8:	92 07       	cpc	r25, r18
    27ca:	10 f0       	brcs	.+4      	; 0x27d0 <Sharp_GP2D12_estimation+0x7a>
    27cc:	80 e2       	ldi	r24, 0x20	; 32
    27ce:	93 e0       	ldi	r25, 0x03	; 3
}
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	08 95       	ret

000027d6 <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
    27d6:	87 b1       	in	r24, 0x07	; 7
    27d8:	87 6f       	ori	r24, 0xF7	; 247
    27da:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
    27dc:	88 b1       	in	r24, 0x08	; 8
    27de:	80 78       	andi	r24, 0x80	; 128
    27e0:	88 b9       	out	0x08, r24	; 8
}
    27e2:	08 95       	ret

000027e4 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
    27e4:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
    27e6:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
    27e8:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
    27ec:	10 92 08 01 	sts	0x0108, r1
}
    27f0:	08 95       	ret

000027f2 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F;
    27f2:	81 b1       	in	r24, 0x01	; 1
    27f4:	8f 60       	ori	r24, 0x0F	; 15
    27f6:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
    27f8:	82 b1       	in	r24, 0x02	; 2
    27fa:	80 7f       	andi	r24, 0xF0	; 240
    27fc:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    27fe:	ea e0       	ldi	r30, 0x0A	; 10
    2800:	f1 e0       	ldi	r31, 0x01	; 1
    2802:	80 81       	ld	r24, Z
    2804:	88 61       	ori	r24, 0x18	; 24
    2806:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    2808:	eb e0       	ldi	r30, 0x0B	; 11
    280a:	f1 e0       	ldi	r31, 0x01	; 1
    280c:	80 81       	ld	r24, Z
    280e:	88 61       	ori	r24, 0x18	; 24
    2810:	80 83       	st	Z, r24
}
    2812:	08 95       	ret

00002814 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    2814:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    2816:	74 9a       	sbi	0x0e, 4	; 14
}
    2818:	08 95       	ret

0000281a <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    281a:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    281c:	75 9a       	sbi	0x0e, 5	; 14
}
    281e:	08 95       	ret

00002820 <buzzer_pin_config>:

void buzzer_pin_config (void)
{
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    2820:	3b 9a       	sbi	0x07, 3	; 7
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    2822:	43 98       	cbi	0x08, 3	; 8
}
    2824:	08 95       	ret

00002826 <port_init>:
//Function to initialize ports
void port_init()
{
	buzzer_pin_config();
    2826:	0e 94 10 14 	call	0x2820	; 0x2820 <buzzer_pin_config>
	lcd_port_config();
    282a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <lcd_port_config>
	adc_pin_config();
    282e:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <adc_pin_config>
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
    2832:	0e 94 a2 13 	call	0x2744	; 0x2744 <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation 
    2836:	0e 94 a5 13 	call	0x274a	; 0x274a <servo2_pin_config>
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation  
    283a:	0e 94 a8 13 	call	0x2750	; 0x2750 <servo3_pin_config>
	motion_pin_config(); //robot motion pins config
    283e:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
    2842:	0e 94 0a 14 	call	0x2814	; 0x2814 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
    2846:	0e 94 0d 14 	call	0x281a	; 0x281a <right_encoder_pin_config>
}
    284a:	08 95       	ret

0000284c <buzzer_on>:

void buzzer_on (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    284c:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore | 0x08;
    284e:	88 60       	ori	r24, 0x08	; 8
 PORTC = port_restore;
    2850:	88 b9       	out	0x08, r24	; 8
}
    2852:	08 95       	ret

00002854 <buzzer_off>:

void buzzer_off (void)
{
 unsigned char port_restore = 0;
 port_restore = PINC;
    2854:	86 b1       	in	r24, 0x06	; 6
 port_restore = port_restore & 0xF7;
    2856:	87 7f       	andi	r24, 0xF7	; 247
 PORTC = port_restore;
    2858:	88 b9       	out	0x08, r24	; 8
}
    285a:	08 95       	ret

0000285c <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
    285c:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    285e:	ea e6       	ldi	r30, 0x6A	; 106
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	82 60       	ori	r24, 0x02	; 2
    2866:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    2868:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
    286a:	78 94       	sei
}
    286c:	08 95       	ret

0000286e <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
    286e:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    2870:	ea e6       	ldi	r30, 0x6A	; 106
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	88 60       	ori	r24, 0x08	; 8
    2878:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    287a:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
    287c:	78 94       	sei
}
    287e:	08 95       	ret

00002880 <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
    2880:	1f 92       	push	r1
    2882:	0f 92       	push	r0
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	0f 92       	push	r0
    2888:	11 24       	eor	r1, r1
    288a:	8f 93       	push	r24
    288c:	9f 93       	push	r25
    288e:	af 93       	push	r26
    2890:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
    2892:	80 91 34 38 	lds	r24, 0x3834
    2896:	90 91 35 38 	lds	r25, 0x3835
    289a:	a0 91 36 38 	lds	r26, 0x3836
    289e:	b0 91 37 38 	lds	r27, 0x3837
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	a1 1d       	adc	r26, r1
    28a6:	b1 1d       	adc	r27, r1
    28a8:	80 93 34 38 	sts	0x3834, r24
    28ac:	90 93 35 38 	sts	0x3835, r25
    28b0:	a0 93 36 38 	sts	0x3836, r26
    28b4:	b0 93 37 38 	sts	0x3837, r27
}
    28b8:	bf 91       	pop	r27
    28ba:	af 91       	pop	r26
    28bc:	9f 91       	pop	r25
    28be:	8f 91       	pop	r24
    28c0:	0f 90       	pop	r0
    28c2:	0f be       	out	0x3f, r0	; 63
    28c4:	0f 90       	pop	r0
    28c6:	1f 90       	pop	r1
    28c8:	18 95       	reti

000028ca <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
    28ca:	1f 92       	push	r1
    28cc:	0f 92       	push	r0
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	0f 92       	push	r0
    28d2:	11 24       	eor	r1, r1
    28d4:	8f 93       	push	r24
    28d6:	9f 93       	push	r25
    28d8:	af 93       	push	r26
    28da:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
    28dc:	80 91 38 38 	lds	r24, 0x3838
    28e0:	90 91 39 38 	lds	r25, 0x3839
    28e4:	a0 91 3a 38 	lds	r26, 0x383A
    28e8:	b0 91 3b 38 	lds	r27, 0x383B
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	b1 1d       	adc	r27, r1
    28f2:	80 93 38 38 	sts	0x3838, r24
    28f6:	90 93 39 38 	sts	0x3839, r25
    28fa:	a0 93 3a 38 	sts	0x383A, r26
    28fe:	b0 93 3b 38 	sts	0x383B, r27
}
    2902:	bf 91       	pop	r27
    2904:	af 91       	pop	r26
    2906:	9f 91       	pop	r25
    2908:	8f 91       	pop	r24
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	0f 90       	pop	r0
    2910:	1f 90       	pop	r1
    2912:	18 95       	reti

00002914 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
    2914:	e1 e8       	ldi	r30, 0x81	; 129
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
    291a:	8c ef       	ldi	r24, 0xFC	; 252
    291c:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
    292c:	8f ef       	ldi	r24, 0xFF	; 255
    292e:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
    2932:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
    2936:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
    293a:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
    293e:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
    2942:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
    2946:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
    294a:	8b ea       	ldi	r24, 0xAB	; 171
    294c:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
    2950:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
    2954:	8c e0       	ldi	r24, 0x0C	; 12
    2956:	80 83       	st	Z, r24
}
    2958:	08 95       	ret

0000295a <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
    295a:	e1 e2       	ldi	r30, 0x21	; 33
    295c:	f1 e0       	ldi	r31, 0x01	; 1
    295e:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    2966:	91 e0       	ldi	r25, 0x01	; 1
    2968:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    296c:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    2970:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    2974:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    2978:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    297c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    2980:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    2984:	89 ea       	ldi	r24, 0xA9	; 169
    2986:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    298a:	8b e0       	ldi	r24, 0x0B	; 11
    298c:	80 83       	st	Z, r24
}
    298e:	08 95       	ret

00002990 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
    2990:	ea e7       	ldi	r30, 0x7A	; 122
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
    2996:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    299a:	80 e2       	ldi	r24, 0x20	; 32
    299c:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
    29a0:	80 e8       	ldi	r24, 0x80	; 128
    29a2:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    29a4:	86 e8       	ldi	r24, 0x86	; 134
    29a6:	80 83       	st	Z, r24
}
    29a8:	08 95       	ret

000029aa <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
    29aa:	88 30       	cpi	r24, 0x08	; 8
    29ac:	18 f0       	brcs	.+6      	; 0x29b4 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
    29ae:	98 e0       	ldi	r25, 0x08	; 8
    29b0:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
    29b4:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
    29b6:	80 62       	ori	r24, 0x20	; 32
    29b8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
    29bc:	ea e7       	ldi	r30, 0x7A	; 122
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	80 64       	ori	r24, 0x40	; 64
    29c4:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
    29c6:	80 81       	ld	r24, Z
    29c8:	84 ff       	sbrs	r24, 4
    29ca:	fd cf       	rjmp	.-6      	; 0x29c6 <ADC_Conversion+0x1c>
	a=ADCH;
    29cc:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    29d0:	ea e7       	ldi	r30, 0x7A	; 122
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	90 81       	ld	r25, Z
    29d6:	90 61       	ori	r25, 0x10	; 16
    29d8:	90 83       	st	Z, r25
	ADCSRB = 0x00;
    29da:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
    29de:	08 95       	ret

000029e0 <print_sensor>:

//Function To Print Sesor Values At Desired Row And Coloumn Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	d8 2f       	mov	r29, r24
    29e6:	c6 2f       	mov	r28, r22
    29e8:	84 2f       	mov	r24, r20
	
	ADC_Value = ADC_Conversion(channel);
    29ea:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    29ee:	48 2f       	mov	r20, r24
    29f0:	80 93 2d 39 	sts	0x392D, r24
	lcd_print(row, coloumn, ADC_Value, 3);
    29f4:	8d 2f       	mov	r24, r29
    29f6:	6c 2f       	mov	r22, r28
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	23 e0       	ldi	r18, 0x03	; 3
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_print>
}
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	08 95       	ret

00002a08 <velocity>:
//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
    2a08:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
    2a0c:	60 93 2a 01 	sts	0x012A, r22
}
    2a10:	08 95       	ret

00002a12 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
    2a12:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
    2a14:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
    2a16:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
    2a18:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
    2a1a:	92 b9       	out	0x02, r25	; 2
}
    2a1c:	08 95       	ret

00002a1e <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
    2a1e:	86 e0       	ldi	r24, 0x06	; 6
    2a20:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a24:	08 95       	ret

00002a26 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
    2a26:	89 e0       	ldi	r24, 0x09	; 9
    2a28:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a2c:	08 95       	ret

00002a2e <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
    2a2e:	85 e0       	ldi	r24, 0x05	; 5
    2a30:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a34:	08 95       	ret

00002a36 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
    2a36:	8a e0       	ldi	r24, 0x0A	; 10
    2a38:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a3c:	08 95       	ret

00002a3e <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
    2a3e:	84 e0       	ldi	r24, 0x04	; 4
    2a40:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a44:	08 95       	ret

00002a46 <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a4c:	08 95       	ret

00002a4e <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a54:	08 95       	ret

00002a56 <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
    2a56:	88 e0       	ldi	r24, 0x08	; 8
    2a58:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a5c:	08 95       	ret

00002a5e <stop>:

void stop (void)
{
	motion_set(0x00);
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	0e 94 09 15 	call	0x2a12	; 0x2a12 <motion_set>
}
    2a64:	08 95       	ret

00002a66 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
    2a66:	0f 93       	push	r16
    2a68:	1f 93       	push	r17
    2a6a:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
    2a6c:	bc 01       	movw	r22, r24
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2a76:	28 e4       	ldi	r18, 0x48	; 72
    2a78:	31 ee       	ldi	r19, 0xE1	; 225
    2a7a:	42 e8       	ldi	r20, 0x82	; 130
    2a7c:	50 e4       	ldi	r21, 0x40	; 64
    2a7e:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
    2a82:	0e 94 b4 19 	call	0x3368	; 0x3368 <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
    2a8e:	10 92 34 38 	sts	0x3834, r1
    2a92:	10 92 35 38 	sts	0x3835, r1
    2a96:	10 92 36 38 	sts	0x3836, r1
    2a9a:	10 92 37 38 	sts	0x3837, r1
	ShaftCountLeft = 0;
    2a9e:	10 92 38 38 	sts	0x3838, r1
    2aa2:	10 92 39 38 	sts	0x3839, r1
    2aa6:	10 92 3a 38 	sts	0x383A, r1
    2aaa:	10 92 3b 38 	sts	0x383B, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
    2aae:	f1 e0       	ldi	r31, 0x01	; 1
    2ab0:	c0 e0       	ldi	r28, 0x00	; 0
    2ab2:	40 91 34 38 	lds	r20, 0x3834
    2ab6:	50 91 35 38 	lds	r21, 0x3835
    2aba:	60 91 36 38 	lds	r22, 0x3836
    2abe:	70 91 37 38 	lds	r23, 0x3837
    2ac2:	00 91 38 38 	lds	r16, 0x3838
    2ac6:	10 91 39 38 	lds	r17, 0x3839
    2aca:	20 91 3a 38 	lds	r18, 0x383A
    2ace:	30 91 3b 38 	lds	r19, 0x383B
    2ad2:	ef 2f       	mov	r30, r31
    2ad4:	48 17       	cp	r20, r24
    2ad6:	59 07       	cpc	r21, r25
    2ad8:	6a 07       	cpc	r22, r26
    2ada:	7b 07       	cpc	r23, r27
    2adc:	08 f4       	brcc	.+2      	; 0x2ae0 <angle_rotate+0x7a>
    2ade:	ec 2f       	mov	r30, r28
    2ae0:	ee 23       	and	r30, r30
    2ae2:	49 f4       	brne	.+18     	; 0x2af6 <angle_rotate+0x90>
    2ae4:	4f 2f       	mov	r20, r31
    2ae6:	08 17       	cp	r16, r24
    2ae8:	19 07       	cpc	r17, r25
    2aea:	2a 07       	cpc	r18, r26
    2aec:	3b 07       	cpc	r19, r27
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <angle_rotate+0x8c>
    2af0:	4c 2f       	mov	r20, r28
    2af2:	44 23       	and	r20, r20
    2af4:	f1 f2       	breq	.-68     	; 0x2ab2 <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
    2af6:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
}
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
    2b02:	bc 01       	movw	r22, r24
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2b0c:	25 ee       	ldi	r18, 0xE5	; 229
    2b0e:	30 ed       	ldi	r19, 0xD0	; 208
    2b10:	4a ea       	ldi	r20, 0xAA	; 170
    2b12:	50 e4       	ldi	r21, 0x40	; 64
    2b14:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
    2b18:	0e 94 b4 19 	call	0x3368	; 0x3368 <__fixunssfsi>
    2b1c:	46 2f       	mov	r20, r22
    2b1e:	57 2f       	mov	r21, r23
    2b20:	68 2f       	mov	r22, r24
    2b22:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
    2b24:	10 92 34 38 	sts	0x3834, r1
    2b28:	10 92 35 38 	sts	0x3835, r1
    2b2c:	10 92 36 38 	sts	0x3836, r1
    2b30:	10 92 37 38 	sts	0x3837, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
    2b34:	80 91 34 38 	lds	r24, 0x3834
    2b38:	90 91 35 38 	lds	r25, 0x3835
    2b3c:	a0 91 36 38 	lds	r26, 0x3836
    2b40:	b0 91 37 38 	lds	r27, 0x3837
    2b44:	48 17       	cp	r20, r24
    2b46:	59 07       	cpc	r21, r25
    2b48:	6a 07       	cpc	r22, r26
    2b4a:	7b 07       	cpc	r23, r27
    2b4c:	98 f7       	brcc	.-26     	; 0x2b34 <linear_distance_mm+0x32>
		{//lcd_print(0,0,ShaftCountRight,6);
			break;
		}
	}
	stop(); //Stop robot
    2b4e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
}
    2b52:	08 95       	ret

00002b54 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	ec 01       	movw	r28, r24
	forward();
    2b5a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <forward>
	velocity(250,250);
    2b5e:	8a ef       	ldi	r24, 0xFA	; 250
    2b60:	6a ef       	ldi	r22, 0xFA	; 250
    2b62:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
	linear_distance_mm(DistanceInMM);
    2b66:	ce 01       	movw	r24, r28
    2b68:	0e 94 81 15 	call	0x2b02	; 0x2b02 <linear_distance_mm>
}
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	08 95       	ret

00002b72 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	ec 01       	movw	r28, r24
	back();
    2b78:	0e 94 13 15 	call	0x2a26	; 0x2a26 <back>
	linear_distance_mm(DistanceInMM);
    2b7c:	ce 01       	movw	r24, r28
    2b7e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <linear_distance_mm>
}
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	08 95       	ret

00002b88 <left_degrees>:

void left_degrees(unsigned int Degrees)
{
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
    2b8e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <left>
	angle_rotate(Degrees);
    2b92:	ce 01       	movw	r24, r28
    2b94:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2b98:	df 91       	pop	r29
    2b9a:	cf 91       	pop	r28
    2b9c:	08 95       	ret

00002b9e <right_degrees>:



void right_degrees(unsigned int Degrees)
{
    2b9e:	cf 93       	push	r28
    2ba0:	df 93       	push	r29
    2ba2:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	velocity(255,255);
    2ba4:	8f ef       	ldi	r24, 0xFF	; 255
    2ba6:	6f ef       	ldi	r22, 0xFF	; 255
    2ba8:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
	right(); //Turn right
    2bac:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <right>
	angle_rotate(Degrees);
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2bb6:	df 91       	pop	r29
    2bb8:	cf 91       	pop	r28
    2bba:	08 95       	ret

00002bbc <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
    2bc2:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <soft_left>
	velocity(255,255);
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	6f ef       	ldi	r22, 0xFF	; 255
    2bca:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    2bce:	ce 01       	movw	r24, r28
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
    2be4:	0e 94 23 15 	call	0x2a46	; 0x2a46 <soft_right>
	velocity(255,255);
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	6f ef       	ldi	r22, 0xFF	; 255
    2bec:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	88 0f       	add	r24, r24
    2bf4:	99 1f       	adc	r25, r25
    2bf6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	08 95       	ret

00002c00 <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
    2c06:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2c14:	df 91       	pop	r29
    2c16:	cf 91       	pop	r28
    2c18:	08 95       	ret

00002c1a <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
    2c1a:	cf 93       	push	r28
    2c1c:	df 93       	push	r29
    2c1e:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
    2c20:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
    2c24:	ce 01       	movw	r24, r28
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <angle_rotate>
}
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	08 95       	ret

00002c34 <init_devices>:

//Function to initialize all the devices
void init_devices()
{
	cli(); //Clears the global interrupt
    2c34:	f8 94       	cli
	port_init();  //Initializes all the ports
    2c36:	0e 94 13 14 	call	0x2826	; 0x2826 <port_init>
	adc_init();
    2c3a:	0e 94 c8 14 	call	0x2990	; 0x2990 <adc_init>
	timer5_init();
    2c3e:	0e 94 ad 14 	call	0x295a	; 0x295a <timer5_init>
	timer1_init();
    2c42:	0e 94 8a 14 	call	0x2914	; 0x2914 <timer1_init>
	left_position_encoder_interrupt_init();
    2c46:	0e 94 2e 14 	call	0x285c	; 0x285c <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
    2c4a:	0e 94 37 14 	call	0x286e	; 0x286e <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
    2c4e:	78 94       	sei
}
    2c50:	08 95       	ret

00002c52 <mod>:

unsigned int mod(unsigned int x)
{
		if(x>255)
			x=255;
		return x;
    2c52:	28 2f       	mov	r18, r24
    2c54:	39 2f       	mov	r19, r25
    2c56:	2f 3f       	cpi	r18, 0xFF	; 255
    2c58:	31 05       	cpc	r19, r1
    2c5a:	19 f0       	breq	.+6      	; 0x2c62 <mod+0x10>
    2c5c:	10 f0       	brcs	.+4      	; 0x2c62 <mod+0x10>
    2c5e:	2f ef       	ldi	r18, 0xFF	; 255
    2c60:	30 e0       	ldi	r19, 0x00	; 0
}
    2c62:	82 2f       	mov	r24, r18
    2c64:	93 2f       	mov	r25, r19
    2c66:	08 95       	ret

00002c68 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
    2c68:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
    2c6c:	68 2f       	mov	r22, r24
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2c78:	2b e7       	ldi	r18, 0x7B	; 123
    2c7a:	34 e1       	ldi	r19, 0x14	; 20
    2c7c:	4e ee       	ldi	r20, 0xEE	; 238
    2c7e:	5f e3       	ldi	r21, 0x3F	; 63
    2c80:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	4c e0       	ldi	r20, 0x0C	; 12
    2c8a:	52 e4       	ldi	r21, 0x42	; 66
    2c8c:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
    2c90:	0e 94 b4 19 	call	0x3368	; 0x3368 <__fixunssfsi>
    2c94:	60 93 88 00 	sts	0x0088, r22
}
    2c98:	08 95       	ret

00002c9a <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
    2c9a:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
    2c9e:	68 2f       	mov	r22, r24
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2caa:	2b e7       	ldi	r18, 0x7B	; 123
    2cac:	34 e1       	ldi	r19, 0x14	; 20
    2cae:	4e ee       	ldi	r20, 0xEE	; 238
    2cb0:	5f e3       	ldi	r21, 0x3F	; 63
    2cb2:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
    2cb6:	20 e0       	ldi	r18, 0x00	; 0
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	4c e0       	ldi	r20, 0x0C	; 12
    2cbc:	52 e4       	ldi	r21, 0x42	; 66
    2cbe:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
    2cc2:	0e 94 b4 19 	call	0x3368	; 0x3368 <__fixunssfsi>
    2cc6:	60 93 8a 00 	sts	0x008A, r22
}
    2cca:	08 95       	ret

00002ccc <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
    2ccc:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
    2cd0:	68 2f       	mov	r22, r24
    2cd2:	70 e0       	ldi	r23, 0x00	; 0
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <__floatunsisf>
    2cdc:	2b e7       	ldi	r18, 0x7B	; 123
    2cde:	34 e1       	ldi	r19, 0x14	; 20
    2ce0:	4e ee       	ldi	r20, 0xEE	; 238
    2ce2:	5f e3       	ldi	r21, 0x3F	; 63
    2ce4:	0e 94 47 19 	call	0x328e	; 0x328e <__divsf3>
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	30 e0       	ldi	r19, 0x00	; 0
    2cec:	4c e0       	ldi	r20, 0x0C	; 12
    2cee:	52 e4       	ldi	r21, 0x42	; 66
    2cf0:	0e 94 e3 18 	call	0x31c6	; 0x31c6 <__addsf3>
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
    2cf4:	0e 94 b4 19 	call	0x3368	; 0x3368 <__fixunssfsi>
    2cf8:	60 93 8c 00 	sts	0x008C, r22
}
    2cfc:	08 95       	ret

00002cfe <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
    2d04:	8f ef       	ldi	r24, 0xFF	; 255
    2d06:	80 93 88 00 	sts	0x0088, r24
}
    2d0a:	08 95       	ret

00002d0c <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
    2d0c:	83 e0       	ldi	r24, 0x03	; 3
    2d0e:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	80 93 8a 00 	sts	0x008A, r24
}
    2d18:	08 95       	ret

00002d1a <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
    2d1a:	83 e0       	ldi	r24, 0x03	; 3
    2d1c:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	80 93 8c 00 	sts	0x008C, r24
} 
    2d26:	08 95       	ret

00002d28 <main>:


//Main Function

int main(void)
{	
    2d28:	2f 92       	push	r2
    2d2a:	3f 92       	push	r3
    2d2c:	4f 92       	push	r4
    2d2e:	5f 92       	push	r5
    2d30:	6f 92       	push	r6
    2d32:	7f 92       	push	r7
    2d34:	8f 92       	push	r8
    2d36:	9f 92       	push	r9
    2d38:	af 92       	push	r10
    2d3a:	bf 92       	push	r11
    2d3c:	cf 92       	push	r12
    2d3e:	df 92       	push	r13
    2d40:	ef 92       	push	r14
    2d42:	ff 92       	push	r15
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
	init_devices();
    2d4c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <init_devices>
	lcd_set_4bit();
    2d50:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_set_4bit>
	lcd_init();
    2d54:	0e 94 3e 01 	call	0x27c	; 0x27c <lcd_init>
	int pos=0,num=0,v;									//pos: counter for total_path, num: counter for dir[], v: counter for delay loop
	unsigned char i = 0;										//specifies angle for servo motor
	unsigned int x,y,in_count=0;								//x,y: left wheel and right wheel velocity, in_count: counter used in turning
	
	i=60;
	servo_3(i);
    2d58:	8c e3       	ldi	r24, 0x3C	; 60
    2d5a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2d5e:	8f ef       	ldi	r24, 0xFF	; 255
    2d60:	9f ef       	ldi	r25, 0xFF	; 255
    2d62:	ac e2       	ldi	r26, 0x2C	; 44
    2d64:	81 50       	subi	r24, 0x01	; 1
    2d66:	90 40       	sbci	r25, 0x00	; 0
    2d68:	a0 40       	sbci	r26, 0x00	; 0
    2d6a:	e1 f7       	brne	.-8      	; 0x2d64 <main+0x3c>
    2d6c:	00 c0       	rjmp	.+0      	; 0x2d6e <main+0x46>
    2d6e:	00 00       	nop
	_delay_ms(1000);											//initial angle set to 60 degrees
	
	shortest_path();
    2d70:	0e 94 da 09 	call	0x13b4	; 0x13b4 <shortest_path>
{	
	init_devices();
	lcd_set_4bit();
	lcd_init();
	
	int pos=0,num=0,v;									//pos: counter for total_path, num: counter for dir[], v: counter for delay loop
    2d74:	44 24       	eor	r4, r4
    2d76:	55 24       	eor	r5, r5
    2d78:	88 24       	eor	r8, r8
    2d7a:	99 24       	eor	r9, r9
		
		if(((value2<250)||(value1<250))||((Center_white_line>60)&&((Right_white_line>60)||(Left_white_line>60))))	//if a node is detected
		{
			velocity(0,0);
			
			if(total_path[pos]==total_path[pos+1])		//a fertilizing unit found
    2d7c:	0f 2e       	mov	r0, r31
    2d7e:	fa e4       	ldi	r31, 0x4A	; 74
    2d80:	6f 2e       	mov	r6, r31
    2d82:	f8 e3       	ldi	r31, 0x38	; 56
    2d84:	7f 2e       	mov	r7, r31
    2d86:	f0 2d       	mov	r31, r0
		}	
			
		
			}
			
			switch(bot_rotate[pos])											//condition for rotating the bot
    2d88:	0f 2e       	mov	r0, r31
    2d8a:	f5 e1       	ldi	r31, 0x15	; 21
    2d8c:	2f 2e       	mov	r2, r31
    2d8e:	fa e3       	ldi	r31, 0x3A	; 58
    2d90:	3f 2e       	mov	r3, r31
    2d92:	f0 2d       	mov	r31, r0
		{					
			//Line following using Proportional Control
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
			x = 250 - 250*(Left_white_line-25)/120;							
    2d94:	0f 2e       	mov	r0, r31
    2d96:	fa ef       	ldi	r31, 0xFA	; 250
    2d98:	cf 2e       	mov	r12, r31
    2d9a:	dd 24       	eor	r13, r13
    2d9c:	f0 2d       	mov	r31, r0
    2d9e:	0f 2e       	mov	r0, r31
    2da0:	f8 e7       	ldi	r31, 0x78	; 120
    2da2:	af 2e       	mov	r10, r31
    2da4:	bb 24       	eor	r11, r11
    2da6:	f0 2d       	mov	r31, r0
	//bot_rotate[100] = {1, 4, 1, 1, 1, 3, 1, 1, 1, 4, 1, 2, 1, 1, 1, 3, 1, 3, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 1, 1};
	//dir[20] = {2, 2, 2, 1, 2, 1, 2, 1, 2, 1};
		
	while(1)
	{
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    2dae:	80 93 32 38 	sts	0x3832, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    2db2:	82 e0       	ldi	r24, 0x02	; 2
    2db4:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    2db8:	80 93 31 38 	sts	0x3831, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    2dc2:	80 93 30 38 	sts	0x3830, r24
		
		sharp1 = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp1"
    2dc6:	89 e0       	ldi	r24, 0x09	; 9
    2dc8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    2dcc:	80 93 fa 39 	sts	0x39FA, r24
		value1 = Sharp_GP2D12_estimation(sharp1);		//converts sharp value to mm units
    2dd0:	0e 94 ab 13 	call	0x2756	; 0x2756 <Sharp_GP2D12_estimation>
    2dd4:	90 93 b0 3b 	sts	0x3BB0, r25
    2dd8:	80 93 af 3b 	sts	0x3BAF, r24

		sharp2 = ADC_Conversion(13);					//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp2"
    2ddc:	8d e0       	ldi	r24, 0x0D	; 13
    2dde:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    2de2:	80 93 14 39 	sts	0x3914, r24
		value2 = Sharp_GP2D12_estimation(sharp2);		//converts sharp value to mm units
    2de6:	0e 94 ab 13 	call	0x2756	; 0x2756 <Sharp_GP2D12_estimation>
    2dea:	90 93 fe 39 	sts	0x39FE, r25
    2dee:	80 93 fd 39 	sts	0x39FD, r24
		
		if(((value2<250)||(value1<250))||((Center_white_line>60)&&((Right_white_line>60)||(Left_white_line>60))))	//if a node is detected
    2df2:	8a 3f       	cpi	r24, 0xFA	; 250
    2df4:	91 05       	cpc	r25, r1
    2df6:	a8 f0       	brcs	.+42     	; 0x2e22 <main+0xfa>
    2df8:	80 91 af 3b 	lds	r24, 0x3BAF
    2dfc:	90 91 b0 3b 	lds	r25, 0x3BB0
    2e00:	8a 3f       	cpi	r24, 0xFA	; 250
    2e02:	91 05       	cpc	r25, r1
    2e04:	70 f0       	brcs	.+28     	; 0x2e22 <main+0xfa>
    2e06:	80 91 31 38 	lds	r24, 0x3831
    2e0a:	8d 33       	cpi	r24, 0x3D	; 61
    2e0c:	08 f4       	brcc	.+2      	; 0x2e10 <main+0xe8>
    2e0e:	88 c1       	rjmp	.+784    	; 0x3120 <main+0x3f8>
    2e10:	80 91 30 38 	lds	r24, 0x3830
    2e14:	8d 33       	cpi	r24, 0x3D	; 61
    2e16:	28 f4       	brcc	.+10     	; 0x2e22 <main+0xfa>
    2e18:	80 91 32 38 	lds	r24, 0x3832
    2e1c:	8d 33       	cpi	r24, 0x3D	; 61
    2e1e:	08 f4       	brcc	.+2      	; 0x2e22 <main+0xfa>
    2e20:	7f c1       	rjmp	.+766    	; 0x3120 <main+0x3f8>
		{
			velocity(0,0);
    2e22:	80 e0       	ldi	r24, 0x00	; 0
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
			
			if(total_path[pos]==total_path[pos+1])		//a fertilizing unit found
    2e2a:	e4 01       	movw	r28, r8
    2e2c:	21 96       	adiw	r28, 0x01	; 1
    2e2e:	c4 01       	movw	r24, r8
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	f3 01       	movw	r30, r6
    2e36:	e8 0f       	add	r30, r24
    2e38:	f9 1f       	adc	r31, r25
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	86 0d       	add	r24, r6
    2e42:	97 1d       	adc	r25, r7
    2e44:	20 81       	ld	r18, Z
    2e46:	31 81       	ldd	r19, Z+1	; 0x01
    2e48:	dc 01       	movw	r26, r24
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	9c 91       	ld	r25, X
    2e4e:	11 97       	sbiw	r26, 0x01	; 1
    2e50:	28 17       	cp	r18, r24
    2e52:	39 07       	cpc	r19, r25
    2e54:	09 f0       	breq	.+2      	; 0x2e58 <main+0x130>
    2e56:	bb c0       	rjmp	.+374    	; 0x2fce <main+0x2a6>
			{
				if(dir[num]==1)							//drop right
    2e58:	c2 01       	movw	r24, r4
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	8f 5f       	subi	r24, 0xFF	; 255
    2e60:	95 4c       	sbci	r25, 0xC5	; 197
    2e62:	fc 01       	movw	r30, r24
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	81 30       	cpi	r24, 0x01	; 1
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	09 f5       	brne	.+66     	; 0x2eb0 <main+0x188>
				{
					velocity(0,0);				 
    2e6e:	80 e0       	ldi	r24, 0x00	; 0
    2e70:	60 e0       	ldi	r22, 0x00	; 0
    2e72:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
					i=27;
					servo_3(i);
    2e76:	8b e1       	ldi	r24, 0x1B	; 27
    2e78:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2e7c:	8f ef       	ldi	r24, 0xFF	; 255
    2e7e:	9f ef       	ldi	r25, 0xFF	; 255
    2e80:	a8 e0       	ldi	r26, 0x08	; 8
    2e82:	81 50       	subi	r24, 0x01	; 1
    2e84:	90 40       	sbci	r25, 0x00	; 0
    2e86:	a0 40       	sbci	r26, 0x00	; 0
    2e88:	e1 f7       	brne	.-8      	; 0x2e82 <main+0x15a>
    2e8a:	00 c0       	rjmp	.+0      	; 0x2e8c <main+0x164>
    2e8c:	00 00       	nop
					_delay_ms(200);
					i=60;
					servo_3(i);
    2e8e:	8c e3       	ldi	r24, 0x3C	; 60
    2e90:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	9f ef       	ldi	r25, 0xFF	; 255
    2e98:	ac e2       	ldi	r26, 0x2C	; 44
    2e9a:	81 50       	subi	r24, 0x01	; 1
    2e9c:	90 40       	sbci	r25, 0x00	; 0
    2e9e:	a0 40       	sbci	r26, 0x00	; 0
    2ea0:	e1 f7       	brne	.-8      	; 0x2e9a <main+0x172>
    2ea2:	00 c0       	rjmp	.+0      	; 0x2ea4 <main+0x17c>
    2ea4:	00 00       	nop
					_delay_ms(1000);
					pos++;
					num++;
    2ea6:	08 94       	sec
    2ea8:	41 1c       	adc	r4, r1
    2eaa:	51 1c       	adc	r5, r1
					servo_3(i);
					_delay_ms(200);
					i=60;
					servo_3(i);
					_delay_ms(1000);
					pos++;
    2eac:	4e 01       	movw	r8, r28
    2eae:	49 c0       	rjmp	.+146    	; 0x2f42 <main+0x21a>
					num++;
				}
				else                                   //drop right
				{
					velocity(0,0);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	60 e0       	ldi	r22, 0x00	; 0
    2eb4:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
					i=87;
					servo_3(i);
    2eb8:	87 e5       	ldi	r24, 0x57	; 87
    2eba:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2ebe:	8f ef       	ldi	r24, 0xFF	; 255
    2ec0:	9f ef       	ldi	r25, 0xFF	; 255
    2ec2:	a8 e0       	ldi	r26, 0x08	; 8
    2ec4:	81 50       	subi	r24, 0x01	; 1
    2ec6:	90 40       	sbci	r25, 0x00	; 0
    2ec8:	a0 40       	sbci	r26, 0x00	; 0
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <main+0x19c>
    2ecc:	00 c0       	rjmp	.+0      	; 0x2ece <main+0x1a6>
    2ece:	00 00       	nop
					_delay_ms(200);
					i=60;
					servo_3(i);
    2ed0:	8c e3       	ldi	r24, 0x3C	; 60
    2ed2:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2ed6:	8f ef       	ldi	r24, 0xFF	; 255
    2ed8:	9f ef       	ldi	r25, 0xFF	; 255
    2eda:	ac e2       	ldi	r26, 0x2C	; 44
    2edc:	81 50       	subi	r24, 0x01	; 1
    2ede:	90 40       	sbci	r25, 0x00	; 0
    2ee0:	a0 40       	sbci	r26, 0x00	; 0
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <main+0x1b4>
    2ee4:	00 c0       	rjmp	.+0      	; 0x2ee6 <main+0x1be>
    2ee6:	00 00       	nop
					_delay_ms(1000);
					pos++;
					num++;
    2ee8:	c2 01       	movw	r24, r4
    2eea:	01 96       	adiw	r24, 0x01	; 1
					if((num==7)||(num==9))				//condition for fertilizing plants on both left and right
    2eec:	87 30       	cpi	r24, 0x07	; 7
    2eee:	91 05       	cpc	r25, r1
    2ef0:	19 f0       	breq	.+6      	; 0x2ef8 <main+0x1d0>
    2ef2:	89 30       	cpi	r24, 0x09	; 9
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	19 f5       	brne	.+70     	; 0x2f3e <main+0x216>
					{
						velocity(0,0);				 
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
						i=27;
						servo_3(i);
    2f00:	8b e1       	ldi	r24, 0x1B	; 27
    2f02:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2f06:	8f ef       	ldi	r24, 0xFF	; 255
    2f08:	9f ef       	ldi	r25, 0xFF	; 255
    2f0a:	a1 e1       	ldi	r26, 0x11	; 17
    2f0c:	81 50       	subi	r24, 0x01	; 1
    2f0e:	90 40       	sbci	r25, 0x00	; 0
    2f10:	a0 40       	sbci	r26, 0x00	; 0
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <main+0x1e4>
    2f14:	00 c0       	rjmp	.+0      	; 0x2f16 <main+0x1ee>
    2f16:	00 00       	nop
						_delay_ms(400);
						i=60;
						servo_3(i);
    2f18:	8c e3       	ldi	r24, 0x3C	; 60
    2f1a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <servo_3>
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	9f ef       	ldi	r25, 0xFF	; 255
    2f22:	ac e2       	ldi	r26, 0x2C	; 44
    2f24:	81 50       	subi	r24, 0x01	; 1
    2f26:	90 40       	sbci	r25, 0x00	; 0
    2f28:	a0 40       	sbci	r26, 0x00	; 0
    2f2a:	e1 f7       	brne	.-8      	; 0x2f24 <main+0x1fc>
    2f2c:	00 c0       	rjmp	.+0      	; 0x2f2e <main+0x206>
    2f2e:	00 00       	nop
						_delay_ms(1000);
						pos++;
    2f30:	a2 e0       	ldi	r26, 0x02	; 2
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	8a 0e       	add	r8, r26
    2f36:	9b 1e       	adc	r9, r27
						num++;
    2f38:	4a 0e       	add	r4, r26
    2f3a:	5b 1e       	adc	r5, r27
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <main+0x21a>
					_delay_ms(200);
					i=60;
					servo_3(i);
					_delay_ms(1000);
					pos++;
					num++;
    2f3e:	2c 01       	movw	r4, r24
					servo_3(i);
					_delay_ms(200);
					i=60;
					servo_3(i);
					_delay_ms(1000);
					pos++;
    2f40:	4e 01       	movw	r8, r28
						_delay_ms(1000);
						pos++;
						num++;
					}
				}
		if((num==3)||(num==6))							//500ms buzzer at the end of tuples
    2f42:	b3 e0       	ldi	r27, 0x03	; 3
    2f44:	4b 16       	cp	r4, r27
    2f46:	51 04       	cpc	r5, r1
    2f48:	21 f0       	breq	.+8      	; 0x2f52 <main+0x22a>
    2f4a:	e6 e0       	ldi	r30, 0x06	; 6
    2f4c:	4e 16       	cp	r4, r30
    2f4e:	51 04       	cpc	r5, r1
    2f50:	69 f4       	brne	.+26     	; 0x2f6c <main+0x244>
		{
			buzzer_on();
    2f52:	0e 94 26 14 	call	0x284c	; 0x284c <buzzer_on>
    2f56:	8f ef       	ldi	r24, 0xFF	; 255
    2f58:	9f e7       	ldi	r25, 0x7F	; 127
    2f5a:	a6 e1       	ldi	r26, 0x16	; 22
    2f5c:	81 50       	subi	r24, 0x01	; 1
    2f5e:	90 40       	sbci	r25, 0x00	; 0
    2f60:	a0 40       	sbci	r26, 0x00	; 0
    2f62:	e1 f7       	brne	.-8      	; 0x2f5c <main+0x234>
    2f64:	00 c0       	rjmp	.+0      	; 0x2f66 <main+0x23e>
    2f66:	00 00       	nop
			_delay_ms(500);		
			buzzer_off();
    2f68:	0e 94 2a 14 	call	0x2854	; 0x2854 <buzzer_off>
		}
		if(num==10)										//5sec buzzer at the end of task
    2f6c:	9a e0       	ldi	r25, 0x0A	; 10
    2f6e:	49 16       	cp	r4, r25
    2f70:	51 04       	cpc	r5, r1
    2f72:	69 f5       	brne	.+90     	; 0x2fce <main+0x2a6>
		{
			buzzer_on();
    2f74:	0e 94 26 14 	call	0x284c	; 0x284c <buzzer_on>
			stop();
    2f78:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
    2f7c:	8f ef       	ldi	r24, 0xFF	; 255
    2f7e:	9f ef       	ldi	r25, 0xFF	; 255
    2f80:	a0 ee       	ldi	r26, 0xE0	; 224
    2f82:	81 50       	subi	r24, 0x01	; 1
    2f84:	90 40       	sbci	r25, 0x00	; 0
    2f86:	a0 40       	sbci	r26, 0x00	; 0
    2f88:	e1 f7       	brne	.-8      	; 0x2f82 <main+0x25a>
    2f8a:	00 c0       	rjmp	.+0      	; 0x2f8c <main+0x264>
    2f8c:	00 00       	nop
			_delay_ms(5000);		
			buzzer_off();
    2f8e:	0e 94 2a 14 	call	0x2854	; 0x2854 <buzzer_off>
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	9f ef       	ldi	r25, 0xFF	; 255
    2f96:	a0 ee       	ldi	r26, 0xE0	; 224
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	90 40       	sbci	r25, 0x00	; 0
    2f9c:	a0 40       	sbci	r26, 0x00	; 0
    2f9e:	e1 f7       	brne	.-8      	; 0x2f98 <main+0x270>
    2fa0:	00 c0       	rjmp	.+0      	; 0x2fa2 <main+0x27a>
    2fa2:	00 00       	nop
		forward();
		velocity(x,y);
		}
		
	}
}
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	ff 90       	pop	r15
    2fb2:	ef 90       	pop	r14
    2fb4:	df 90       	pop	r13
    2fb6:	cf 90       	pop	r12
    2fb8:	bf 90       	pop	r11
    2fba:	af 90       	pop	r10
    2fbc:	9f 90       	pop	r9
    2fbe:	8f 90       	pop	r8
    2fc0:	7f 90       	pop	r7
    2fc2:	6f 90       	pop	r6
    2fc4:	5f 90       	pop	r5
    2fc6:	4f 90       	pop	r4
    2fc8:	3f 90       	pop	r3
    2fca:	2f 90       	pop	r2
    2fcc:	08 95       	ret
		}	
			
		
			}
			
			switch(bot_rotate[pos])											//condition for rotating the bot
    2fce:	c4 01       	movw	r24, r8
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	82 0d       	add	r24, r2
    2fd6:	93 1d       	adc	r25, r3
    2fd8:	dc 01       	movw	r26, r24
    2fda:	8d 91       	ld	r24, X+
    2fdc:	9c 91       	ld	r25, X
    2fde:	11 97       	sbiw	r26, 0x01	; 1
    2fe0:	83 30       	cpi	r24, 0x03	; 3
    2fe2:	91 05       	cpc	r25, r1
    2fe4:	f9 f0       	breq	.+62     	; 0x3024 <main+0x2fc>
    2fe6:	84 30       	cpi	r24, 0x04	; 4
    2fe8:	91 05       	cpc	r25, r1
    2fea:	81 f1       	breq	.+96     	; 0x304c <main+0x324>
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	91 05       	cpc	r25, r1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <main+0x2cc>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <main+0x352>
    2ff4:	c0 e0       	ldi	r28, 0x00	; 0
    2ff6:	d0 e0       	ldi	r29, 0x00	; 0
			{
				case 1:		break;											//move forward without rorating
				case 2:		in_count=0;										//90 degree right turn
							while(1)
							{
								in_count++;
    2ff8:	21 96       	adiw	r28, 0x01	; 1
								soft_right_degrees(5);
    2ffa:	85 e0       	ldi	r24, 0x05	; 5
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	0e 94 ef 15 	call	0x2bde	; 0x2bde <soft_right_degrees>
								stop();
    3002:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
								Center_white_line = ADC_Conversion(1);
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    300c:	80 93 31 38 	sts	0x3831, r24
								if((Center_white_line>60)&&(in_count>3))
    3010:	8d 33       	cpi	r24, 0x3D	; 61
    3012:	90 f3       	brcs	.-28     	; 0x2ff8 <main+0x2d0>
    3014:	c4 30       	cpi	r28, 0x04	; 4
    3016:	d1 05       	cpc	r29, r1
    3018:	78 f3       	brcs	.-34     	; 0x2ff8 <main+0x2d0>
									break;
							}
							velocity(0,0);
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	60 e0       	ldi	r22, 0x00	; 0
    301e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
							break;
    3022:	2b c0       	rjmp	.+86     	; 0x307a <main+0x352>
		}	
			
		
			}
			
			switch(bot_rotate[pos])											//condition for rotating the bot
    3024:	c0 e0       	ldi	r28, 0x00	; 0
    3026:	d0 e0       	ldi	r29, 0x00	; 0
							break;
							
				case 3:		in_count=0;										//180 degree turn
							while(1)
							{
								in_count++;
    3028:	21 96       	adiw	r28, 0x01	; 1
								right_degrees(5);
    302a:	85 e0       	ldi	r24, 0x05	; 5
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <right_degrees>
								stop();
    3032:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
								Right_white_line = ADC_Conversion(2);
    3036:	82 e0       	ldi	r24, 0x02	; 2
    3038:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    303c:	80 93 30 38 	sts	0x3830, r24
								if((Right_white_line>60)&&(in_count>3))
    3040:	8d 33       	cpi	r24, 0x3D	; 61
    3042:	90 f3       	brcs	.-28     	; 0x3028 <main+0x300>
    3044:	c4 30       	cpi	r28, 0x04	; 4
    3046:	d1 05       	cpc	r29, r1
    3048:	78 f3       	brcs	.-34     	; 0x3028 <main+0x300>
    304a:	17 c0       	rjmp	.+46     	; 0x307a <main+0x352>
		}	
			
		
			}
			
			switch(bot_rotate[pos])											//condition for rotating the bot
    304c:	c0 e0       	ldi	r28, 0x00	; 0
    304e:	d0 e0       	ldi	r29, 0x00	; 0
						break;
						
				case 4:	in_count=0;											//90 degree left turn
						while(1)
							{
								in_count++;
    3050:	21 96       	adiw	r28, 0x01	; 1
								soft_left_degrees(5);
    3052:	85 e0       	ldi	r24, 0x05	; 5
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <soft_left_degrees>
								stop();
    305a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <stop>
								Center_white_line = ADC_Conversion(3);
    305e:	83 e0       	ldi	r24, 0x03	; 3
    3060:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    3064:	80 93 31 38 	sts	0x3831, r24
								if((Center_white_line>60)&&(in_count>3))
    3068:	8d 33       	cpi	r24, 0x3D	; 61
    306a:	90 f3       	brcs	.-28     	; 0x3050 <main+0x328>
    306c:	c4 30       	cpi	r28, 0x04	; 4
    306e:	d1 05       	cpc	r29, r1
    3070:	78 f3       	brcs	.-34     	; 0x3050 <main+0x328>
									break;
							}
						velocity(0,0);
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
						break;
			}
			pos++;
    307a:	08 94       	sec
    307c:	81 1c       	adc	r8, r1
    307e:	91 1c       	adc	r9, r1
    3080:	0f 2e       	mov	r0, r31
    3082:	fe eb       	ldi	r31, 0xBE	; 190
    3084:	ef 2e       	mov	r14, r31
    3086:	fa e0       	ldi	r31, 0x0A	; 10
    3088:	ff 2e       	mov	r15, r31
    308a:	f0 2d       	mov	r31, r0
			
		for(v=0;v<2750;v++)													//Delay Loop: Providing a delay after detecting a node before detecting the next one
		{					
			//Line following using Proportional Control
			Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    3092:	80 93 32 38 	sts	0x3832, r24
			Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    3096:	82 e0       	ldi	r24, 0x02	; 2
    3098:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    309c:	80 93 31 38 	sts	0x3831, r24
			Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    30a6:	48 2f       	mov	r20, r24
    30a8:	80 93 30 38 	sts	0x3830, r24
			x = 250 - 250*(Left_white_line-25)/120;							
    30ac:	80 91 32 38 	lds	r24, 0x3832
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	8c 9d       	mul	r24, r12
    30b4:	90 01       	movw	r18, r0
    30b6:	8d 9d       	mul	r24, r13
    30b8:	30 0d       	add	r19, r0
    30ba:	9c 9d       	mul	r25, r12
    30bc:	30 0d       	add	r19, r0
    30be:	11 24       	eor	r1, r1
    30c0:	c9 01       	movw	r24, r18
    30c2:	8a 56       	subi	r24, 0x6A	; 106
    30c4:	98 41       	sbci	r25, 0x18	; 24
    30c6:	b5 01       	movw	r22, r10
    30c8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
    30cc:	fb 01       	movw	r30, r22
			y = 250 -250*(Right_white_line-25)/120;
    30ce:	84 2f       	mov	r24, r20
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	8c 9d       	mul	r24, r12
    30d4:	90 01       	movw	r18, r0
    30d6:	8d 9d       	mul	r24, r13
    30d8:	30 0d       	add	r19, r0
    30da:	9c 9d       	mul	r25, r12
    30dc:	30 0d       	add	r19, r0
    30de:	11 24       	eor	r1, r1
    30e0:	c9 01       	movw	r24, r18
    30e2:	8a 56       	subi	r24, 0x6A	; 106
    30e4:	98 41       	sbci	r25, 0x18	; 24
    30e6:	b5 01       	movw	r22, r10
    30e8:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
    30ec:	86 01       	movw	r16, r12
    30ee:	06 1b       	sub	r16, r22
    30f0:	17 0b       	sbc	r17, r23
			x = mod(x);														//so that velocity doesnot exceed 255
    30f2:	c6 01       	movw	r24, r12
    30f4:	8e 1b       	sub	r24, r30
    30f6:	9f 0b       	sbc	r25, r31
    30f8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <mod>
    30fc:	c8 2f       	mov	r28, r24
			y = mod(y);														//so that velocity doesnot exceed 255
    30fe:	c8 01       	movw	r24, r16
    3100:	0e 94 29 16 	call	0x2c52	; 0x2c52 <mod>
    3104:	d8 2f       	mov	r29, r24
			forward();
    3106:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <forward>
			velocity(x,y);
    310a:	8c 2f       	mov	r24, r28
    310c:	6d 2f       	mov	r22, r29
    310e:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
    3112:	08 94       	sec
    3114:	e1 08       	sbc	r14, r1
    3116:	f1 08       	sbc	r15, r1
						velocity(0,0);
						break;
			}
			pos++;
			
		for(v=0;v<2750;v++)													//Delay Loop: Providing a delay after detecting a node before detecting the next one
    3118:	e1 14       	cp	r14, r1
    311a:	f1 04       	cpc	r15, r1
    311c:	09 f0       	breq	.+2      	; 0x3120 <main+0x3f8>
    311e:	b6 cf       	rjmp	.-148    	; 0x308c <main+0x364>
			forward();
			velocity(x,y);
			}
		}
		
		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
    3120:	83 e0       	ldi	r24, 0x03	; 3
    3122:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    3126:	80 93 32 38 	sts	0x3832, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
    312a:	82 e0       	ldi	r24, 0x02	; 2
    312c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    3130:	80 93 31 38 	sts	0x3831, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	0e 94 d5 14 	call	0x29aa	; 0x29aa <ADC_Conversion>
    313a:	48 2f       	mov	r20, r24
    313c:	80 93 30 38 	sts	0x3830, r24

		//Line following using Proportional Control
		if(Center_white_line>60)											
    3140:	80 91 31 38 	lds	r24, 0x3831
    3144:	8d 33       	cpi	r24, 0x3D	; 61
    3146:	50 f0       	brcs	.+20     	; 0x315c <main+0x434>
		{
			flag=1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	80 93 33 38 	sts	0x3833, r24
			forward();
    314e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <forward>
			velocity(220,220);
    3152:	8c ed       	ldi	r24, 0xDC	; 220
    3154:	6c ed       	ldi	r22, 0xDC	; 220
    3156:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
    315a:	26 ce       	rjmp	.-948    	; 0x2da8 <main+0x80>
		}
		else{					
		x = 250 - 250*(Left_white_line-25)/120;
    315c:	80 91 32 38 	lds	r24, 0x3832
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	8c 9d       	mul	r24, r12
    3164:	90 01       	movw	r18, r0
    3166:	8d 9d       	mul	r24, r13
    3168:	30 0d       	add	r19, r0
    316a:	9c 9d       	mul	r25, r12
    316c:	30 0d       	add	r19, r0
    316e:	11 24       	eor	r1, r1
    3170:	c9 01       	movw	r24, r18
    3172:	8a 56       	subi	r24, 0x6A	; 106
    3174:	98 41       	sbci	r25, 0x18	; 24
    3176:	b5 01       	movw	r22, r10
    3178:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
    317c:	fb 01       	movw	r30, r22
		y = 250 -250*(Right_white_line-25)/120;
    317e:	84 2f       	mov	r24, r20
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	8c 9d       	mul	r24, r12
    3184:	90 01       	movw	r18, r0
    3186:	8d 9d       	mul	r24, r13
    3188:	30 0d       	add	r19, r0
    318a:	9c 9d       	mul	r25, r12
    318c:	30 0d       	add	r19, r0
    318e:	11 24       	eor	r1, r1
    3190:	c9 01       	movw	r24, r18
    3192:	8a 56       	subi	r24, 0x6A	; 106
    3194:	98 41       	sbci	r25, 0x18	; 24
    3196:	b5 01       	movw	r22, r10
    3198:	0e 94 4a 1c 	call	0x3894	; 0x3894 <__divmodhi4>
    319c:	e6 01       	movw	r28, r12
    319e:	c6 1b       	sub	r28, r22
    31a0:	d7 0b       	sbc	r29, r23
		x = mod(x);
    31a2:	c6 01       	movw	r24, r12
    31a4:	8e 1b       	sub	r24, r30
    31a6:	9f 0b       	sbc	r25, r31
    31a8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <mod>
    31ac:	08 2f       	mov	r16, r24
		y = mod(y);
    31ae:	ce 01       	movw	r24, r28
    31b0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <mod>
    31b4:	c8 2f       	mov	r28, r24
		forward();
    31b6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <forward>
		velocity(x,y);
    31ba:	80 2f       	mov	r24, r16
    31bc:	6c 2f       	mov	r22, r28
    31be:	0e 94 04 15 	call	0x2a08	; 0x2a08 <velocity>
    31c2:	f2 cd       	rjmp	.-1052   	; 0x2da8 <main+0x80>

000031c4 <__subsf3>:
    31c4:	50 58       	subi	r21, 0x80	; 128

000031c6 <__addsf3>:
    31c6:	bb 27       	eor	r27, r27
    31c8:	aa 27       	eor	r26, r26
    31ca:	0e d0       	rcall	.+28     	; 0x31e8 <__addsf3x>
    31cc:	4d c1       	rjmp	.+666    	; 0x3468 <__fp_round>
    31ce:	3e d1       	rcall	.+636    	; 0x344c <__fp_pscA>
    31d0:	30 f0       	brcs	.+12     	; 0x31de <__addsf3+0x18>
    31d2:	43 d1       	rcall	.+646    	; 0x345a <__fp_pscB>
    31d4:	20 f0       	brcs	.+8      	; 0x31de <__addsf3+0x18>
    31d6:	31 f4       	brne	.+12     	; 0x31e4 <__addsf3+0x1e>
    31d8:	9f 3f       	cpi	r25, 0xFF	; 255
    31da:	11 f4       	brne	.+4      	; 0x31e0 <__addsf3+0x1a>
    31dc:	1e f4       	brtc	.+6      	; 0x31e4 <__addsf3+0x1e>
    31de:	33 c1       	rjmp	.+614    	; 0x3446 <__fp_nan>
    31e0:	0e f4       	brtc	.+2      	; 0x31e4 <__addsf3+0x1e>
    31e2:	e0 95       	com	r30
    31e4:	e7 fb       	bst	r30, 7
    31e6:	29 c1       	rjmp	.+594    	; 0x343a <__fp_inf>

000031e8 <__addsf3x>:
    31e8:	e9 2f       	mov	r30, r25
    31ea:	4f d1       	rcall	.+670    	; 0x348a <__fp_split3>
    31ec:	80 f3       	brcs	.-32     	; 0x31ce <__addsf3+0x8>
    31ee:	ba 17       	cp	r27, r26
    31f0:	62 07       	cpc	r22, r18
    31f2:	73 07       	cpc	r23, r19
    31f4:	84 07       	cpc	r24, r20
    31f6:	95 07       	cpc	r25, r21
    31f8:	18 f0       	brcs	.+6      	; 0x3200 <__addsf3x+0x18>
    31fa:	71 f4       	brne	.+28     	; 0x3218 <__addsf3x+0x30>
    31fc:	9e f5       	brtc	.+102    	; 0x3264 <__addsf3x+0x7c>
    31fe:	67 c1       	rjmp	.+718    	; 0x34ce <__fp_zero>
    3200:	0e f4       	brtc	.+2      	; 0x3204 <__addsf3x+0x1c>
    3202:	e0 95       	com	r30
    3204:	0b 2e       	mov	r0, r27
    3206:	ba 2f       	mov	r27, r26
    3208:	a0 2d       	mov	r26, r0
    320a:	0b 01       	movw	r0, r22
    320c:	b9 01       	movw	r22, r18
    320e:	90 01       	movw	r18, r0
    3210:	0c 01       	movw	r0, r24
    3212:	ca 01       	movw	r24, r20
    3214:	a0 01       	movw	r20, r0
    3216:	11 24       	eor	r1, r1
    3218:	ff 27       	eor	r31, r31
    321a:	59 1b       	sub	r21, r25
    321c:	99 f0       	breq	.+38     	; 0x3244 <__addsf3x+0x5c>
    321e:	59 3f       	cpi	r21, 0xF9	; 249
    3220:	50 f4       	brcc	.+20     	; 0x3236 <__addsf3x+0x4e>
    3222:	50 3e       	cpi	r21, 0xE0	; 224
    3224:	68 f1       	brcs	.+90     	; 0x3280 <__addsf3x+0x98>
    3226:	1a 16       	cp	r1, r26
    3228:	f0 40       	sbci	r31, 0x00	; 0
    322a:	a2 2f       	mov	r26, r18
    322c:	23 2f       	mov	r18, r19
    322e:	34 2f       	mov	r19, r20
    3230:	44 27       	eor	r20, r20
    3232:	58 5f       	subi	r21, 0xF8	; 248
    3234:	f3 cf       	rjmp	.-26     	; 0x321c <__addsf3x+0x34>
    3236:	46 95       	lsr	r20
    3238:	37 95       	ror	r19
    323a:	27 95       	ror	r18
    323c:	a7 95       	ror	r26
    323e:	f0 40       	sbci	r31, 0x00	; 0
    3240:	53 95       	inc	r21
    3242:	c9 f7       	brne	.-14     	; 0x3236 <__addsf3x+0x4e>
    3244:	7e f4       	brtc	.+30     	; 0x3264 <__addsf3x+0x7c>
    3246:	1f 16       	cp	r1, r31
    3248:	ba 0b       	sbc	r27, r26
    324a:	62 0b       	sbc	r22, r18
    324c:	73 0b       	sbc	r23, r19
    324e:	84 0b       	sbc	r24, r20
    3250:	ba f0       	brmi	.+46     	; 0x3280 <__addsf3x+0x98>
    3252:	91 50       	subi	r25, 0x01	; 1
    3254:	a1 f0       	breq	.+40     	; 0x327e <__addsf3x+0x96>
    3256:	ff 0f       	add	r31, r31
    3258:	bb 1f       	adc	r27, r27
    325a:	66 1f       	adc	r22, r22
    325c:	77 1f       	adc	r23, r23
    325e:	88 1f       	adc	r24, r24
    3260:	c2 f7       	brpl	.-16     	; 0x3252 <__addsf3x+0x6a>
    3262:	0e c0       	rjmp	.+28     	; 0x3280 <__addsf3x+0x98>
    3264:	ba 0f       	add	r27, r26
    3266:	62 1f       	adc	r22, r18
    3268:	73 1f       	adc	r23, r19
    326a:	84 1f       	adc	r24, r20
    326c:	48 f4       	brcc	.+18     	; 0x3280 <__addsf3x+0x98>
    326e:	87 95       	ror	r24
    3270:	77 95       	ror	r23
    3272:	67 95       	ror	r22
    3274:	b7 95       	ror	r27
    3276:	f7 95       	ror	r31
    3278:	9e 3f       	cpi	r25, 0xFE	; 254
    327a:	08 f0       	brcs	.+2      	; 0x327e <__addsf3x+0x96>
    327c:	b3 cf       	rjmp	.-154    	; 0x31e4 <__addsf3+0x1e>
    327e:	93 95       	inc	r25
    3280:	88 0f       	add	r24, r24
    3282:	08 f0       	brcs	.+2      	; 0x3286 <__addsf3x+0x9e>
    3284:	99 27       	eor	r25, r25
    3286:	ee 0f       	add	r30, r30
    3288:	97 95       	ror	r25
    328a:	87 95       	ror	r24
    328c:	08 95       	ret

0000328e <__divsf3>:
    328e:	0c d0       	rcall	.+24     	; 0x32a8 <__divsf3x>
    3290:	eb c0       	rjmp	.+470    	; 0x3468 <__fp_round>
    3292:	e3 d0       	rcall	.+454    	; 0x345a <__fp_pscB>
    3294:	40 f0       	brcs	.+16     	; 0x32a6 <__divsf3+0x18>
    3296:	da d0       	rcall	.+436    	; 0x344c <__fp_pscA>
    3298:	30 f0       	brcs	.+12     	; 0x32a6 <__divsf3+0x18>
    329a:	21 f4       	brne	.+8      	; 0x32a4 <__divsf3+0x16>
    329c:	5f 3f       	cpi	r21, 0xFF	; 255
    329e:	19 f0       	breq	.+6      	; 0x32a6 <__divsf3+0x18>
    32a0:	cc c0       	rjmp	.+408    	; 0x343a <__fp_inf>
    32a2:	51 11       	cpse	r21, r1
    32a4:	15 c1       	rjmp	.+554    	; 0x34d0 <__fp_szero>
    32a6:	cf c0       	rjmp	.+414    	; 0x3446 <__fp_nan>

000032a8 <__divsf3x>:
    32a8:	f0 d0       	rcall	.+480    	; 0x348a <__fp_split3>
    32aa:	98 f3       	brcs	.-26     	; 0x3292 <__divsf3+0x4>

000032ac <__divsf3_pse>:
    32ac:	99 23       	and	r25, r25
    32ae:	c9 f3       	breq	.-14     	; 0x32a2 <__divsf3+0x14>
    32b0:	55 23       	and	r21, r21
    32b2:	b1 f3       	breq	.-20     	; 0x32a0 <__divsf3+0x12>
    32b4:	95 1b       	sub	r25, r21
    32b6:	55 0b       	sbc	r21, r21
    32b8:	bb 27       	eor	r27, r27
    32ba:	aa 27       	eor	r26, r26
    32bc:	62 17       	cp	r22, r18
    32be:	73 07       	cpc	r23, r19
    32c0:	84 07       	cpc	r24, r20
    32c2:	38 f0       	brcs	.+14     	; 0x32d2 <__divsf3_pse+0x26>
    32c4:	9f 5f       	subi	r25, 0xFF	; 255
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	22 0f       	add	r18, r18
    32ca:	33 1f       	adc	r19, r19
    32cc:	44 1f       	adc	r20, r20
    32ce:	aa 1f       	adc	r26, r26
    32d0:	a9 f3       	breq	.-22     	; 0x32bc <__divsf3_pse+0x10>
    32d2:	33 d0       	rcall	.+102    	; 0x333a <__divsf3_pse+0x8e>
    32d4:	0e 2e       	mov	r0, r30
    32d6:	3a f0       	brmi	.+14     	; 0x32e6 <__divsf3_pse+0x3a>
    32d8:	e0 e8       	ldi	r30, 0x80	; 128
    32da:	30 d0       	rcall	.+96     	; 0x333c <__divsf3_pse+0x90>
    32dc:	91 50       	subi	r25, 0x01	; 1
    32de:	50 40       	sbci	r21, 0x00	; 0
    32e0:	e6 95       	lsr	r30
    32e2:	00 1c       	adc	r0, r0
    32e4:	ca f7       	brpl	.-14     	; 0x32d8 <__divsf3_pse+0x2c>
    32e6:	29 d0       	rcall	.+82     	; 0x333a <__divsf3_pse+0x8e>
    32e8:	fe 2f       	mov	r31, r30
    32ea:	27 d0       	rcall	.+78     	; 0x333a <__divsf3_pse+0x8e>
    32ec:	66 0f       	add	r22, r22
    32ee:	77 1f       	adc	r23, r23
    32f0:	88 1f       	adc	r24, r24
    32f2:	bb 1f       	adc	r27, r27
    32f4:	26 17       	cp	r18, r22
    32f6:	37 07       	cpc	r19, r23
    32f8:	48 07       	cpc	r20, r24
    32fa:	ab 07       	cpc	r26, r27
    32fc:	b0 e8       	ldi	r27, 0x80	; 128
    32fe:	09 f0       	breq	.+2      	; 0x3302 <__divsf3_pse+0x56>
    3300:	bb 0b       	sbc	r27, r27
    3302:	80 2d       	mov	r24, r0
    3304:	bf 01       	movw	r22, r30
    3306:	ff 27       	eor	r31, r31
    3308:	93 58       	subi	r25, 0x83	; 131
    330a:	5f 4f       	sbci	r21, 0xFF	; 255
    330c:	2a f0       	brmi	.+10     	; 0x3318 <__divsf3_pse+0x6c>
    330e:	9e 3f       	cpi	r25, 0xFE	; 254
    3310:	51 05       	cpc	r21, r1
    3312:	68 f0       	brcs	.+26     	; 0x332e <__divsf3_pse+0x82>
    3314:	92 c0       	rjmp	.+292    	; 0x343a <__fp_inf>
    3316:	dc c0       	rjmp	.+440    	; 0x34d0 <__fp_szero>
    3318:	5f 3f       	cpi	r21, 0xFF	; 255
    331a:	ec f3       	brlt	.-6      	; 0x3316 <__divsf3_pse+0x6a>
    331c:	98 3e       	cpi	r25, 0xE8	; 232
    331e:	dc f3       	brlt	.-10     	; 0x3316 <__divsf3_pse+0x6a>
    3320:	86 95       	lsr	r24
    3322:	77 95       	ror	r23
    3324:	67 95       	ror	r22
    3326:	b7 95       	ror	r27
    3328:	f7 95       	ror	r31
    332a:	9f 5f       	subi	r25, 0xFF	; 255
    332c:	c9 f7       	brne	.-14     	; 0x3320 <__divsf3_pse+0x74>
    332e:	88 0f       	add	r24, r24
    3330:	91 1d       	adc	r25, r1
    3332:	96 95       	lsr	r25
    3334:	87 95       	ror	r24
    3336:	97 f9       	bld	r25, 7
    3338:	08 95       	ret
    333a:	e1 e0       	ldi	r30, 0x01	; 1
    333c:	66 0f       	add	r22, r22
    333e:	77 1f       	adc	r23, r23
    3340:	88 1f       	adc	r24, r24
    3342:	bb 1f       	adc	r27, r27
    3344:	62 17       	cp	r22, r18
    3346:	73 07       	cpc	r23, r19
    3348:	84 07       	cpc	r24, r20
    334a:	ba 07       	cpc	r27, r26
    334c:	20 f0       	brcs	.+8      	; 0x3356 <__divsf3_pse+0xaa>
    334e:	62 1b       	sub	r22, r18
    3350:	73 0b       	sbc	r23, r19
    3352:	84 0b       	sbc	r24, r20
    3354:	ba 0b       	sbc	r27, r26
    3356:	ee 1f       	adc	r30, r30
    3358:	88 f7       	brcc	.-30     	; 0x333c <__divsf3_pse+0x90>
    335a:	e0 95       	com	r30
    335c:	08 95       	ret

0000335e <__fixsfsi>:
    335e:	04 d0       	rcall	.+8      	; 0x3368 <__fixunssfsi>
    3360:	68 94       	set
    3362:	b1 11       	cpse	r27, r1
    3364:	b5 c0       	rjmp	.+362    	; 0x34d0 <__fp_szero>
    3366:	08 95       	ret

00003368 <__fixunssfsi>:
    3368:	98 d0       	rcall	.+304    	; 0x349a <__fp_splitA>
    336a:	88 f0       	brcs	.+34     	; 0x338e <__fixunssfsi+0x26>
    336c:	9f 57       	subi	r25, 0x7F	; 127
    336e:	90 f0       	brcs	.+36     	; 0x3394 <__fixunssfsi+0x2c>
    3370:	b9 2f       	mov	r27, r25
    3372:	99 27       	eor	r25, r25
    3374:	b7 51       	subi	r27, 0x17	; 23
    3376:	a0 f0       	brcs	.+40     	; 0x33a0 <__fixunssfsi+0x38>
    3378:	d1 f0       	breq	.+52     	; 0x33ae <__fixunssfsi+0x46>
    337a:	66 0f       	add	r22, r22
    337c:	77 1f       	adc	r23, r23
    337e:	88 1f       	adc	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	1a f0       	brmi	.+6      	; 0x338a <__fixunssfsi+0x22>
    3384:	ba 95       	dec	r27
    3386:	c9 f7       	brne	.-14     	; 0x337a <__fixunssfsi+0x12>
    3388:	12 c0       	rjmp	.+36     	; 0x33ae <__fixunssfsi+0x46>
    338a:	b1 30       	cpi	r27, 0x01	; 1
    338c:	81 f0       	breq	.+32     	; 0x33ae <__fixunssfsi+0x46>
    338e:	9f d0       	rcall	.+318    	; 0x34ce <__fp_zero>
    3390:	b1 e0       	ldi	r27, 0x01	; 1
    3392:	08 95       	ret
    3394:	9c c0       	rjmp	.+312    	; 0x34ce <__fp_zero>
    3396:	67 2f       	mov	r22, r23
    3398:	78 2f       	mov	r23, r24
    339a:	88 27       	eor	r24, r24
    339c:	b8 5f       	subi	r27, 0xF8	; 248
    339e:	39 f0       	breq	.+14     	; 0x33ae <__fixunssfsi+0x46>
    33a0:	b9 3f       	cpi	r27, 0xF9	; 249
    33a2:	cc f3       	brlt	.-14     	; 0x3396 <__fixunssfsi+0x2e>
    33a4:	86 95       	lsr	r24
    33a6:	77 95       	ror	r23
    33a8:	67 95       	ror	r22
    33aa:	b3 95       	inc	r27
    33ac:	d9 f7       	brne	.-10     	; 0x33a4 <__fixunssfsi+0x3c>
    33ae:	3e f4       	brtc	.+14     	; 0x33be <__fixunssfsi+0x56>
    33b0:	90 95       	com	r25
    33b2:	80 95       	com	r24
    33b4:	70 95       	com	r23
    33b6:	61 95       	neg	r22
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	8f 4f       	sbci	r24, 0xFF	; 255
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	08 95       	ret

000033c0 <__floatunsisf>:
    33c0:	e8 94       	clt
    33c2:	09 c0       	rjmp	.+18     	; 0x33d6 <__floatsisf+0x12>

000033c4 <__floatsisf>:
    33c4:	97 fb       	bst	r25, 7
    33c6:	3e f4       	brtc	.+14     	; 0x33d6 <__floatsisf+0x12>
    33c8:	90 95       	com	r25
    33ca:	80 95       	com	r24
    33cc:	70 95       	com	r23
    33ce:	61 95       	neg	r22
    33d0:	7f 4f       	sbci	r23, 0xFF	; 255
    33d2:	8f 4f       	sbci	r24, 0xFF	; 255
    33d4:	9f 4f       	sbci	r25, 0xFF	; 255
    33d6:	99 23       	and	r25, r25
    33d8:	a9 f0       	breq	.+42     	; 0x3404 <__floatsisf+0x40>
    33da:	f9 2f       	mov	r31, r25
    33dc:	96 e9       	ldi	r25, 0x96	; 150
    33de:	bb 27       	eor	r27, r27
    33e0:	93 95       	inc	r25
    33e2:	f6 95       	lsr	r31
    33e4:	87 95       	ror	r24
    33e6:	77 95       	ror	r23
    33e8:	67 95       	ror	r22
    33ea:	b7 95       	ror	r27
    33ec:	f1 11       	cpse	r31, r1
    33ee:	f8 cf       	rjmp	.-16     	; 0x33e0 <__floatsisf+0x1c>
    33f0:	fa f4       	brpl	.+62     	; 0x3430 <__floatsisf+0x6c>
    33f2:	bb 0f       	add	r27, r27
    33f4:	11 f4       	brne	.+4      	; 0x33fa <__floatsisf+0x36>
    33f6:	60 ff       	sbrs	r22, 0
    33f8:	1b c0       	rjmp	.+54     	; 0x3430 <__floatsisf+0x6c>
    33fa:	6f 5f       	subi	r22, 0xFF	; 255
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3400:	9f 4f       	sbci	r25, 0xFF	; 255
    3402:	16 c0       	rjmp	.+44     	; 0x3430 <__floatsisf+0x6c>
    3404:	88 23       	and	r24, r24
    3406:	11 f0       	breq	.+4      	; 0x340c <__floatsisf+0x48>
    3408:	96 e9       	ldi	r25, 0x96	; 150
    340a:	11 c0       	rjmp	.+34     	; 0x342e <__floatsisf+0x6a>
    340c:	77 23       	and	r23, r23
    340e:	21 f0       	breq	.+8      	; 0x3418 <__floatsisf+0x54>
    3410:	9e e8       	ldi	r25, 0x8E	; 142
    3412:	87 2f       	mov	r24, r23
    3414:	76 2f       	mov	r23, r22
    3416:	05 c0       	rjmp	.+10     	; 0x3422 <__floatsisf+0x5e>
    3418:	66 23       	and	r22, r22
    341a:	71 f0       	breq	.+28     	; 0x3438 <__floatsisf+0x74>
    341c:	96 e8       	ldi	r25, 0x86	; 134
    341e:	86 2f       	mov	r24, r22
    3420:	70 e0       	ldi	r23, 0x00	; 0
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	2a f0       	brmi	.+10     	; 0x3430 <__floatsisf+0x6c>
    3426:	9a 95       	dec	r25
    3428:	66 0f       	add	r22, r22
    342a:	77 1f       	adc	r23, r23
    342c:	88 1f       	adc	r24, r24
    342e:	da f7       	brpl	.-10     	; 0x3426 <__floatsisf+0x62>
    3430:	88 0f       	add	r24, r24
    3432:	96 95       	lsr	r25
    3434:	87 95       	ror	r24
    3436:	97 f9       	bld	r25, 7
    3438:	08 95       	ret

0000343a <__fp_inf>:
    343a:	97 f9       	bld	r25, 7
    343c:	9f 67       	ori	r25, 0x7F	; 127
    343e:	80 e8       	ldi	r24, 0x80	; 128
    3440:	70 e0       	ldi	r23, 0x00	; 0
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	08 95       	ret

00003446 <__fp_nan>:
    3446:	9f ef       	ldi	r25, 0xFF	; 255
    3448:	80 ec       	ldi	r24, 0xC0	; 192
    344a:	08 95       	ret

0000344c <__fp_pscA>:
    344c:	00 24       	eor	r0, r0
    344e:	0a 94       	dec	r0
    3450:	16 16       	cp	r1, r22
    3452:	17 06       	cpc	r1, r23
    3454:	18 06       	cpc	r1, r24
    3456:	09 06       	cpc	r0, r25
    3458:	08 95       	ret

0000345a <__fp_pscB>:
    345a:	00 24       	eor	r0, r0
    345c:	0a 94       	dec	r0
    345e:	12 16       	cp	r1, r18
    3460:	13 06       	cpc	r1, r19
    3462:	14 06       	cpc	r1, r20
    3464:	05 06       	cpc	r0, r21
    3466:	08 95       	ret

00003468 <__fp_round>:
    3468:	09 2e       	mov	r0, r25
    346a:	03 94       	inc	r0
    346c:	00 0c       	add	r0, r0
    346e:	11 f4       	brne	.+4      	; 0x3474 <__fp_round+0xc>
    3470:	88 23       	and	r24, r24
    3472:	52 f0       	brmi	.+20     	; 0x3488 <__fp_round+0x20>
    3474:	bb 0f       	add	r27, r27
    3476:	40 f4       	brcc	.+16     	; 0x3488 <__fp_round+0x20>
    3478:	bf 2b       	or	r27, r31
    347a:	11 f4       	brne	.+4      	; 0x3480 <__fp_round+0x18>
    347c:	60 ff       	sbrs	r22, 0
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <__fp_round+0x20>
    3480:	6f 5f       	subi	r22, 0xFF	; 255
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	8f 4f       	sbci	r24, 0xFF	; 255
    3486:	9f 4f       	sbci	r25, 0xFF	; 255
    3488:	08 95       	ret

0000348a <__fp_split3>:
    348a:	57 fd       	sbrc	r21, 7
    348c:	90 58       	subi	r25, 0x80	; 128
    348e:	44 0f       	add	r20, r20
    3490:	55 1f       	adc	r21, r21
    3492:	59 f0       	breq	.+22     	; 0x34aa <__fp_splitA+0x10>
    3494:	5f 3f       	cpi	r21, 0xFF	; 255
    3496:	71 f0       	breq	.+28     	; 0x34b4 <__fp_splitA+0x1a>
    3498:	47 95       	ror	r20

0000349a <__fp_splitA>:
    349a:	88 0f       	add	r24, r24
    349c:	97 fb       	bst	r25, 7
    349e:	99 1f       	adc	r25, r25
    34a0:	61 f0       	breq	.+24     	; 0x34ba <__fp_splitA+0x20>
    34a2:	9f 3f       	cpi	r25, 0xFF	; 255
    34a4:	79 f0       	breq	.+30     	; 0x34c4 <__fp_splitA+0x2a>
    34a6:	87 95       	ror	r24
    34a8:	08 95       	ret
    34aa:	12 16       	cp	r1, r18
    34ac:	13 06       	cpc	r1, r19
    34ae:	14 06       	cpc	r1, r20
    34b0:	55 1f       	adc	r21, r21
    34b2:	f2 cf       	rjmp	.-28     	; 0x3498 <__fp_split3+0xe>
    34b4:	46 95       	lsr	r20
    34b6:	f1 df       	rcall	.-30     	; 0x349a <__fp_splitA>
    34b8:	08 c0       	rjmp	.+16     	; 0x34ca <__fp_splitA+0x30>
    34ba:	16 16       	cp	r1, r22
    34bc:	17 06       	cpc	r1, r23
    34be:	18 06       	cpc	r1, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	f1 cf       	rjmp	.-30     	; 0x34a6 <__fp_splitA+0xc>
    34c4:	86 95       	lsr	r24
    34c6:	71 05       	cpc	r23, r1
    34c8:	61 05       	cpc	r22, r1
    34ca:	08 94       	sec
    34cc:	08 95       	ret

000034ce <__fp_zero>:
    34ce:	e8 94       	clt

000034d0 <__fp_szero>:
    34d0:	bb 27       	eor	r27, r27
    34d2:	66 27       	eor	r22, r22
    34d4:	77 27       	eor	r23, r23
    34d6:	cb 01       	movw	r24, r22
    34d8:	97 f9       	bld	r25, 7
    34da:	08 95       	ret

000034dc <__mulsf3>:
    34dc:	0b d0       	rcall	.+22     	; 0x34f4 <__mulsf3x>
    34de:	c4 cf       	rjmp	.-120    	; 0x3468 <__fp_round>
    34e0:	b5 df       	rcall	.-150    	; 0x344c <__fp_pscA>
    34e2:	28 f0       	brcs	.+10     	; 0x34ee <__mulsf3+0x12>
    34e4:	ba df       	rcall	.-140    	; 0x345a <__fp_pscB>
    34e6:	18 f0       	brcs	.+6      	; 0x34ee <__mulsf3+0x12>
    34e8:	95 23       	and	r25, r21
    34ea:	09 f0       	breq	.+2      	; 0x34ee <__mulsf3+0x12>
    34ec:	a6 cf       	rjmp	.-180    	; 0x343a <__fp_inf>
    34ee:	ab cf       	rjmp	.-170    	; 0x3446 <__fp_nan>
    34f0:	11 24       	eor	r1, r1
    34f2:	ee cf       	rjmp	.-36     	; 0x34d0 <__fp_szero>

000034f4 <__mulsf3x>:
    34f4:	ca df       	rcall	.-108    	; 0x348a <__fp_split3>
    34f6:	a0 f3       	brcs	.-24     	; 0x34e0 <__mulsf3+0x4>

000034f8 <__mulsf3_pse>:
    34f8:	95 9f       	mul	r25, r21
    34fa:	d1 f3       	breq	.-12     	; 0x34f0 <__mulsf3+0x14>
    34fc:	95 0f       	add	r25, r21
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	55 1f       	adc	r21, r21
    3502:	62 9f       	mul	r22, r18
    3504:	f0 01       	movw	r30, r0
    3506:	72 9f       	mul	r23, r18
    3508:	bb 27       	eor	r27, r27
    350a:	f0 0d       	add	r31, r0
    350c:	b1 1d       	adc	r27, r1
    350e:	63 9f       	mul	r22, r19
    3510:	aa 27       	eor	r26, r26
    3512:	f0 0d       	add	r31, r0
    3514:	b1 1d       	adc	r27, r1
    3516:	aa 1f       	adc	r26, r26
    3518:	64 9f       	mul	r22, r20
    351a:	66 27       	eor	r22, r22
    351c:	b0 0d       	add	r27, r0
    351e:	a1 1d       	adc	r26, r1
    3520:	66 1f       	adc	r22, r22
    3522:	82 9f       	mul	r24, r18
    3524:	22 27       	eor	r18, r18
    3526:	b0 0d       	add	r27, r0
    3528:	a1 1d       	adc	r26, r1
    352a:	62 1f       	adc	r22, r18
    352c:	73 9f       	mul	r23, r19
    352e:	b0 0d       	add	r27, r0
    3530:	a1 1d       	adc	r26, r1
    3532:	62 1f       	adc	r22, r18
    3534:	83 9f       	mul	r24, r19
    3536:	a0 0d       	add	r26, r0
    3538:	61 1d       	adc	r22, r1
    353a:	22 1f       	adc	r18, r18
    353c:	74 9f       	mul	r23, r20
    353e:	33 27       	eor	r19, r19
    3540:	a0 0d       	add	r26, r0
    3542:	61 1d       	adc	r22, r1
    3544:	23 1f       	adc	r18, r19
    3546:	84 9f       	mul	r24, r20
    3548:	60 0d       	add	r22, r0
    354a:	21 1d       	adc	r18, r1
    354c:	82 2f       	mov	r24, r18
    354e:	76 2f       	mov	r23, r22
    3550:	6a 2f       	mov	r22, r26
    3552:	11 24       	eor	r1, r1
    3554:	9f 57       	subi	r25, 0x7F	; 127
    3556:	50 40       	sbci	r21, 0x00	; 0
    3558:	8a f0       	brmi	.+34     	; 0x357c <__mulsf3_pse+0x84>
    355a:	e1 f0       	breq	.+56     	; 0x3594 <__mulsf3_pse+0x9c>
    355c:	88 23       	and	r24, r24
    355e:	4a f0       	brmi	.+18     	; 0x3572 <__mulsf3_pse+0x7a>
    3560:	ee 0f       	add	r30, r30
    3562:	ff 1f       	adc	r31, r31
    3564:	bb 1f       	adc	r27, r27
    3566:	66 1f       	adc	r22, r22
    3568:	77 1f       	adc	r23, r23
    356a:	88 1f       	adc	r24, r24
    356c:	91 50       	subi	r25, 0x01	; 1
    356e:	50 40       	sbci	r21, 0x00	; 0
    3570:	a9 f7       	brne	.-22     	; 0x355c <__mulsf3_pse+0x64>
    3572:	9e 3f       	cpi	r25, 0xFE	; 254
    3574:	51 05       	cpc	r21, r1
    3576:	70 f0       	brcs	.+28     	; 0x3594 <__mulsf3_pse+0x9c>
    3578:	60 cf       	rjmp	.-320    	; 0x343a <__fp_inf>
    357a:	aa cf       	rjmp	.-172    	; 0x34d0 <__fp_szero>
    357c:	5f 3f       	cpi	r21, 0xFF	; 255
    357e:	ec f3       	brlt	.-6      	; 0x357a <__mulsf3_pse+0x82>
    3580:	98 3e       	cpi	r25, 0xE8	; 232
    3582:	dc f3       	brlt	.-10     	; 0x357a <__mulsf3_pse+0x82>
    3584:	86 95       	lsr	r24
    3586:	77 95       	ror	r23
    3588:	67 95       	ror	r22
    358a:	b7 95       	ror	r27
    358c:	f7 95       	ror	r31
    358e:	e7 95       	ror	r30
    3590:	9f 5f       	subi	r25, 0xFF	; 255
    3592:	c1 f7       	brne	.-16     	; 0x3584 <__mulsf3_pse+0x8c>
    3594:	fe 2b       	or	r31, r30
    3596:	88 0f       	add	r24, r24
    3598:	91 1d       	adc	r25, r1
    359a:	96 95       	lsr	r25
    359c:	87 95       	ror	r24
    359e:	97 f9       	bld	r25, 7
    35a0:	08 95       	ret

000035a2 <pow>:
    35a2:	fa 01       	movw	r30, r20
    35a4:	ee 0f       	add	r30, r30
    35a6:	ff 1f       	adc	r31, r31
    35a8:	30 96       	adiw	r30, 0x00	; 0
    35aa:	21 05       	cpc	r18, r1
    35ac:	31 05       	cpc	r19, r1
    35ae:	99 f1       	breq	.+102    	; 0x3616 <pow+0x74>
    35b0:	61 15       	cp	r22, r1
    35b2:	71 05       	cpc	r23, r1
    35b4:	61 f4       	brne	.+24     	; 0x35ce <pow+0x2c>
    35b6:	80 38       	cpi	r24, 0x80	; 128
    35b8:	bf e3       	ldi	r27, 0x3F	; 63
    35ba:	9b 07       	cpc	r25, r27
    35bc:	49 f1       	breq	.+82     	; 0x3610 <pow+0x6e>
    35be:	68 94       	set
    35c0:	90 38       	cpi	r25, 0x80	; 128
    35c2:	81 05       	cpc	r24, r1
    35c4:	61 f0       	breq	.+24     	; 0x35de <pow+0x3c>
    35c6:	80 38       	cpi	r24, 0x80	; 128
    35c8:	bf ef       	ldi	r27, 0xFF	; 255
    35ca:	9b 07       	cpc	r25, r27
    35cc:	41 f0       	breq	.+16     	; 0x35de <pow+0x3c>
    35ce:	99 23       	and	r25, r25
    35d0:	42 f5       	brpl	.+80     	; 0x3622 <pow+0x80>
    35d2:	ff 3f       	cpi	r31, 0xFF	; 255
    35d4:	e1 05       	cpc	r30, r1
    35d6:	31 05       	cpc	r19, r1
    35d8:	21 05       	cpc	r18, r1
    35da:	11 f1       	breq	.+68     	; 0x3620 <pow+0x7e>
    35dc:	e8 94       	clt
    35de:	08 94       	sec
    35e0:	e7 95       	ror	r30
    35e2:	d9 01       	movw	r26, r18
    35e4:	aa 23       	and	r26, r26
    35e6:	29 f4       	brne	.+10     	; 0x35f2 <pow+0x50>
    35e8:	ab 2f       	mov	r26, r27
    35ea:	be 2f       	mov	r27, r30
    35ec:	f8 5f       	subi	r31, 0xF8	; 248
    35ee:	d0 f3       	brcs	.-12     	; 0x35e4 <pow+0x42>
    35f0:	10 c0       	rjmp	.+32     	; 0x3612 <pow+0x70>
    35f2:	ff 5f       	subi	r31, 0xFF	; 255
    35f4:	70 f4       	brcc	.+28     	; 0x3612 <pow+0x70>
    35f6:	a6 95       	lsr	r26
    35f8:	e0 f7       	brcc	.-8      	; 0x35f2 <pow+0x50>
    35fa:	f7 39       	cpi	r31, 0x97	; 151
    35fc:	50 f0       	brcs	.+20     	; 0x3612 <pow+0x70>
    35fe:	19 f0       	breq	.+6      	; 0x3606 <pow+0x64>
    3600:	ff 3a       	cpi	r31, 0xAF	; 175
    3602:	38 f4       	brcc	.+14     	; 0x3612 <pow+0x70>
    3604:	9f 77       	andi	r25, 0x7F	; 127
    3606:	9f 93       	push	r25
    3608:	0c d0       	rcall	.+24     	; 0x3622 <pow+0x80>
    360a:	0f 90       	pop	r0
    360c:	07 fc       	sbrc	r0, 7
    360e:	90 58       	subi	r25, 0x80	; 128
    3610:	08 95       	ret
    3612:	3e f0       	brts	.+14     	; 0x3622 <pow+0x80>
    3614:	18 cf       	rjmp	.-464    	; 0x3446 <__fp_nan>
    3616:	60 e0       	ldi	r22, 0x00	; 0
    3618:	70 e0       	ldi	r23, 0x00	; 0
    361a:	80 e8       	ldi	r24, 0x80	; 128
    361c:	9f e3       	ldi	r25, 0x3F	; 63
    361e:	08 95       	ret
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	9f 77       	andi	r25, 0x7F	; 127
    3624:	5f 93       	push	r21
    3626:	4f 93       	push	r20
    3628:	3f 93       	push	r19
    362a:	2f 93       	push	r18
    362c:	9e d0       	rcall	.+316    	; 0x376a <log>
    362e:	2f 91       	pop	r18
    3630:	3f 91       	pop	r19
    3632:	4f 91       	pop	r20
    3634:	5f 91       	pop	r21
    3636:	52 df       	rcall	.-348    	; 0x34dc <__mulsf3>
    3638:	05 c0       	rjmp	.+10     	; 0x3644 <exp>
    363a:	19 f4       	brne	.+6      	; 0x3642 <pow+0xa0>
    363c:	0e f0       	brts	.+2      	; 0x3640 <pow+0x9e>
    363e:	fd ce       	rjmp	.-518    	; 0x343a <__fp_inf>
    3640:	46 cf       	rjmp	.-372    	; 0x34ce <__fp_zero>
    3642:	01 cf       	rjmp	.-510    	; 0x3446 <__fp_nan>

00003644 <exp>:
    3644:	2a df       	rcall	.-428    	; 0x349a <__fp_splitA>
    3646:	c8 f3       	brcs	.-14     	; 0x363a <pow+0x98>
    3648:	96 38       	cpi	r25, 0x86	; 134
    364a:	c0 f7       	brcc	.-16     	; 0x363c <pow+0x9a>
    364c:	07 f8       	bld	r0, 7
    364e:	0f 92       	push	r0
    3650:	e8 94       	clt
    3652:	2b e3       	ldi	r18, 0x3B	; 59
    3654:	3a ea       	ldi	r19, 0xAA	; 170
    3656:	48 eb       	ldi	r20, 0xB8	; 184
    3658:	5f e7       	ldi	r21, 0x7F	; 127
    365a:	4e df       	rcall	.-356    	; 0x34f8 <__mulsf3_pse>
    365c:	0f 92       	push	r0
    365e:	0f 92       	push	r0
    3660:	0f 92       	push	r0
    3662:	4d b7       	in	r20, 0x3d	; 61
    3664:	5e b7       	in	r21, 0x3e	; 62
    3666:	0f 92       	push	r0
    3668:	c0 d0       	rcall	.+384    	; 0x37ea <modf>
    366a:	e4 ee       	ldi	r30, 0xE4	; 228
    366c:	f0 e0       	ldi	r31, 0x00	; 0
    366e:	16 d0       	rcall	.+44     	; 0x369c <__fp_powser>
    3670:	4f 91       	pop	r20
    3672:	5f 91       	pop	r21
    3674:	ef 91       	pop	r30
    3676:	ff 91       	pop	r31
    3678:	e5 95       	asr	r30
    367a:	ee 1f       	adc	r30, r30
    367c:	ff 1f       	adc	r31, r31
    367e:	49 f0       	breq	.+18     	; 0x3692 <exp+0x4e>
    3680:	fe 57       	subi	r31, 0x7E	; 126
    3682:	e0 68       	ori	r30, 0x80	; 128
    3684:	44 27       	eor	r20, r20
    3686:	ee 0f       	add	r30, r30
    3688:	44 1f       	adc	r20, r20
    368a:	fa 95       	dec	r31
    368c:	e1 f7       	brne	.-8      	; 0x3686 <exp+0x42>
    368e:	41 95       	neg	r20
    3690:	55 0b       	sbc	r21, r21
    3692:	32 d0       	rcall	.+100    	; 0x36f8 <ldexp>
    3694:	0f 90       	pop	r0
    3696:	07 fe       	sbrs	r0, 7
    3698:	26 c0       	rjmp	.+76     	; 0x36e6 <inverse>
    369a:	08 95       	ret

0000369c <__fp_powser>:
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	1f 93       	push	r17
    36a2:	0f 93       	push	r16
    36a4:	ff 92       	push	r15
    36a6:	ef 92       	push	r14
    36a8:	df 92       	push	r13
    36aa:	7b 01       	movw	r14, r22
    36ac:	8c 01       	movw	r16, r24
    36ae:	68 94       	set
    36b0:	05 c0       	rjmp	.+10     	; 0x36bc <__fp_powser+0x20>
    36b2:	da 2e       	mov	r13, r26
    36b4:	ef 01       	movw	r28, r30
    36b6:	1e df       	rcall	.-452    	; 0x34f4 <__mulsf3x>
    36b8:	fe 01       	movw	r30, r28
    36ba:	e8 94       	clt
    36bc:	a5 91       	lpm	r26, Z+
    36be:	25 91       	lpm	r18, Z+
    36c0:	35 91       	lpm	r19, Z+
    36c2:	45 91       	lpm	r20, Z+
    36c4:	55 91       	lpm	r21, Z+
    36c6:	ae f3       	brts	.-22     	; 0x36b2 <__fp_powser+0x16>
    36c8:	ef 01       	movw	r28, r30
    36ca:	8e dd       	rcall	.-1252   	; 0x31e8 <__addsf3x>
    36cc:	fe 01       	movw	r30, r28
    36ce:	97 01       	movw	r18, r14
    36d0:	a8 01       	movw	r20, r16
    36d2:	da 94       	dec	r13
    36d4:	79 f7       	brne	.-34     	; 0x36b4 <__fp_powser+0x18>
    36d6:	df 90       	pop	r13
    36d8:	ef 90       	pop	r14
    36da:	ff 90       	pop	r15
    36dc:	0f 91       	pop	r16
    36de:	1f 91       	pop	r17
    36e0:	cf 91       	pop	r28
    36e2:	df 91       	pop	r29
    36e4:	08 95       	ret

000036e6 <inverse>:
    36e6:	9b 01       	movw	r18, r22
    36e8:	ac 01       	movw	r20, r24
    36ea:	60 e0       	ldi	r22, 0x00	; 0
    36ec:	70 e0       	ldi	r23, 0x00	; 0
    36ee:	80 e8       	ldi	r24, 0x80	; 128
    36f0:	9f e3       	ldi	r25, 0x3F	; 63
    36f2:	cd cd       	rjmp	.-1126   	; 0x328e <__divsf3>
    36f4:	a2 ce       	rjmp	.-700    	; 0x343a <__fp_inf>
    36f6:	ac c0       	rjmp	.+344    	; 0x3850 <__fp_mpack>

000036f8 <ldexp>:
    36f8:	d0 de       	rcall	.-608    	; 0x349a <__fp_splitA>
    36fa:	e8 f3       	brcs	.-6      	; 0x36f6 <inverse+0x10>
    36fc:	99 23       	and	r25, r25
    36fe:	d9 f3       	breq	.-10     	; 0x36f6 <inverse+0x10>
    3700:	94 0f       	add	r25, r20
    3702:	51 1d       	adc	r21, r1
    3704:	bb f3       	brvs	.-18     	; 0x36f4 <inverse+0xe>
    3706:	91 50       	subi	r25, 0x01	; 1
    3708:	50 40       	sbci	r21, 0x00	; 0
    370a:	94 f0       	brlt	.+36     	; 0x3730 <ldexp+0x38>
    370c:	59 f0       	breq	.+22     	; 0x3724 <ldexp+0x2c>
    370e:	88 23       	and	r24, r24
    3710:	32 f0       	brmi	.+12     	; 0x371e <ldexp+0x26>
    3712:	66 0f       	add	r22, r22
    3714:	77 1f       	adc	r23, r23
    3716:	88 1f       	adc	r24, r24
    3718:	91 50       	subi	r25, 0x01	; 1
    371a:	50 40       	sbci	r21, 0x00	; 0
    371c:	c1 f7       	brne	.-16     	; 0x370e <ldexp+0x16>
    371e:	9e 3f       	cpi	r25, 0xFE	; 254
    3720:	51 05       	cpc	r21, r1
    3722:	44 f7       	brge	.-48     	; 0x36f4 <inverse+0xe>
    3724:	88 0f       	add	r24, r24
    3726:	91 1d       	adc	r25, r1
    3728:	96 95       	lsr	r25
    372a:	87 95       	ror	r24
    372c:	97 f9       	bld	r25, 7
    372e:	08 95       	ret
    3730:	5f 3f       	cpi	r21, 0xFF	; 255
    3732:	ac f0       	brlt	.+42     	; 0x375e <ldexp+0x66>
    3734:	98 3e       	cpi	r25, 0xE8	; 232
    3736:	9c f0       	brlt	.+38     	; 0x375e <ldexp+0x66>
    3738:	bb 27       	eor	r27, r27
    373a:	86 95       	lsr	r24
    373c:	77 95       	ror	r23
    373e:	67 95       	ror	r22
    3740:	b7 95       	ror	r27
    3742:	08 f4       	brcc	.+2      	; 0x3746 <ldexp+0x4e>
    3744:	b1 60       	ori	r27, 0x01	; 1
    3746:	93 95       	inc	r25
    3748:	c1 f7       	brne	.-16     	; 0x373a <ldexp+0x42>
    374a:	bb 0f       	add	r27, r27
    374c:	58 f7       	brcc	.-42     	; 0x3724 <ldexp+0x2c>
    374e:	11 f4       	brne	.+4      	; 0x3754 <ldexp+0x5c>
    3750:	60 ff       	sbrs	r22, 0
    3752:	e8 cf       	rjmp	.-48     	; 0x3724 <ldexp+0x2c>
    3754:	6f 5f       	subi	r22, 0xFF	; 255
    3756:	7f 4f       	sbci	r23, 0xFF	; 255
    3758:	8f 4f       	sbci	r24, 0xFF	; 255
    375a:	9f 4f       	sbci	r25, 0xFF	; 255
    375c:	e3 cf       	rjmp	.-58     	; 0x3724 <ldexp+0x2c>
    375e:	b8 ce       	rjmp	.-656    	; 0x34d0 <__fp_szero>
    3760:	0e f0       	brts	.+2      	; 0x3764 <ldexp+0x6c>
    3762:	76 c0       	rjmp	.+236    	; 0x3850 <__fp_mpack>
    3764:	70 ce       	rjmp	.-800    	; 0x3446 <__fp_nan>
    3766:	68 94       	set
    3768:	68 ce       	rjmp	.-816    	; 0x343a <__fp_inf>

0000376a <log>:
    376a:	97 de       	rcall	.-722    	; 0x349a <__fp_splitA>
    376c:	c8 f3       	brcs	.-14     	; 0x3760 <ldexp+0x68>
    376e:	99 23       	and	r25, r25
    3770:	d1 f3       	breq	.-12     	; 0x3766 <ldexp+0x6e>
    3772:	c6 f3       	brts	.-16     	; 0x3764 <ldexp+0x6c>
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	1f 93       	push	r17
    377a:	0f 93       	push	r16
    377c:	ff 92       	push	r15
    377e:	c9 2f       	mov	r28, r25
    3780:	dd 27       	eor	r29, r29
    3782:	88 23       	and	r24, r24
    3784:	2a f0       	brmi	.+10     	; 0x3790 <log+0x26>
    3786:	21 97       	sbiw	r28, 0x01	; 1
    3788:	66 0f       	add	r22, r22
    378a:	77 1f       	adc	r23, r23
    378c:	88 1f       	adc	r24, r24
    378e:	da f7       	brpl	.-10     	; 0x3786 <log+0x1c>
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f eb       	ldi	r21, 0xBF	; 191
    3798:	9f e3       	ldi	r25, 0x3F	; 63
    379a:	88 39       	cpi	r24, 0x98	; 152
    379c:	20 f0       	brcs	.+8      	; 0x37a6 <log+0x3c>
    379e:	80 3e       	cpi	r24, 0xE0	; 224
    37a0:	30 f0       	brcs	.+12     	; 0x37ae <log+0x44>
    37a2:	21 96       	adiw	r28, 0x01	; 1
    37a4:	8f 77       	andi	r24, 0x7F	; 127
    37a6:	0f dd       	rcall	.-1506   	; 0x31c6 <__addsf3>
    37a8:	ec e0       	ldi	r30, 0x0C	; 12
    37aa:	f1 e0       	ldi	r31, 0x01	; 1
    37ac:	03 c0       	rjmp	.+6      	; 0x37b4 <log+0x4a>
    37ae:	0b dd       	rcall	.-1514   	; 0x31c6 <__addsf3>
    37b0:	e9 e3       	ldi	r30, 0x39	; 57
    37b2:	f1 e0       	ldi	r31, 0x01	; 1
    37b4:	73 df       	rcall	.-282    	; 0x369c <__fp_powser>
    37b6:	8b 01       	movw	r16, r22
    37b8:	be 01       	movw	r22, r28
    37ba:	ec 01       	movw	r28, r24
    37bc:	fb 2e       	mov	r15, r27
    37be:	6f 57       	subi	r22, 0x7F	; 127
    37c0:	71 09       	sbc	r23, r1
    37c2:	75 95       	asr	r23
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 0b       	sbc	r24, r24
    37c8:	99 0b       	sbc	r25, r25
    37ca:	fc dd       	rcall	.-1032   	; 0x33c4 <__floatsisf>
    37cc:	28 e1       	ldi	r18, 0x18	; 24
    37ce:	32 e7       	ldi	r19, 0x72	; 114
    37d0:	41 e3       	ldi	r20, 0x31	; 49
    37d2:	5f e3       	ldi	r21, 0x3F	; 63
    37d4:	8f de       	rcall	.-738    	; 0x34f4 <__mulsf3x>
    37d6:	af 2d       	mov	r26, r15
    37d8:	98 01       	movw	r18, r16
    37da:	ae 01       	movw	r20, r28
    37dc:	ff 90       	pop	r15
    37de:	0f 91       	pop	r16
    37e0:	1f 91       	pop	r17
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	00 dd       	rcall	.-1536   	; 0x31e8 <__addsf3x>
    37e8:	3f ce       	rjmp	.-898    	; 0x3468 <__fp_round>

000037ea <modf>:
    37ea:	fa 01       	movw	r30, r20
    37ec:	dc 01       	movw	r26, r24
    37ee:	aa 0f       	add	r26, r26
    37f0:	bb 1f       	adc	r27, r27
    37f2:	9b 01       	movw	r18, r22
    37f4:	ac 01       	movw	r20, r24
    37f6:	bf 57       	subi	r27, 0x7F	; 127
    37f8:	28 f4       	brcc	.+10     	; 0x3804 <modf+0x1a>
    37fa:	22 27       	eor	r18, r18
    37fc:	33 27       	eor	r19, r19
    37fe:	44 27       	eor	r20, r20
    3800:	50 78       	andi	r21, 0x80	; 128
    3802:	1f c0       	rjmp	.+62     	; 0x3842 <modf+0x58>
    3804:	b7 51       	subi	r27, 0x17	; 23
    3806:	88 f4       	brcc	.+34     	; 0x382a <modf+0x40>
    3808:	ab 2f       	mov	r26, r27
    380a:	00 24       	eor	r0, r0
    380c:	46 95       	lsr	r20
    380e:	37 95       	ror	r19
    3810:	27 95       	ror	r18
    3812:	01 1c       	adc	r0, r1
    3814:	a3 95       	inc	r26
    3816:	d2 f3       	brmi	.-12     	; 0x380c <modf+0x22>
    3818:	00 20       	and	r0, r0
    381a:	69 f0       	breq	.+26     	; 0x3836 <modf+0x4c>
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	44 1f       	adc	r20, r20
    3822:	b3 95       	inc	r27
    3824:	da f3       	brmi	.-10     	; 0x381c <modf+0x32>
    3826:	0d d0       	rcall	.+26     	; 0x3842 <modf+0x58>
    3828:	cd cc       	rjmp	.-1638   	; 0x31c4 <__subsf3>
    382a:	61 30       	cpi	r22, 0x01	; 1
    382c:	71 05       	cpc	r23, r1
    382e:	a0 e8       	ldi	r26, 0x80	; 128
    3830:	8a 07       	cpc	r24, r26
    3832:	b9 46       	sbci	r27, 0x69	; 105
    3834:	30 f4       	brcc	.+12     	; 0x3842 <modf+0x58>
    3836:	9b 01       	movw	r18, r22
    3838:	ac 01       	movw	r20, r24
    383a:	66 27       	eor	r22, r22
    383c:	77 27       	eor	r23, r23
    383e:	88 27       	eor	r24, r24
    3840:	90 78       	andi	r25, 0x80	; 128
    3842:	30 96       	adiw	r30, 0x00	; 0
    3844:	21 f0       	breq	.+8      	; 0x384e <modf+0x64>
    3846:	20 83       	st	Z, r18
    3848:	31 83       	std	Z+1, r19	; 0x01
    384a:	42 83       	std	Z+2, r20	; 0x02
    384c:	53 83       	std	Z+3, r21	; 0x03
    384e:	08 95       	ret

00003850 <__fp_mpack>:
    3850:	9f 3f       	cpi	r25, 0xFF	; 255
    3852:	31 f0       	breq	.+12     	; 0x3860 <__fp_mpack_finite+0xc>

00003854 <__fp_mpack_finite>:
    3854:	91 50       	subi	r25, 0x01	; 1
    3856:	20 f4       	brcc	.+8      	; 0x3860 <__fp_mpack_finite+0xc>
    3858:	87 95       	ror	r24
    385a:	77 95       	ror	r23
    385c:	67 95       	ror	r22
    385e:	b7 95       	ror	r27
    3860:	88 0f       	add	r24, r24
    3862:	91 1d       	adc	r25, r1
    3864:	96 95       	lsr	r25
    3866:	87 95       	ror	r24
    3868:	97 f9       	bld	r25, 7
    386a:	08 95       	ret

0000386c <__udivmodhi4>:
    386c:	aa 1b       	sub	r26, r26
    386e:	bb 1b       	sub	r27, r27
    3870:	51 e1       	ldi	r21, 0x11	; 17
    3872:	07 c0       	rjmp	.+14     	; 0x3882 <__udivmodhi4_ep>

00003874 <__udivmodhi4_loop>:
    3874:	aa 1f       	adc	r26, r26
    3876:	bb 1f       	adc	r27, r27
    3878:	a6 17       	cp	r26, r22
    387a:	b7 07       	cpc	r27, r23
    387c:	10 f0       	brcs	.+4      	; 0x3882 <__udivmodhi4_ep>
    387e:	a6 1b       	sub	r26, r22
    3880:	b7 0b       	sbc	r27, r23

00003882 <__udivmodhi4_ep>:
    3882:	88 1f       	adc	r24, r24
    3884:	99 1f       	adc	r25, r25
    3886:	5a 95       	dec	r21
    3888:	a9 f7       	brne	.-22     	; 0x3874 <__udivmodhi4_loop>
    388a:	80 95       	com	r24
    388c:	90 95       	com	r25
    388e:	bc 01       	movw	r22, r24
    3890:	cd 01       	movw	r24, r26
    3892:	08 95       	ret

00003894 <__divmodhi4>:
    3894:	97 fb       	bst	r25, 7
    3896:	09 2e       	mov	r0, r25
    3898:	07 26       	eor	r0, r23
    389a:	0a d0       	rcall	.+20     	; 0x38b0 <__divmodhi4_neg1>
    389c:	77 fd       	sbrc	r23, 7
    389e:	04 d0       	rcall	.+8      	; 0x38a8 <__divmodhi4_neg2>
    38a0:	e5 df       	rcall	.-54     	; 0x386c <__udivmodhi4>
    38a2:	06 d0       	rcall	.+12     	; 0x38b0 <__divmodhi4_neg1>
    38a4:	00 20       	and	r0, r0
    38a6:	1a f4       	brpl	.+6      	; 0x38ae <__divmodhi4_exit>

000038a8 <__divmodhi4_neg2>:
    38a8:	70 95       	com	r23
    38aa:	61 95       	neg	r22
    38ac:	7f 4f       	sbci	r23, 0xFF	; 255

000038ae <__divmodhi4_exit>:
    38ae:	08 95       	ret

000038b0 <__divmodhi4_neg1>:
    38b0:	f6 f7       	brtc	.-4      	; 0x38ae <__divmodhi4_exit>
    38b2:	90 95       	com	r25
    38b4:	81 95       	neg	r24
    38b6:	9f 4f       	sbci	r25, 0xFF	; 255
    38b8:	08 95       	ret

000038ba <_exit>:
    38ba:	f8 94       	cli

000038bc <__stop_program>:
    38bc:	ff cf       	rjmp	.-2      	; 0x38bc <__stop_program>
